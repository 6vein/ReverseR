//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Java8Parser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class Java8Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ABSTRACT=1, ASSERT=2, BOOLEAN=3, BREAK=4, BYTE=5, CASE=6, CATCH=7, CHAR=8, 
		CLASS=9, CONST=10, CONTINUE=11, DEFAULT=12, DO=13, DOUBLE=14, ELSE=15, 
		ENUM=16, EXTENDS=17, FINAL=18, FINALLY=19, FLOAT=20, FOR=21, IF=22, GOTO=23, 
		IMPLEMENTS=24, IMPORT=25, INSTANCEOF=26, INT=27, INTERFACE=28, LONG=29, 
		NATIVE=30, NEW=31, PACKAGE=32, PRIVATE=33, PROTECTED=34, PUBLIC=35, RETURN=36, 
		SHORT=37, STATIC=38, STRICTFP=39, SUPER=40, SWITCH=41, SYNCHRONIZED=42, 
		THIS=43, THROW=44, THROWS=45, TRANSIENT=46, TRY=47, VOID=48, VOLATILE=49, 
		WHILE=50, IntegerLiteral=51, FloatingPointLiteral=52, BooleanLiteral=53, 
		CharacterLiteral=54, StringLiteral=55, NullLiteral=56, LPAREN=57, RPAREN=58, 
		LBRACE=59, RBRACE=60, LBRACK=61, RBRACK=62, SEMI=63, COMMA=64, DOT=65, 
		ASSIGN=66, GT=67, LT=68, BANG=69, TILDE=70, QUESTION=71, COLON=72, EQUAL=73, 
		LE=74, GE=75, NOTEQUAL=76, AND=77, OR=78, INC=79, DEC=80, ADD=81, SUB=82, 
		MUL=83, DIV=84, BITAND=85, BITOR=86, CARET=87, MOD=88, ARROW=89, COLONCOLON=90, 
		ADD_ASSIGN=91, SUB_ASSIGN=92, MUL_ASSIGN=93, DIV_ASSIGN=94, AND_ASSIGN=95, 
		OR_ASSIGN=96, XOR_ASSIGN=97, MOD_ASSIGN=98, LSHIFT_ASSIGN=99, RSHIFT_ASSIGN=100, 
		URSHIFT_ASSIGN=101, Identifier=102, AT=103, ELLIPSIS=104, WS=105, COMMENT=106, 
		LINE_COMMENT=107;
	public const int
		RULE_literal = 0, RULE_primitiveType = 1, RULE_numericType = 2, RULE_integralType = 3, 
		RULE_floatingPointType = 4, RULE_referenceType = 5, RULE_classOrInterfaceType = 6, 
		RULE_classType = 7, RULE_classType_lf_classOrInterfaceType = 8, RULE_classType_lfno_classOrInterfaceType = 9, 
		RULE_interfaceType = 10, RULE_interfaceType_lf_classOrInterfaceType = 11, 
		RULE_interfaceType_lfno_classOrInterfaceType = 12, RULE_typeVariable = 13, 
		RULE_arrayType = 14, RULE_dims = 15, RULE_typeParameter = 16, RULE_typeParameterModifier = 17, 
		RULE_typeBound = 18, RULE_additionalBound = 19, RULE_typeArguments = 20, 
		RULE_typeArgumentList = 21, RULE_typeArgument = 22, RULE_wildcard = 23, 
		RULE_wildcardBounds = 24, RULE_packageName = 25, RULE_typeName = 26, RULE_packageOrTypeName = 27, 
		RULE_expressionName = 28, RULE_methodName = 29, RULE_ambiguousName = 30, 
		RULE_compilationUnit = 31, RULE_packageDeclaration = 32, RULE_packageModifier = 33, 
		RULE_importDeclaration = 34, RULE_singleTypeImportDeclaration = 35, RULE_typeImportOnDemandDeclaration = 36, 
		RULE_singleStaticImportDeclaration = 37, RULE_staticImportOnDemandDeclaration = 38, 
		RULE_typeDeclaration = 39, RULE_classDeclaration = 40, RULE_normalClassDeclaration = 41, 
		RULE_classModifier = 42, RULE_typeParameters = 43, RULE_typeParameterList = 44, 
		RULE_superclass = 45, RULE_superinterfaces = 46, RULE_interfaceTypeList = 47, 
		RULE_classBody = 48, RULE_classBodyDeclaration = 49, RULE_classMemberDeclaration = 50, 
		RULE_fieldDeclaration = 51, RULE_fieldModifier = 52, RULE_variableDeclaratorList = 53, 
		RULE_variableDeclarator = 54, RULE_variableDeclaratorId = 55, RULE_variableInitializer = 56, 
		RULE_unannType = 57, RULE_unannPrimitiveType = 58, RULE_unannReferenceType = 59, 
		RULE_unannClassOrInterfaceType = 60, RULE_unannClassType = 61, RULE_unannClassType_lf_unannClassOrInterfaceType = 62, 
		RULE_unannClassType_lfno_unannClassOrInterfaceType = 63, RULE_unannInterfaceType = 64, 
		RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 65, RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 66, 
		RULE_unannTypeVariable = 67, RULE_unannArrayType = 68, RULE_methodDeclaration = 69, 
		RULE_methodModifier = 70, RULE_methodHeader = 71, RULE_result = 72, RULE_methodDeclarator = 73, 
		RULE_formalParameterList = 74, RULE_formalParameters = 75, RULE_formalParameter = 76, 
		RULE_variableModifier = 77, RULE_lastFormalParameter = 78, RULE_receiverParameter = 79, 
		RULE_throws_ = 80, RULE_exceptionTypeList = 81, RULE_exceptionType = 82, 
		RULE_methodBody = 83, RULE_instanceInitializer = 84, RULE_staticInitializer = 85, 
		RULE_constructorDeclaration = 86, RULE_constructorModifier = 87, RULE_constructorDeclarator = 88, 
		RULE_simpleTypeName = 89, RULE_constructorBody = 90, RULE_explicitConstructorInvocation = 91, 
		RULE_enumDeclaration = 92, RULE_enumBody = 93, RULE_enumConstantList = 94, 
		RULE_enumConstant = 95, RULE_enumConstantModifier = 96, RULE_enumBodyDeclarations = 97, 
		RULE_interfaceDeclaration = 98, RULE_normalInterfaceDeclaration = 99, 
		RULE_interfaceModifier = 100, RULE_extendsInterfaces = 101, RULE_interfaceBody = 102, 
		RULE_interfaceMemberDeclaration = 103, RULE_constantDeclaration = 104, 
		RULE_constantModifier = 105, RULE_interfaceMethodDeclaration = 106, RULE_interfaceMethodModifier = 107, 
		RULE_annotationTypeDeclaration = 108, RULE_annotationTypeBody = 109, RULE_annotationTypeMemberDeclaration = 110, 
		RULE_annotationTypeElementDeclaration = 111, RULE_annotationTypeElementModifier = 112, 
		RULE_defaultValue = 113, RULE_annotation = 114, RULE_normalAnnotation = 115, 
		RULE_elementValuePairList = 116, RULE_elementValuePair = 117, RULE_elementValue = 118, 
		RULE_elementValueArrayInitializer = 119, RULE_elementValueList = 120, 
		RULE_markerAnnotation = 121, RULE_singleElementAnnotation = 122, RULE_arrayInitializer = 123, 
		RULE_variableInitializerList = 124, RULE_block = 125, RULE_blockStatements = 126, 
		RULE_blockStatement = 127, RULE_localVariableDeclarationStatement = 128, 
		RULE_localVariableDeclaration = 129, RULE_statement = 130, RULE_statementNoShortIf = 131, 
		RULE_statementWithoutTrailingSubstatement = 132, RULE_emptyStatement = 133, 
		RULE_labeledStatement = 134, RULE_labeledStatementNoShortIf = 135, RULE_expressionStatement = 136, 
		RULE_statementExpression = 137, RULE_ifThenStatement = 138, RULE_ifThenElseStatement = 139, 
		RULE_ifThenElseStatementNoShortIf = 140, RULE_assertStatement = 141, RULE_switchStatement = 142, 
		RULE_switchBlock = 143, RULE_switchBlockStatementGroup = 144, RULE_switchLabels = 145, 
		RULE_switchLabel = 146, RULE_enumConstantName = 147, RULE_whileStatement = 148, 
		RULE_whileStatementNoShortIf = 149, RULE_doStatement = 150, RULE_forStatement = 151, 
		RULE_forStatementNoShortIf = 152, RULE_basicForStatement = 153, RULE_basicForStatementNoShortIf = 154, 
		RULE_forInit = 155, RULE_forUpdate = 156, RULE_statementExpressionList = 157, 
		RULE_enhancedForStatement = 158, RULE_enhancedForStatementNoShortIf = 159, 
		RULE_breakStatement = 160, RULE_continueStatement = 161, RULE_returnStatement = 162, 
		RULE_throwStatement = 163, RULE_synchronizedStatement = 164, RULE_tryStatement = 165, 
		RULE_catches = 166, RULE_catchClause = 167, RULE_catchFormalParameter = 168, 
		RULE_catchType = 169, RULE_finally_ = 170, RULE_tryWithResourcesStatement = 171, 
		RULE_resourceSpecification = 172, RULE_resourceList = 173, RULE_resource = 174, 
		RULE_primary = 175, RULE_primaryNoNewArray = 176, RULE_primaryNoNewArray_lf_arrayAccess = 177, 
		RULE_primaryNoNewArray_lfno_arrayAccess = 178, RULE_primaryNoNewArray_lf_primary = 179, 
		RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 180, RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 181, 
		RULE_primaryNoNewArray_lfno_primary = 182, RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 183, 
		RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 184, 
		RULE_classInstanceCreationExpression = 185, RULE_classInstanceCreationExpression_lf_primary = 186, 
		RULE_classInstanceCreationExpression_lfno_primary = 187, RULE_typeArgumentsOrDiamond = 188, 
		RULE_fieldAccess = 189, RULE_fieldAccess_lf_primary = 190, RULE_fieldAccess_lfno_primary = 191, 
		RULE_arrayAccess = 192, RULE_arrayAccess_lf_primary = 193, RULE_arrayAccess_lfno_primary = 194, 
		RULE_methodInvocation = 195, RULE_methodInvocation_lf_primary = 196, RULE_methodInvocation_lfno_primary = 197, 
		RULE_argumentList = 198, RULE_methodReference = 199, RULE_methodReference_lf_primary = 200, 
		RULE_methodReference_lfno_primary = 201, RULE_arrayCreationExpression = 202, 
		RULE_dimExprs = 203, RULE_dimExpr = 204, RULE_constantExpression = 205, 
		RULE_expression = 206, RULE_lambdaExpression = 207, RULE_lambdaParameters = 208, 
		RULE_inferredFormalParameterList = 209, RULE_lambdaBody = 210, RULE_assignmentExpression = 211, 
		RULE_assignment = 212, RULE_leftHandSide = 213, RULE_assignmentOperator = 214, 
		RULE_conditionalExpression = 215, RULE_conditionalOrExpression = 216, 
		RULE_conditionalAndExpression = 217, RULE_inclusiveOrExpression = 218, 
		RULE_exclusiveOrExpression = 219, RULE_andExpression = 220, RULE_equalityExpression = 221, 
		RULE_relationalExpression = 222, RULE_shiftExpression = 223, RULE_additiveExpression = 224, 
		RULE_multiplicativeExpression = 225, RULE_unaryExpression = 226, RULE_preIncrementExpression = 227, 
		RULE_preDecrementExpression = 228, RULE_unaryExpressionNotPlusMinus = 229, 
		RULE_postfixExpression = 230, RULE_postIncrementExpression = 231, RULE_postIncrementExpression_lf_postfixExpression = 232, 
		RULE_postDecrementExpression = 233, RULE_postDecrementExpression_lf_postfixExpression = 234, 
		RULE_castExpression = 235;
	public static readonly string[] ruleNames = {
		"literal", "primitiveType", "numericType", "integralType", "floatingPointType", 
		"referenceType", "classOrInterfaceType", "classType", "classType_lf_classOrInterfaceType", 
		"classType_lfno_classOrInterfaceType", "interfaceType", "interfaceType_lf_classOrInterfaceType", 
		"interfaceType_lfno_classOrInterfaceType", "typeVariable", "arrayType", 
		"dims", "typeParameter", "typeParameterModifier", "typeBound", "additionalBound", 
		"typeArguments", "typeArgumentList", "typeArgument", "wildcard", "wildcardBounds", 
		"packageName", "typeName", "packageOrTypeName", "expressionName", "methodName", 
		"ambiguousName", "compilationUnit", "packageDeclaration", "packageModifier", 
		"importDeclaration", "singleTypeImportDeclaration", "typeImportOnDemandDeclaration", 
		"singleStaticImportDeclaration", "staticImportOnDemandDeclaration", "typeDeclaration", 
		"classDeclaration", "normalClassDeclaration", "classModifier", "typeParameters", 
		"typeParameterList", "superclass", "superinterfaces", "interfaceTypeList", 
		"classBody", "classBodyDeclaration", "classMemberDeclaration", "fieldDeclaration", 
		"fieldModifier", "variableDeclaratorList", "variableDeclarator", "variableDeclaratorId", 
		"variableInitializer", "unannType", "unannPrimitiveType", "unannReferenceType", 
		"unannClassOrInterfaceType", "unannClassType", "unannClassType_lf_unannClassOrInterfaceType", 
		"unannClassType_lfno_unannClassOrInterfaceType", "unannInterfaceType", 
		"unannInterfaceType_lf_unannClassOrInterfaceType", "unannInterfaceType_lfno_unannClassOrInterfaceType", 
		"unannTypeVariable", "unannArrayType", "methodDeclaration", "methodModifier", 
		"methodHeader", "result", "methodDeclarator", "formalParameterList", "formalParameters", 
		"formalParameter", "variableModifier", "lastFormalParameter", "receiverParameter", 
		"throws_", "exceptionTypeList", "exceptionType", "methodBody", "instanceInitializer", 
		"staticInitializer", "constructorDeclaration", "constructorModifier", 
		"constructorDeclarator", "simpleTypeName", "constructorBody", "explicitConstructorInvocation", 
		"enumDeclaration", "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier", 
		"enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration", 
		"interfaceModifier", "extendsInterfaces", "interfaceBody", "interfaceMemberDeclaration", 
		"constantDeclaration", "constantModifier", "interfaceMethodDeclaration", 
		"interfaceMethodModifier", "annotationTypeDeclaration", "annotationTypeBody", 
		"annotationTypeMemberDeclaration", "annotationTypeElementDeclaration", 
		"annotationTypeElementModifier", "defaultValue", "annotation", "normalAnnotation", 
		"elementValuePairList", "elementValuePair", "elementValue", "elementValueArrayInitializer", 
		"elementValueList", "markerAnnotation", "singleElementAnnotation", "arrayInitializer", 
		"variableInitializerList", "block", "blockStatements", "blockStatement", 
		"localVariableDeclarationStatement", "localVariableDeclaration", "statement", 
		"statementNoShortIf", "statementWithoutTrailingSubstatement", "emptyStatement", 
		"labeledStatement", "labeledStatementNoShortIf", "expressionStatement", 
		"statementExpression", "ifThenStatement", "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
		"assertStatement", "switchStatement", "switchBlock", "switchBlockStatementGroup", 
		"switchLabels", "switchLabel", "enumConstantName", "whileStatement", "whileStatementNoShortIf", 
		"doStatement", "forStatement", "forStatementNoShortIf", "basicForStatement", 
		"basicForStatementNoShortIf", "forInit", "forUpdate", "statementExpressionList", 
		"enhancedForStatement", "enhancedForStatementNoShortIf", "breakStatement", 
		"continueStatement", "returnStatement", "throwStatement", "synchronizedStatement", 
		"tryStatement", "catches", "catchClause", "catchFormalParameter", "catchType", 
		"finally_", "tryWithResourcesStatement", "resourceSpecification", "resourceList", 
		"resource", "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess", 
		"primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary", 
		"primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary", 
		"primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary", 
		"primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", "classInstanceCreationExpression", 
		"classInstanceCreationExpression_lf_primary", "classInstanceCreationExpression_lfno_primary", 
		"typeArgumentsOrDiamond", "fieldAccess", "fieldAccess_lf_primary", "fieldAccess_lfno_primary", 
		"arrayAccess", "arrayAccess_lf_primary", "arrayAccess_lfno_primary", "methodInvocation", 
		"methodInvocation_lf_primary", "methodInvocation_lfno_primary", "argumentList", 
		"methodReference", "methodReference_lf_primary", "methodReference_lfno_primary", 
		"arrayCreationExpression", "dimExprs", "dimExpr", "constantExpression", 
		"expression", "lambdaExpression", "lambdaParameters", "inferredFormalParameterList", 
		"lambdaBody", "assignmentExpression", "assignment", "leftHandSide", "assignmentOperator", 
		"conditionalExpression", "conditionalOrExpression", "conditionalAndExpression", 
		"inclusiveOrExpression", "exclusiveOrExpression", "andExpression", "equalityExpression", 
		"relationalExpression", "shiftExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression", "preIncrementExpression", "preDecrementExpression", 
		"unaryExpressionNotPlusMinus", "postfixExpression", "postIncrementExpression", 
		"postIncrementExpression_lf_postfixExpression", "postDecrementExpression", 
		"postDecrementExpression_lf_postfixExpression", "castExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
		"'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
		"'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", "'instanceof'", 
		"'int'", "'interface'", "'long'", "'native'", "'new'", "'package'", "'private'", 
		"'protected'", "'public'", "'return'", "'short'", "'static'", "'strictfp'", 
		"'super'", "'switch'", "'synchronized'", "'this'", "'throw'", "'throws'", 
		"'transient'", "'try'", "'void'", "'volatile'", "'while'", null, null, 
		null, null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", 
		"'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
		"'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'->'", "'::'", "'+='", 
		"'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", 
		"'>>>='", null, "'@'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
		"CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
		"ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", 
		"IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
		"PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", 
		"SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", 
		"TRY", "VOID", "VOLATILE", "WHILE", "IntegerLiteral", "FloatingPointLiteral", 
		"BooleanLiteral", "CharacterLiteral", "StringLiteral", "NullLiteral", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
		"DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
		"LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
		"DIV", "BITAND", "BITOR", "CARET", "MOD", "ARROW", "COLONCOLON", "ADD_ASSIGN", 
		"SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
		"MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "Identifier", 
		"AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Java8Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Java8Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Java8Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Java8Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(Java8Parser.IntegerLiteral, 0); }
		public ITerminalNode FloatingPointLiteral() { return GetToken(Java8Parser.FloatingPointLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(Java8Parser.BooleanLiteral, 0); }
		public ITerminalNode CharacterLiteral() { return GetToken(Java8Parser.CharacterLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(Java8Parser.StringLiteral, 0); }
		public ITerminalNode NullLiteral() { return GetToken(Java8Parser.NullLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 0, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode BOOLEAN() { return GetToken(Java8Parser.BOOLEAN, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_primitiveType);
		int _la;
		try {
			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 474; annotation();
					}
					}
					State = 479;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 480; numericType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 481; annotation();
					}
					}
					State = 486;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 487; Match(BOOLEAN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		public IntegralTypeContext integralType() {
			return GetRuleContext<IntegralTypeContext>(0);
		}
		public FloatingPointTypeContext floatingPointType() {
			return GetRuleContext<FloatingPointTypeContext>(0);
		}
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_numericType);
		try {
			State = 492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 490; integralType();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 491; floatingPointType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegralTypeContext : ParserRuleContext {
		public ITerminalNode BYTE() { return GetToken(Java8Parser.BYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(Java8Parser.SHORT, 0); }
		public ITerminalNode INT() { return GetToken(Java8Parser.INT, 0); }
		public ITerminalNode LONG() { return GetToken(Java8Parser.LONG, 0); }
		public ITerminalNode CHAR() { return GetToken(Java8Parser.CHAR, 0); }
		public IntegralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integralType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterIntegralType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitIntegralType(this);
		}
	}

	[RuleVersion(0)]
	public IntegralTypeContext integralType() {
		IntegralTypeContext _localctx = new IntegralTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_integralType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingPointTypeContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(Java8Parser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(Java8Parser.DOUBLE, 0); }
		public FloatingPointTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingPointType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterFloatingPointType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitFloatingPointType(this);
		}
	}

	[RuleVersion(0)]
	public FloatingPointTypeContext floatingPointType() {
		FloatingPointTypeContext _localctx = new FloatingPointTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_floatingPointType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			_la = TokenStream.LA(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_referenceType);
		try {
			State = 501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 498; classOrInterfaceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 499; typeVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 500; arrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
			return GetRuleContext<ClassType_lfno_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lfno_classOrInterfaceTypeContext interfaceType_lfno_classOrInterfaceType() {
			return GetRuleContext<InterfaceType_lfno_classOrInterfaceTypeContext>(0);
		}
		public ClassType_lf_classOrInterfaceTypeContext[] classType_lf_classOrInterfaceType() {
			return GetRuleContexts<ClassType_lf_classOrInterfaceTypeContext>();
		}
		public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType(int i) {
			return GetRuleContext<ClassType_lf_classOrInterfaceTypeContext>(i);
		}
		public InterfaceType_lf_classOrInterfaceTypeContext[] interfaceType_lf_classOrInterfaceType() {
			return GetRuleContexts<InterfaceType_lf_classOrInterfaceTypeContext>();
		}
		public InterfaceType_lf_classOrInterfaceTypeContext interfaceType_lf_classOrInterfaceType(int i) {
			return GetRuleContext<InterfaceType_lf_classOrInterfaceTypeContext>(i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_classOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 503; classType_lfno_classOrInterfaceType();
				}
				break;
			case 2:
				{
				State = 504; interfaceType_lfno_classOrInterfaceType();
				}
				break;
			}
			State = 511;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 509;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 507; classType_lf_classOrInterfaceType();
						}
						break;
					case 2:
						{
						State = 508; interfaceType_lf_classOrInterfaceType();
						}
						break;
					}
					} 
				}
				State = 513;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_classType);
		int _la;
		try {
			State = 536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 514; annotation();
					}
					}
					State = 519;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 520; Match(Identifier);
				State = 522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 521; typeArguments();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524; classOrInterfaceType();
				State = 525; Match(DOT);
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 526; annotation();
					}
					}
					State = 531;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 532; Match(Identifier);
				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 533; typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassType_lf_classOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassType_lf_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType_lf_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterClassType_lf_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitClassType_lf_classOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType() {
		ClassType_lf_classOrInterfaceTypeContext _localctx = new ClassType_lf_classOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_classType_lf_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; Match(DOT);
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 539; annotation();
				}
				}
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 545; Match(Identifier);
			State = 547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 546; typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassType_lfno_classOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassType_lfno_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType_lfno_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterClassType_lfno_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitClassType_lfno_classOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
		ClassType_lfno_classOrInterfaceTypeContext _localctx = new ClassType_lfno_classOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_classType_lfno_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 549; annotation();
				}
				}
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 555; Match(Identifier);
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 556; typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public InterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeContext interfaceType() {
		InterfaceTypeContext _localctx = new InterfaceTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_interfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559; classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceType_lf_classOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType() {
			return GetRuleContext<ClassType_lf_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lf_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType_lf_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceType_lf_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceType_lf_classOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceType_lf_classOrInterfaceTypeContext interfaceType_lf_classOrInterfaceType() {
		InterfaceType_lf_classOrInterfaceTypeContext _localctx = new InterfaceType_lf_classOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_interfaceType_lf_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; classType_lf_classOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceType_lfno_classOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
			return GetRuleContext<ClassType_lfno_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lfno_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType_lfno_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceType_lfno_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceType_lfno_classOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceType_lfno_classOrInterfaceTypeContext interfaceType_lfno_classOrInterfaceType() {
		InterfaceType_lfno_classOrInterfaceTypeContext _localctx = new InterfaceType_lfno_classOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_interfaceType_lfno_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563; classType_lfno_classOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeVariable(this);
		}
	}

	[RuleVersion(0)]
	public TypeVariableContext typeVariable() {
		TypeVariableContext _localctx = new TypeVariableContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 565; annotation();
				}
				}
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 571; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_arrayType);
		try {
			State = 582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 573; primitiveType();
				State = 574; dims();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 576; classOrInterfaceType();
				State = 577; dims();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 579; typeVariable();
				State = 580; dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimsContext : ParserRuleContext {
		public ITerminalNode[] LBRACK() { return GetTokens(Java8Parser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(Java8Parser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(Java8Parser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(Java8Parser.RBRACK, i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dims; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterDims(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitDims(this);
		}
	}

	[RuleVersion(0)]
	public DimsContext dims() {
		DimsContext _localctx = new DimsContext(Context, State);
		EnterRule(_localctx, 30, RULE_dims);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 584; annotation();
				}
				}
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 590; Match(LBRACK);
			State = 591; Match(RBRACK);
			State = 602;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 595;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AT) {
						{
						{
						State = 592; annotation();
						}
						}
						State = 597;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 598; Match(LBRACK);
					State = 599; Match(RBRACK);
					}
					} 
				}
				State = 604;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeParameterModifierContext[] typeParameterModifier() {
			return GetRuleContexts<TypeParameterModifierContext>();
		}
		public TypeParameterModifierContext typeParameterModifier(int i) {
			return GetRuleContext<TypeParameterModifierContext>(i);
		}
		public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 605; typeParameterModifier();
				}
				}
				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 611; Match(Identifier);
			State = 613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 612; typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public TypeParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterModifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterModifierContext typeParameterModifier() {
		TypeParameterModifierContext _localctx = new TypeParameterModifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeParameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		public ITerminalNode EXTENDS() { return GetToken(Java8Parser.EXTENDS, 0); }
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeBound);
		int _la;
		try {
			State = 627;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 617; Match(EXTENDS);
				State = 618; typeVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 619; Match(EXTENDS);
				State = 620; classOrInterfaceType();
				State = 624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 621; additionalBound();
					}
					}
					State = 626;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionalBoundContext : ParserRuleContext {
		public ITerminalNode BITAND() { return GetToken(Java8Parser.BITAND, 0); }
		public InterfaceTypeContext interfaceType() {
			return GetRuleContext<InterfaceTypeContext>(0);
		}
		public AdditionalBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionalBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAdditionalBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAdditionalBound(this);
		}
	}

	[RuleVersion(0)]
	public AdditionalBoundContext additionalBound() {
		AdditionalBoundContext _localctx = new AdditionalBoundContext(Context, State);
		EnterRule(_localctx, 38, RULE_additionalBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629; Match(BITAND);
			State = 630; interfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(Java8Parser.LT, 0); }
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public ITerminalNode GT() { return GetToken(Java8Parser.GT, 0); }
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632; Match(LT);
			State = 633; typeArgumentList();
			State = 634; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636; typeArgument();
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 637; Match(COMMA);
				State = 638; typeArgument();
				}
				}
				State = 643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public WildcardContext wildcard() {
			return GetRuleContext<WildcardContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 44, RULE_typeArgument);
		try {
			State = 646;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 644; referenceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 645; wildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardContext : ParserRuleContext {
		public ITerminalNode QUESTION() { return GetToken(Java8Parser.QUESTION, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public WildcardBoundsContext wildcardBounds() {
			return GetRuleContext<WildcardBoundsContext>(0);
		}
		public WildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterWildcard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitWildcard(this);
		}
	}

	[RuleVersion(0)]
	public WildcardContext wildcard() {
		WildcardContext _localctx = new WildcardContext(Context, State);
		EnterRule(_localctx, 46, RULE_wildcard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 648; annotation();
				}
				}
				State = 653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 654; Match(QUESTION);
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS || _la==SUPER) {
				{
				State = 655; wildcardBounds();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardBoundsContext : ParserRuleContext {
		public ITerminalNode EXTENDS() { return GetToken(Java8Parser.EXTENDS, 0); }
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ITerminalNode SUPER() { return GetToken(Java8Parser.SUPER, 0); }
		public WildcardBoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcardBounds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterWildcardBounds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitWildcardBounds(this);
		}
	}

	[RuleVersion(0)]
	public WildcardBoundsContext wildcardBounds() {
		WildcardBoundsContext _localctx = new WildcardBoundsContext(Context, State);
		EnterRule(_localctx, 48, RULE_wildcardBounds);
		try {
			State = 662;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTENDS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 658; Match(EXTENDS);
				State = 659; referenceType();
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 660; Match(SUPER);
				State = 661; referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public PackageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPackageName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPackageName(this);
		}
	}

	[RuleVersion(0)]
	public PackageNameContext packageName() {
		return packageName(0);
	}

	private PackageNameContext packageName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PackageNameContext _localctx = new PackageNameContext(Context, _parentState);
		PackageNameContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_packageName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 665; Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 672;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PackageNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_packageName);
					State = 667;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 668; Match(DOT);
					State = 669; Match(Identifier);
					}
					} 
				}
				State = 674;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_typeName);
		try {
			State = 680;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 675; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 676; packageOrTypeName(0);
				State = 677; Match(DOT);
				State = 678; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageOrTypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public PackageOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageOrTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPackageOrTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPackageOrTypeName(this);
		}
	}

	[RuleVersion(0)]
	public PackageOrTypeNameContext packageOrTypeName() {
		return packageOrTypeName(0);
	}

	private PackageOrTypeNameContext packageOrTypeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PackageOrTypeNameContext _localctx = new PackageOrTypeNameContext(Context, _parentState);
		PackageOrTypeNameContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_packageOrTypeName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 683; Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 690;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PackageOrTypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_packageOrTypeName);
					State = 685;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 686; Match(DOT);
					State = 687; Match(Identifier);
					}
					} 
				}
				State = 692;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ExpressionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterExpressionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitExpressionName(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionNameContext expressionName() {
		ExpressionNameContext _localctx = new ExpressionNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_expressionName);
		try {
			State = 698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 693; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 694; ambiguousName(0);
				State = 695; Match(DOT);
				State = 696; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public AmbiguousNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAmbiguousName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAmbiguousName(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousNameContext ambiguousName() {
		return ambiguousName(0);
	}

	private AmbiguousNameContext ambiguousName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AmbiguousNameContext _localctx = new AmbiguousNameContext(Context, _parentState);
		AmbiguousNameContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_ambiguousName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 703; Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 710;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AmbiguousNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_ambiguousName);
					State = 705;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 706; Match(DOT);
					State = 707; Match(Identifier);
					}
					} 
				}
				State = 712;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Java8Parser.Eof, 0); }
		public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 62, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 713; packageDeclaration();
				}
				break;
			}
			State = 719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 716; importDeclaration();
				}
				}
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << FINAL) | (1L << INTERFACE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP) | (1L << SEMI))) != 0) || _la==AT) {
				{
				{
				State = 722; typeDeclaration();
				}
				}
				State = 727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 728; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		public ITerminalNode PACKAGE() { return GetToken(Java8Parser.PACKAGE, 0); }
		public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public PackageModifierContext[] packageModifier() {
			return GetRuleContexts<PackageModifierContext>();
		}
		public PackageModifierContext packageModifier(int i) {
			return GetRuleContext<PackageModifierContext>(i);
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_packageDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 730; packageModifier();
				}
				}
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 736; Match(PACKAGE);
			State = 737; packageName(0);
			State = 738; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public PackageModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPackageModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPackageModifier(this);
		}
	}

	[RuleVersion(0)]
	public PackageModifierContext packageModifier() {
		PackageModifierContext _localctx = new PackageModifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_packageModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
			return GetRuleContext<SingleTypeImportDeclarationContext>(0);
		}
		public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
			return GetRuleContext<TypeImportOnDemandDeclarationContext>(0);
		}
		public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
			return GetRuleContext<SingleStaticImportDeclarationContext>(0);
		}
		public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
			return GetRuleContext<StaticImportOnDemandDeclarationContext>(0);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_importDeclaration);
		try {
			State = 746;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 742; singleTypeImportDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 743; typeImportOnDemandDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 744; singleStaticImportDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 745; staticImportOnDemandDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTypeImportDeclarationContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(Java8Parser.IMPORT, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public SingleTypeImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTypeImportDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterSingleTypeImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitSingleTypeImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
		SingleTypeImportDeclarationContext _localctx = new SingleTypeImportDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_singleTypeImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748; Match(IMPORT);
			State = 749; typeName();
			State = 750; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeImportOnDemandDeclarationContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(Java8Parser.IMPORT, 0); }
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ITerminalNode MUL() { return GetToken(Java8Parser.MUL, 0); }
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public TypeImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeImportOnDemandDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeImportOnDemandDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeImportOnDemandDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
		TypeImportOnDemandDeclarationContext _localctx = new TypeImportOnDemandDeclarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_typeImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 752; Match(IMPORT);
			State = 753; packageOrTypeName(0);
			State = 754; Match(DOT);
			State = 755; Match(MUL);
			State = 756; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStaticImportDeclarationContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(Java8Parser.IMPORT, 0); }
		public ITerminalNode STATIC() { return GetToken(Java8Parser.STATIC, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public SingleStaticImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStaticImportDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterSingleStaticImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitSingleStaticImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
		SingleStaticImportDeclarationContext _localctx = new SingleStaticImportDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_singleStaticImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758; Match(IMPORT);
			State = 759; Match(STATIC);
			State = 760; typeName();
			State = 761; Match(DOT);
			State = 762; Match(Identifier);
			State = 763; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticImportOnDemandDeclarationContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(Java8Parser.IMPORT, 0); }
		public ITerminalNode STATIC() { return GetToken(Java8Parser.STATIC, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ITerminalNode MUL() { return GetToken(Java8Parser.MUL, 0); }
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public StaticImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticImportOnDemandDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterStaticImportOnDemandDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitStaticImportOnDemandDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
		StaticImportOnDemandDeclarationContext _localctx = new StaticImportOnDemandDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_staticImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765; Match(IMPORT);
			State = 766; Match(STATIC);
			State = 767; typeName();
			State = 768; Match(DOT);
			State = 769; Match(MUL);
			State = 770; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeDeclaration);
		try {
			State = 775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 772; classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 773; interfaceDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 774; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public NormalClassDeclarationContext normalClassDeclaration() {
			return GetRuleContext<NormalClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_classDeclaration);
		try {
			State = 779;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 777; normalClassDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 778; enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalClassDeclarationContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(Java8Parser.CLASS, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public SuperclassContext superclass() {
			return GetRuleContext<SuperclassContext>(0);
		}
		public SuperinterfacesContext superinterfaces() {
			return GetRuleContext<SuperinterfacesContext>(0);
		}
		public NormalClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalClassDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterNormalClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitNormalClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NormalClassDeclarationContext normalClassDeclaration() {
		NormalClassDeclarationContext _localctx = new NormalClassDeclarationContext(Context, State);
		EnterRule(_localctx, 82, RULE_normalClassDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 781; classModifier();
				}
				}
				State = 786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 787; Match(CLASS);
			State = 788; Match(Identifier);
			State = 790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 789; typeParameters();
				}
			}

			State = 793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 792; superclass();
				}
			}

			State = 796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 795; superinterfaces();
				}
			}

			State = 798; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(Java8Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(Java8Parser.PROTECTED, 0); }
		public ITerminalNode PRIVATE() { return GetToken(Java8Parser.PRIVATE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(Java8Parser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(Java8Parser.STATIC, 0); }
		public ITerminalNode FINAL() { return GetToken(Java8Parser.FINAL, 0); }
		public ITerminalNode STRICTFP() { return GetToken(Java8Parser.STRICTFP, 0); }
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(Context, State);
		EnterRule(_localctx, 84, RULE_classModifier);
		try {
			State = 808;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 800; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 801; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 802; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 803; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 804; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 805; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 806; Match(FINAL);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 807; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(Java8Parser.LT, 0); }
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public ITerminalNode GT() { return GetToken(Java8Parser.GT, 0); }
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810; Match(LT);
			State = 811; typeParameterList();
			State = 812; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814; typeParameter();
			State = 819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 815; Match(COMMA);
				State = 816; typeParameter();
				}
				}
				State = 821;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperclassContext : ParserRuleContext {
		public ITerminalNode EXTENDS() { return GetToken(Java8Parser.EXTENDS, 0); }
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public SuperclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterSuperclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitSuperclass(this);
		}
	}

	[RuleVersion(0)]
	public SuperclassContext superclass() {
		SuperclassContext _localctx = new SuperclassContext(Context, State);
		EnterRule(_localctx, 90, RULE_superclass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822; Match(EXTENDS);
			State = 823; classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperinterfacesContext : ParserRuleContext {
		public ITerminalNode IMPLEMENTS() { return GetToken(Java8Parser.IMPLEMENTS, 0); }
		public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public SuperinterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superinterfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterSuperinterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitSuperinterfaces(this);
		}
	}

	[RuleVersion(0)]
	public SuperinterfacesContext superinterfaces() {
		SuperinterfacesContext _localctx = new SuperinterfacesContext(Context, State);
		EnterRule(_localctx, 92, RULE_superinterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825; Match(IMPLEMENTS);
			State = 826; interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeListContext : ParserRuleContext {
		public InterfaceTypeContext[] interfaceType() {
			return GetRuleContexts<InterfaceTypeContext>();
		}
		public InterfaceTypeContext interfaceType(int i) {
			return GetRuleContext<InterfaceTypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public InterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceTypeList(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeListContext interfaceTypeList() {
		InterfaceTypeListContext _localctx = new InterfaceTypeListContext(Context, State);
		EnterRule(_localctx, 94, RULE_interfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 828; interfaceType();
			State = 833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 829; Match(COMMA);
				State = 830; interfaceType();
				}
				}
				State = 835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(Java8Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Java8Parser.RBRACE, 0); }
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 96, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836; Match(LBRACE);
			State = 840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 837; classBodyDeclaration();
				}
				}
				State = 842;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 843; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public ClassMemberDeclarationContext classMemberDeclaration() {
			return GetRuleContext<ClassMemberDeclarationContext>(0);
		}
		public InstanceInitializerContext instanceInitializer() {
			return GetRuleContext<InstanceInitializerContext>(0);
		}
		public StaticInitializerContext staticInitializer() {
			return GetRuleContext<StaticInitializerContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 98, RULE_classBodyDeclaration);
		try {
			State = 849;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 845; classMemberDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 846; instanceInitializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 847; staticInitializer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 848; constructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 100, RULE_classMemberDeclaration);
		try {
			State = 856;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 851; fieldDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 852; methodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 853; classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 854; interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 855; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public FieldModifierContext[] fieldModifier() {
			return GetRuleContexts<FieldModifierContext>();
		}
		public FieldModifierContext fieldModifier(int i) {
			return GetRuleContext<FieldModifierContext>(i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 102, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << TRANSIENT) | (1L << VOLATILE))) != 0) || _la==AT) {
				{
				{
				State = 858; fieldModifier();
				}
				}
				State = 863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 864; unannType();
			State = 865; variableDeclaratorList();
			State = 866; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(Java8Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(Java8Parser.PROTECTED, 0); }
		public ITerminalNode PRIVATE() { return GetToken(Java8Parser.PRIVATE, 0); }
		public ITerminalNode STATIC() { return GetToken(Java8Parser.STATIC, 0); }
		public ITerminalNode FINAL() { return GetToken(Java8Parser.FINAL, 0); }
		public ITerminalNode TRANSIENT() { return GetToken(Java8Parser.TRANSIENT, 0); }
		public ITerminalNode VOLATILE() { return GetToken(Java8Parser.VOLATILE, 0); }
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterFieldModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitFieldModifier(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(Context, State);
		EnterRule(_localctx, 104, RULE_fieldModifier);
		try {
			State = 876;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 868; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 869; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 870; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 871; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 872; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 873; Match(FINAL);
				}
				break;
			case TRANSIENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 874; Match(TRANSIENT);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 875; Match(VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorListContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public VariableDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorList(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorListContext variableDeclaratorList() {
		VariableDeclaratorListContext _localctx = new VariableDeclaratorListContext(Context, State);
		EnterRule(_localctx, 106, RULE_variableDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878; variableDeclarator();
			State = 883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 879; Match(COMMA);
				State = 880; variableDeclarator();
				}
				}
				State = 885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(Java8Parser.ASSIGN, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 108, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886; variableDeclaratorId();
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 887; Match(ASSIGN);
				State = 888; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 110, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 891; Match(Identifier);
			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 892; dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 112, RULE_variableInitializer);
		try {
			State = 897;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 895; expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 896; arrayInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeContext : ParserRuleContext {
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public UnannReferenceTypeContext unannReferenceType() {
			return GetRuleContext<UnannReferenceTypeContext>(0);
		}
		public UnannTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnannType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnannType(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeContext unannType() {
		UnannTypeContext _localctx = new UnannTypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_unannType);
		try {
			State = 901;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 899; unannPrimitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 900; unannReferenceType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannPrimitiveTypeContext : ParserRuleContext {
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public ITerminalNode BOOLEAN() { return GetToken(Java8Parser.BOOLEAN, 0); }
		public UnannPrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannPrimitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnannPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnannPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public UnannPrimitiveTypeContext unannPrimitiveType() {
		UnannPrimitiveTypeContext _localctx = new UnannPrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 116, RULE_unannPrimitiveType);
		try {
			State = 905;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 903; numericType();
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 904; Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannReferenceTypeContext : ParserRuleContext {
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		public UnannArrayTypeContext unannArrayType() {
			return GetRuleContext<UnannArrayTypeContext>(0);
		}
		public UnannReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannReferenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnannReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnannReferenceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannReferenceTypeContext unannReferenceType() {
		UnannReferenceTypeContext _localctx = new UnannReferenceTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_unannReferenceType);
		try {
			State = 910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 907; unannClassOrInterfaceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 908; unannTypeVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 909; unannArrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext unannInterfaceType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext[] unannClassType_lf_unannClassOrInterfaceType() {
			return GetRuleContexts<UnannClassType_lf_unannClassOrInterfaceTypeContext>();
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType(int i) {
			return GetRuleContext<UnannClassType_lf_unannClassOrInterfaceTypeContext>(i);
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext[] unannInterfaceType_lf_unannClassOrInterfaceType() {
			return GetRuleContexts<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>();
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext unannInterfaceType_lf_unannClassOrInterfaceType(int i) {
			return GetRuleContext<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>(i);
		}
		public UnannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnannClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
		UnannClassOrInterfaceTypeContext _localctx = new UnannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_unannClassOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 912; unannClassType_lfno_unannClassOrInterfaceType();
				}
				break;
			case 2:
				{
				State = 913; unannInterfaceType_lfno_unannClassOrInterfaceType();
				}
				break;
			}
			State = 920;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 918;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						State = 916; unannClassType_lf_unannClassOrInterfaceType();
						}
						break;
					case 2:
						{
						State = 917; unannInterfaceType_lf_unannClassOrInterfaceType();
						}
						break;
					}
					} 
				}
				State = 922;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public UnannClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnannClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnannClassType(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassTypeContext unannClassType() {
		UnannClassTypeContext _localctx = new UnannClassTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_unannClassType);
		int _la;
		try {
			State = 939;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 923; Match(Identifier);
				State = 925;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 924; typeArguments();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 927; unannClassOrInterfaceType();
				State = 928; Match(DOT);
				State = 932;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 929; annotation();
					}
					}
					State = 934;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 935; Match(Identifier);
				State = 937;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 936; typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassType_lf_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType_lf_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnannClassType_lf_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnannClassType_lf_unannClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType() {
		UnannClassType_lf_unannClassOrInterfaceTypeContext _localctx = new UnannClassType_lf_unannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_unannClassType_lf_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941; Match(DOT);
			State = 945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 942; annotation();
				}
				}
				State = 947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 948; Match(Identifier);
			State = 950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 949; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassType_lfno_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType_lfno_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
		UnannClassType_lfno_unannClassOrInterfaceTypeContext _localctx = new UnannClassType_lfno_unannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_unannClassType_lfno_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952; Match(Identifier);
			State = 954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 953; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceTypeContext : ParserRuleContext {
		public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		public UnannInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceTypeContext unannInterfaceType() {
		UnannInterfaceTypeContext _localctx = new UnannInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_unannInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956; unannClassType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceType_lf_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lf_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType_lf_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext unannInterfaceType_lf_unannClassOrInterfaceType() {
		UnannInterfaceType_lf_unannClassOrInterfaceTypeContext _localctx = new UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 130, RULE_unannInterfaceType_lf_unannClassOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 958; unannClassType_lf_unannClassOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType_lfno_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext unannInterfaceType_lfno_unannClassOrInterfaceType() {
		UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext _localctx = new UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 132, RULE_unannInterfaceType_lfno_unannClassOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 960; unannClassType_lfno_unannClassOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public UnannTypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannTypeVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnannTypeVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnannTypeVariable(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeVariableContext unannTypeVariable() {
		UnannTypeVariableContext _localctx = new UnannTypeVariableContext(Context, State);
		EnterRule(_localctx, 134, RULE_unannTypeVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannArrayTypeContext : ParserRuleContext {
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		public UnannArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnannArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnannArrayType(this);
		}
	}

	[RuleVersion(0)]
	public UnannArrayTypeContext unannArrayType() {
		UnannArrayTypeContext _localctx = new UnannArrayTypeContext(Context, State);
		EnterRule(_localctx, 136, RULE_unannArrayType);
		try {
			State = 973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 964; unannPrimitiveType();
				State = 965; dims();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 967; unannClassOrInterfaceType();
				State = 968; dims();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 970; unannTypeVariable();
				State = 971; dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public MethodModifierContext[] methodModifier() {
			return GetRuleContexts<MethodModifierContext>();
		}
		public MethodModifierContext methodModifier(int i) {
			return GetRuleContext<MethodModifierContext>(i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 138, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED))) != 0) || _la==AT) {
				{
				{
				State = 975; methodModifier();
				}
				}
				State = 980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 981; methodHeader();
			State = 982; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(Java8Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(Java8Parser.PROTECTED, 0); }
		public ITerminalNode PRIVATE() { return GetToken(Java8Parser.PRIVATE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(Java8Parser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(Java8Parser.STATIC, 0); }
		public ITerminalNode FINAL() { return GetToken(Java8Parser.FINAL, 0); }
		public ITerminalNode SYNCHRONIZED() { return GetToken(Java8Parser.SYNCHRONIZED, 0); }
		public ITerminalNode NATIVE() { return GetToken(Java8Parser.NATIVE, 0); }
		public ITerminalNode STRICTFP() { return GetToken(Java8Parser.STRICTFP, 0); }
		public MethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMethodModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMethodModifier(this);
		}
	}

	[RuleVersion(0)]
	public MethodModifierContext methodModifier() {
		MethodModifierContext _localctx = new MethodModifierContext(Context, State);
		EnterRule(_localctx, 140, RULE_methodModifier);
		try {
			State = 994;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 984; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 985; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 986; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 987; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 988; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 989; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 990; Match(FINAL);
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 991; Match(SYNCHRONIZED);
				}
				break;
			case NATIVE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 992; Match(NATIVE);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 10);
				{
				State = 993; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodHeaderContext : ParserRuleContext {
		public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public MethodDeclaratorContext methodDeclarator() {
			return GetRuleContext<MethodDeclaratorContext>(0);
		}
		public Throws_Context throws_() {
			return GetRuleContext<Throws_Context>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public MethodHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMethodHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMethodHeader(this);
		}
	}

	[RuleVersion(0)]
	public MethodHeaderContext methodHeader() {
		MethodHeaderContext _localctx = new MethodHeaderContext(Context, State);
		EnterRule(_localctx, 142, RULE_methodHeader);
		int _la;
		try {
			State = 1013;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 996; result();
				State = 997; methodDeclarator();
				State = 999;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THROWS) {
					{
					State = 998; throws_();
					}
				}

				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1001; typeParameters();
				State = 1005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 1002; annotation();
					}
					}
					State = 1007;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1008; result();
				State = 1009; methodDeclarator();
				State = 1011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THROWS) {
					{
					State = 1010; throws_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(Java8Parser.VOID, 0); }
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterResult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitResult(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 144, RULE_result);
		try {
			State = 1017;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1015; unannType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1016; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public MethodDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclaratorContext methodDeclarator() {
		MethodDeclaratorContext _localctx = new MethodDeclaratorContext(Context, State);
		EnterRule(_localctx, 146, RULE_methodDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1019; Match(Identifier);
			State = 1020; Match(LPAREN);
			State = 1022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
				{
				State = 1021; formalParameterList();
				}
			}

			State = 1024; Match(RPAREN);
			State = 1026;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1025; dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public ReceiverParameterContext receiverParameter() {
			return GetRuleContext<ReceiverParameterContext>(0);
		}
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(Java8Parser.COMMA, 0); }
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 148, RULE_formalParameterList);
		try {
			State = 1034;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1028; receiverParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1029; formalParameters();
				State = 1030; Match(COMMA);
				State = 1031; lastFormalParameter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1033; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public ReceiverParameterContext receiverParameter() {
			return GetRuleContext<ReceiverParameterContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 150, RULE_formalParameters);
		try {
			int _alt;
			State = 1052;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1036; formalParameter();
				State = 1041;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1037; Match(COMMA);
						State = 1038; formalParameter();
						}
						} 
					}
					State = 1043;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1044; receiverParameter();
				State = 1049;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1045; Match(COMMA);
						State = 1046; formalParameter();
						}
						} 
					}
					State = 1051;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 152, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1057;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1054; variableModifier();
				}
				}
				State = 1059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1060; unannType();
			State = 1061; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode FINAL() { return GetToken(Java8Parser.FINAL, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 154, RULE_variableModifier);
		try {
			State = 1065;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1063; annotation();
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1064; Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public ITerminalNode ELLIPSIS() { return GetToken(Java8Parser.ELLIPSIS, 0); }
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public FormalParameterContext formalParameter() {
			return GetRuleContext<FormalParameterContext>(0);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(Context, State);
		EnterRule(_localctx, 156, RULE_lastFormalParameter);
		int _la;
		try {
			State = 1084;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1070;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FINAL || _la==AT) {
					{
					{
					State = 1067; variableModifier();
					}
					}
					State = 1072;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1073; unannType();
				State = 1077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 1074; annotation();
					}
					}
					State = 1079;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1080; Match(ELLIPSIS);
				State = 1081; variableDeclaratorId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1083; formalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(Java8Parser.THIS, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ReceiverParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterReceiverParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitReceiverParameter(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverParameterContext receiverParameter() {
		ReceiverParameterContext _localctx = new ReceiverParameterContext(Context, State);
		EnterRule(_localctx, 158, RULE_receiverParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1089;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1086; annotation();
				}
				}
				State = 1091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1092; unannType();
			State = 1095;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1093; Match(Identifier);
				State = 1094; Match(DOT);
				}
			}

			State = 1097; Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throws_Context : ParserRuleContext {
		public ITerminalNode THROWS() { return GetToken(Java8Parser.THROWS, 0); }
		public ExceptionTypeListContext exceptionTypeList() {
			return GetRuleContext<ExceptionTypeListContext>(0);
		}
		public Throws_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throws_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterThrows_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitThrows_(this);
		}
	}

	[RuleVersion(0)]
	public Throws_Context throws_() {
		Throws_Context _localctx = new Throws_Context(Context, State);
		EnterRule(_localctx, 160, RULE_throws_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099; Match(THROWS);
			State = 1100; exceptionTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeListContext : ParserRuleContext {
		public ExceptionTypeContext[] exceptionType() {
			return GetRuleContexts<ExceptionTypeContext>();
		}
		public ExceptionTypeContext exceptionType(int i) {
			return GetRuleContext<ExceptionTypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public ExceptionTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterExceptionTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitExceptionTypeList(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeListContext exceptionTypeList() {
		ExceptionTypeListContext _localctx = new ExceptionTypeListContext(Context, State);
		EnterRule(_localctx, 162, RULE_exceptionTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102; exceptionType();
			State = 1107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1103; Match(COMMA);
				State = 1104; exceptionType();
				}
				}
				State = 1109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ExceptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterExceptionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitExceptionType(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeContext exceptionType() {
		ExceptionTypeContext _localctx = new ExceptionTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_exceptionType);
		try {
			State = 1112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1110; classType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1111; typeVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 166, RULE_methodBody);
		try {
			State = 1116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1114; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1115; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceInitializerContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public InstanceInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInstanceInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInstanceInitializer(this);
		}
	}

	[RuleVersion(0)]
	public InstanceInitializerContext instanceInitializer() {
		InstanceInitializerContext _localctx = new InstanceInitializerContext(Context, State);
		EnterRule(_localctx, 168, RULE_instanceInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1118; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticInitializerContext : ParserRuleContext {
		public ITerminalNode STATIC() { return GetToken(Java8Parser.STATIC, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StaticInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterStaticInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitStaticInitializer(this);
		}
	}

	[RuleVersion(0)]
	public StaticInitializerContext staticInitializer() {
		StaticInitializerContext _localctx = new StaticInitializerContext(Context, State);
		EnterRule(_localctx, 170, RULE_staticInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120; Match(STATIC);
			State = 1121; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public ConstructorDeclaratorContext constructorDeclarator() {
			return GetRuleContext<ConstructorDeclaratorContext>(0);
		}
		public ConstructorBodyContext constructorBody() {
			return GetRuleContext<ConstructorBodyContext>(0);
		}
		public ConstructorModifierContext[] constructorModifier() {
			return GetRuleContexts<ConstructorModifierContext>();
		}
		public ConstructorModifierContext constructorModifier(int i) {
			return GetRuleContext<ConstructorModifierContext>(i);
		}
		public Throws_Context throws_() {
			return GetRuleContext<Throws_Context>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 172, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==AT) {
				{
				{
				State = 1123; constructorModifier();
				}
				}
				State = 1128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1129; constructorDeclarator();
			State = 1131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 1130; throws_();
				}
			}

			State = 1133; constructorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(Java8Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(Java8Parser.PROTECTED, 0); }
		public ITerminalNode PRIVATE() { return GetToken(Java8Parser.PRIVATE, 0); }
		public ConstructorModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterConstructorModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitConstructorModifier(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifierContext constructorModifier() {
		ConstructorModifierContext _localctx = new ConstructorModifierContext(Context, State);
		EnterRule(_localctx, 174, RULE_constructorModifier);
		try {
			State = 1139;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1135; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1136; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1137; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1138; Match(PRIVATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclaratorContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ConstructorDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclaratorContext constructorDeclarator() {
		ConstructorDeclaratorContext _localctx = new ConstructorDeclaratorContext(Context, State);
		EnterRule(_localctx, 176, RULE_constructorDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1141; typeParameters();
				}
			}

			State = 1144; simpleTypeName();
			State = 1145; Match(LPAREN);
			State = 1147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
				{
				State = 1146; formalParameterList();
				}
			}

			State = 1149; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterSimpleTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitSimpleTypeName(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(Context, State);
		EnterRule(_localctx, 178, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1151; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorBodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(Java8Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Java8Parser.RBRACE, 0); }
		public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
			return GetRuleContext<ExplicitConstructorInvocationContext>(0);
		}
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public ConstructorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterConstructorBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitConstructorBody(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorBodyContext constructorBody() {
		ConstructorBodyContext _localctx = new ConstructorBodyContext(Context, State);
		EnterRule(_localctx, 180, RULE_constructorBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1153; Match(LBRACE);
			State = 1155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 1154; explicitConstructorInvocation();
				}
				break;
			}
			State = 1158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1157; blockStatements();
				}
			}

			State = 1160; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitConstructorInvocationContext : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(Java8Parser.THIS, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode SUPER() { return GetToken(Java8Parser.SUPER, 0); }
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExplicitConstructorInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitConstructorInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterExplicitConstructorInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitExplicitConstructorInvocation(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
		ExplicitConstructorInvocationContext _localctx = new ExplicitConstructorInvocationContext(Context, State);
		EnterRule(_localctx, 182, RULE_explicitConstructorInvocation);
		int _la;
		try {
			State = 1208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1162; typeArguments();
					}
				}

				State = 1165; Match(THIS);
				State = 1166; Match(LPAREN);
				State = 1168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1167; argumentList();
					}
				}

				State = 1170; Match(RPAREN);
				State = 1171; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1172; typeArguments();
					}
				}

				State = 1175; Match(SUPER);
				State = 1176; Match(LPAREN);
				State = 1178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1177; argumentList();
					}
				}

				State = 1180; Match(RPAREN);
				State = 1181; Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1182; expressionName();
				State = 1183; Match(DOT);
				State = 1185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1184; typeArguments();
					}
				}

				State = 1187; Match(SUPER);
				State = 1188; Match(LPAREN);
				State = 1190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1189; argumentList();
					}
				}

				State = 1192; Match(RPAREN);
				State = 1193; Match(SEMI);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1195; primary();
				State = 1196; Match(DOT);
				State = 1198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1197; typeArguments();
					}
				}

				State = 1200; Match(SUPER);
				State = 1201; Match(LPAREN);
				State = 1203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1202; argumentList();
					}
				}

				State = 1205; Match(RPAREN);
				State = 1206; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(Java8Parser.ENUM, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public SuperinterfacesContext superinterfaces() {
			return GetRuleContext<SuperinterfacesContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 184, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1210; classModifier();
				}
				}
				State = 1215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1216; Match(ENUM);
			State = 1217; Match(Identifier);
			State = 1219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1218; superinterfaces();
				}
			}

			State = 1221; enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(Java8Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Java8Parser.RBRACE, 0); }
		public EnumConstantListContext enumConstantList() {
			return GetRuleContext<EnumConstantListContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(Java8Parser.COMMA, 0); }
		public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 186, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1223; Match(LBRACE);
			State = 1225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier || _la==AT) {
				{
				State = 1224; enumConstantList();
				}
			}

			State = 1228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1227; Match(COMMA);
				}
			}

			State = 1231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 1230; enumBodyDeclarations();
				}
			}

			State = 1233; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantListContext : ParserRuleContext {
		public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public EnumConstantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterEnumConstantList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitEnumConstantList(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantListContext enumConstantList() {
		EnumConstantListContext _localctx = new EnumConstantListContext(Context, State);
		EnterRule(_localctx, 188, RULE_enumConstantList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1235; enumConstant();
			State = 1240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1236; Match(COMMA);
					State = 1237; enumConstant();
					}
					} 
				}
				State = 1242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumConstantModifierContext[] enumConstantModifier() {
			return GetRuleContexts<EnumConstantModifierContext>();
		}
		public EnumConstantModifierContext enumConstantModifier(int i) {
			return GetRuleContext<EnumConstantModifierContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 190, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1243; enumConstantModifier();
				}
				}
				State = 1248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1249; Match(Identifier);
			State = 1255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1250; Match(LPAREN);
				State = 1252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1251; argumentList();
					}
				}

				State = 1254; Match(RPAREN);
				}
			}

			State = 1258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 1257; classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public EnumConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterEnumConstantModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitEnumConstantModifier(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantModifierContext enumConstantModifier() {
		EnumConstantModifierContext _localctx = new EnumConstantModifierContext(Context, State);
		EnterRule(_localctx, 192, RULE_enumConstantModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1260; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterEnumBodyDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitEnumBodyDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(Context, State);
		EnterRule(_localctx, 194, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1262; Match(SEMI);
			State = 1266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 1263; classBodyDeclaration();
				}
				}
				State = 1268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
			return GetRuleContext<NormalInterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 196, RULE_interfaceDeclaration);
		try {
			State = 1271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1269; normalInterfaceDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1270; annotationTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalInterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(Java8Parser.INTERFACE, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ExtendsInterfacesContext extendsInterfaces() {
			return GetRuleContext<ExtendsInterfacesContext>(0);
		}
		public NormalInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalInterfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterNormalInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitNormalInterfaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
		NormalInterfaceDeclarationContext _localctx = new NormalInterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 198, RULE_normalInterfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1273; interfaceModifier();
				}
				}
				State = 1278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1279; Match(INTERFACE);
			State = 1280; Match(Identifier);
			State = 1282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1281; typeParameters();
				}
			}

			State = 1285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1284; extendsInterfaces();
				}
			}

			State = 1287; interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(Java8Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(Java8Parser.PROTECTED, 0); }
		public ITerminalNode PRIVATE() { return GetToken(Java8Parser.PRIVATE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(Java8Parser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(Java8Parser.STATIC, 0); }
		public ITerminalNode STRICTFP() { return GetToken(Java8Parser.STRICTFP, 0); }
		public InterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceModifier(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceModifierContext interfaceModifier() {
		InterfaceModifierContext _localctx = new InterfaceModifierContext(Context, State);
		EnterRule(_localctx, 200, RULE_interfaceModifier);
		try {
			State = 1296;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1289; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1290; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1291; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1292; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1293; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1294; Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1295; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendsInterfacesContext : ParserRuleContext {
		public ITerminalNode EXTENDS() { return GetToken(Java8Parser.EXTENDS, 0); }
		public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public ExtendsInterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendsInterfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterExtendsInterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitExtendsInterfaces(this);
		}
	}

	[RuleVersion(0)]
	public ExtendsInterfacesContext extendsInterfaces() {
		ExtendsInterfacesContext _localctx = new ExtendsInterfacesContext(Context, State);
		EnterRule(_localctx, 202, RULE_extendsInterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1298; Match(EXTENDS);
			State = 1299; interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(Java8Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Java8Parser.RBRACE, 0); }
		public InterfaceMemberDeclarationContext[] interfaceMemberDeclaration() {
			return GetRuleContexts<InterfaceMemberDeclarationContext>();
		}
		public InterfaceMemberDeclarationContext interfaceMemberDeclaration(int i) {
			return GetRuleContext<InterfaceMemberDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(Context, State);
		EnterRule(_localctx, 204, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301; Match(LBRACE);
			State = 1305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DEFAULT) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << VOID) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 1302; interfaceMemberDeclaration();
				}
				}
				State = 1307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1308; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 206, RULE_interfaceMemberDeclaration);
		try {
			State = 1315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1310; constantDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1311; interfaceMethodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1312; classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1313; interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1314; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public ConstantModifierContext[] constantModifier() {
			return GetRuleContexts<ConstantModifierContext>();
		}
		public ConstantModifierContext constantModifier(int i) {
			return GetRuleContext<ConstantModifierContext>(i);
		}
		public ConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterConstantDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitConstantDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationContext constantDeclaration() {
		ConstantDeclarationContext _localctx = new ConstantDeclarationContext(Context, State);
		EnterRule(_localctx, 208, RULE_constantDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FINAL) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==AT) {
				{
				{
				State = 1317; constantModifier();
				}
				}
				State = 1322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1323; unannType();
			State = 1324; variableDeclaratorList();
			State = 1325; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(Java8Parser.PUBLIC, 0); }
		public ITerminalNode STATIC() { return GetToken(Java8Parser.STATIC, 0); }
		public ITerminalNode FINAL() { return GetToken(Java8Parser.FINAL, 0); }
		public ConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterConstantModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitConstantModifier(this);
		}
	}

	[RuleVersion(0)]
	public ConstantModifierContext constantModifier() {
		ConstantModifierContext _localctx = new ConstantModifierContext(Context, State);
		EnterRule(_localctx, 210, RULE_constantModifier);
		try {
			State = 1331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1327; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1328; Match(PUBLIC);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1329; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1330; Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclarationContext : ParserRuleContext {
		public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
		InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 212, RULE_interfaceMethodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << DEFAULT) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1333; interfaceMethodModifier();
				}
				}
				State = 1338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1339; methodHeader();
			State = 1340; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(Java8Parser.PUBLIC, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(Java8Parser.ABSTRACT, 0); }
		public ITerminalNode DEFAULT() { return GetToken(Java8Parser.DEFAULT, 0); }
		public ITerminalNode STATIC() { return GetToken(Java8Parser.STATIC, 0); }
		public ITerminalNode STRICTFP() { return GetToken(Java8Parser.STRICTFP, 0); }
		public InterfaceMethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodModifier(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodModifierContext interfaceMethodModifier() {
		InterfaceMethodModifierContext _localctx = new InterfaceMethodModifierContext(Context, State);
		EnterRule(_localctx, 214, RULE_interfaceMethodModifier);
		try {
			State = 1348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1342; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1343; Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1344; Match(ABSTRACT);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1345; Match(DEFAULT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1346; Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1347; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(Java8Parser.AT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(Java8Parser.INTERFACE, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 216, RULE_annotationTypeDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1353;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1350; interfaceModifier();
					}
					} 
				}
				State = 1355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			}
			State = 1356; Match(AT);
			State = 1357; Match(INTERFACE);
			State = 1358; Match(Identifier);
			State = 1359; annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(Java8Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Java8Parser.RBRACE, 0); }
		public AnnotationTypeMemberDeclarationContext[] annotationTypeMemberDeclaration() {
			return GetRuleContexts<AnnotationTypeMemberDeclarationContext>();
		}
		public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration(int i) {
			return GetRuleContext<AnnotationTypeMemberDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeBody(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(Context, State);
		EnterRule(_localctx, 218, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1361; Match(LBRACE);
			State = 1365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SEMI))) != 0) || _la==Identifier || _la==AT) {
				{
				{
				State = 1362; annotationTypeMemberDeclaration();
				}
				}
				State = 1367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1368; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeMemberDeclarationContext : ParserRuleContext {
		public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
			return GetRuleContext<AnnotationTypeElementDeclarationContext>(0);
		}
		public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public AnnotationTypeMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration() {
		AnnotationTypeMemberDeclarationContext _localctx = new AnnotationTypeMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 220, RULE_annotationTypeMemberDeclaration);
		try {
			State = 1375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1370; annotationTypeElementDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1371; constantDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1372; classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1373; interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1374; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public AnnotationTypeElementModifierContext[] annotationTypeElementModifier() {
			return GetRuleContexts<AnnotationTypeElementModifierContext>();
		}
		public AnnotationTypeElementModifierContext annotationTypeElementModifier(int i) {
			return GetRuleContext<AnnotationTypeElementModifierContext>(i);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
		AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(Context, State);
		EnterRule(_localctx, 222, RULE_annotationTypeElementDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ABSTRACT || _la==PUBLIC || _la==AT) {
				{
				{
				State = 1377; annotationTypeElementModifier();
				}
				}
				State = 1382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1383; unannType();
			State = 1384; Match(Identifier);
			State = 1385; Match(LPAREN);
			State = 1386; Match(RPAREN);
			State = 1388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1387; dims();
				}
			}

			State = 1391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 1390; defaultValue();
				}
			}

			State = 1393; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(Java8Parser.PUBLIC, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(Java8Parser.ABSTRACT, 0); }
		public AnnotationTypeElementModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementModifier(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementModifierContext annotationTypeElementModifier() {
		AnnotationTypeElementModifierContext _localctx = new AnnotationTypeElementModifierContext(Context, State);
		EnterRule(_localctx, 224, RULE_annotationTypeElementModifier);
		try {
			State = 1398;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1395; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1396; Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1397; Match(ABSTRACT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(Java8Parser.DEFAULT, 0); }
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 226, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1400; Match(DEFAULT);
			State = 1401; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public NormalAnnotationContext normalAnnotation() {
			return GetRuleContext<NormalAnnotationContext>(0);
		}
		public MarkerAnnotationContext markerAnnotation() {
			return GetRuleContext<MarkerAnnotationContext>(0);
		}
		public SingleElementAnnotationContext singleElementAnnotation() {
			return GetRuleContext<SingleElementAnnotationContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 228, RULE_annotation);
		try {
			State = 1406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1403; normalAnnotation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1404; markerAnnotation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1405; singleElementAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalAnnotationContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(Java8Parser.AT, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public ElementValuePairListContext elementValuePairList() {
			return GetRuleContext<ElementValuePairListContext>(0);
		}
		public NormalAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterNormalAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitNormalAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public NormalAnnotationContext normalAnnotation() {
		NormalAnnotationContext _localctx = new NormalAnnotationContext(Context, State);
		EnterRule(_localctx, 230, RULE_normalAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1408; Match(AT);
			State = 1409; typeName();
			State = 1410; Match(LPAREN);
			State = 1412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1411; elementValuePairList();
				}
			}

			State = 1414; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairListContext : ParserRuleContext {
		public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public ElementValuePairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterElementValuePairList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitElementValuePairList(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairListContext elementValuePairList() {
		ElementValuePairListContext _localctx = new ElementValuePairListContext(Context, State);
		EnterRule(_localctx, 232, RULE_elementValuePairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1416; elementValuePair();
			State = 1421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1417; Match(COMMA);
				State = 1418; elementValuePair();
				}
				}
				State = 1423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ITerminalNode ASSIGN() { return GetToken(Java8Parser.ASSIGN, 0); }
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterElementValuePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitElementValuePair(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(Context, State);
		EnterRule(_localctx, 234, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1424; Match(Identifier);
			State = 1425; Match(ASSIGN);
			State = 1426; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterElementValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitElementValue(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(Context, State);
		EnterRule(_localctx, 236, RULE_elementValue);
		try {
			State = 1431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1428; conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1429; elementValueArrayInitializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1430; annotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(Java8Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Java8Parser.RBRACE, 0); }
		public ElementValueListContext elementValueList() {
			return GetRuleContext<ElementValueListContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(Java8Parser.COMMA, 0); }
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterElementValueArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitElementValueArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(Context, State);
		EnterRule(_localctx, 238, RULE_elementValueArrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1433; Match(LBRACE);
			State = 1435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1434; elementValueList();
				}
			}

			State = 1438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1437; Match(COMMA);
				}
			}

			State = 1440; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueListContext : ParserRuleContext {
		public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public ElementValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterElementValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitElementValueList(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueListContext elementValueList() {
		ElementValueListContext _localctx = new ElementValueListContext(Context, State);
		EnterRule(_localctx, 240, RULE_elementValueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1442; elementValue();
			State = 1447;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1443; Match(COMMA);
					State = 1444; elementValue();
					}
					} 
				}
				State = 1449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerAnnotationContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(Java8Parser.AT, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MarkerAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMarkerAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMarkerAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public MarkerAnnotationContext markerAnnotation() {
		MarkerAnnotationContext _localctx = new MarkerAnnotationContext(Context, State);
		EnterRule(_localctx, 242, RULE_markerAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1450; Match(AT);
			State = 1451; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleElementAnnotationContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(Java8Parser.AT, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public SingleElementAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleElementAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterSingleElementAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitSingleElementAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public SingleElementAnnotationContext singleElementAnnotation() {
		SingleElementAnnotationContext _localctx = new SingleElementAnnotationContext(Context, State);
		EnterRule(_localctx, 244, RULE_singleElementAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1453; Match(AT);
			State = 1454; typeName();
			State = 1455; Match(LPAREN);
			State = 1456; elementValue();
			State = 1457; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(Java8Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Java8Parser.RBRACE, 0); }
		public VariableInitializerListContext variableInitializerList() {
			return GetRuleContext<VariableInitializerListContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(Java8Parser.COMMA, 0); }
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 246, RULE_arrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1459; Match(LBRACE);
			State = 1461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1460; variableInitializerList();
				}
			}

			State = 1464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1463; Match(COMMA);
				}
			}

			State = 1466; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerListContext : ParserRuleContext {
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public VariableInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializerList(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerListContext variableInitializerList() {
		VariableInitializerListContext _localctx = new VariableInitializerListContext(Context, State);
		EnterRule(_localctx, 248, RULE_variableInitializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1468; variableInitializer();
			State = 1473;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1469; Match(COMMA);
					State = 1470; variableInitializer();
					}
					} 
				}
				State = 1475;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(Java8Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Java8Parser.RBRACE, 0); }
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 250, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1476; Match(LBRACE);
			State = 1478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1477; blockStatements();
				}
			}

			State = 1480; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementsContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterBlockStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitBlockStatements(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementsContext blockStatements() {
		BlockStatementsContext _localctx = new BlockStatementsContext(Context, State);
		EnterRule(_localctx, 252, RULE_blockStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1482; blockStatement();
				}
				}
				State = 1485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
			return GetRuleContext<LocalVariableDeclarationStatementContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 254, RULE_blockStatement);
		try {
			State = 1490;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1487; localVariableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1488; classDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1489; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public LocalVariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
		LocalVariableDeclarationStatementContext _localctx = new LocalVariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 256, RULE_localVariableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1492; localVariableDeclaration();
			State = 1493; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 258, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1495; variableModifier();
				}
				}
				State = 1500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1501; unannType();
			State = 1502; variableDeclaratorList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		public IfThenStatementContext ifThenStatement() {
			return GetRuleContext<IfThenStatementContext>(0);
		}
		public IfThenElseStatementContext ifThenElseStatement() {
			return GetRuleContext<IfThenElseStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 260, RULE_statement);
		try {
			State = 1510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1504; statementWithoutTrailingSubstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1505; labeledStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1506; ifThenStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1507; ifThenElseStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1508; whileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1509; forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementNoShortIfContext : ParserRuleContext {
		public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
			return GetRuleContext<LabeledStatementNoShortIfContext>(0);
		}
		public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
			return GetRuleContext<IfThenElseStatementNoShortIfContext>(0);
		}
		public WhileStatementNoShortIfContext whileStatementNoShortIf() {
			return GetRuleContext<WhileStatementNoShortIfContext>(0);
		}
		public ForStatementNoShortIfContext forStatementNoShortIf() {
			return GetRuleContext<ForStatementNoShortIfContext>(0);
		}
		public StatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public StatementNoShortIfContext statementNoShortIf() {
		StatementNoShortIfContext _localctx = new StatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 262, RULE_statementNoShortIf);
		try {
			State = 1517;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1512; statementWithoutTrailingSubstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1513; labeledStatementNoShortIf();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1514; ifThenElseStatementNoShortIf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1515; whileStatementNoShortIf();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1516; forStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementWithoutTrailingSubstatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public AssertStatementContext assertStatement() {
			return GetRuleContext<AssertStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public SynchronizedStatementContext synchronizedStatement() {
			return GetRuleContext<SynchronizedStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public StatementWithoutTrailingSubstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementWithoutTrailingSubstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterStatementWithoutTrailingSubstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitStatementWithoutTrailingSubstatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
		StatementWithoutTrailingSubstatementContext _localctx = new StatementWithoutTrailingSubstatementContext(Context, State);
		EnterRule(_localctx, 264, RULE_statementWithoutTrailingSubstatement);
		try {
			State = 1531;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1519; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1520; emptyStatement();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case INC:
			case DEC:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1521; expressionStatement();
				}
				break;
			case ASSERT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1522; assertStatement();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1523; switchStatement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1524; doStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1525; breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1526; continueStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1527; returnStatement();
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1528; synchronizedStatement();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1529; throwStatement();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1530; tryStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 266, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1533; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ITerminalNode COLON() { return GetToken(Java8Parser.COLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 268, RULE_labeledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535; Match(Identifier);
			State = 1536; Match(COLON);
			State = 1537; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementNoShortIfContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ITerminalNode COLON() { return GetToken(Java8Parser.COLON, 0); }
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public LabeledStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
		LabeledStatementNoShortIfContext _localctx = new LabeledStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 270, RULE_labeledStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1539; Match(Identifier);
			State = 1540; Match(COLON);
			State = 1541; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 272, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1543; statementExpression();
			State = 1544; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		public PostIncrementExpressionContext postIncrementExpression() {
			return GetRuleContext<PostIncrementExpressionContext>(0);
		}
		public PostDecrementExpressionContext postDecrementExpression() {
			return GetRuleContext<PostDecrementExpressionContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(Context, State);
		EnterRule(_localctx, 274, RULE_statementExpression);
		try {
			State = 1553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1546; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1547; preIncrementExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1548; preDecrementExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1549; postIncrementExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1550; postDecrementExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1551; methodInvocation();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1552; classInstanceCreationExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(Java8Parser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterIfThenStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitIfThenStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfThenStatementContext ifThenStatement() {
		IfThenStatementContext _localctx = new IfThenStatementContext(Context, State);
		EnterRule(_localctx, 276, RULE_ifThenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555; Match(IF);
			State = 1556; Match(LPAREN);
			State = 1557; expression();
			State = 1558; Match(RPAREN);
			State = 1559; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(Java8Parser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(Java8Parser.ELSE, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterIfThenElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitIfThenElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementContext ifThenElseStatement() {
		IfThenElseStatementContext _localctx = new IfThenElseStatementContext(Context, State);
		EnterRule(_localctx, 278, RULE_ifThenElseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1561; Match(IF);
			State = 1562; Match(LPAREN);
			State = 1563; expression();
			State = 1564; Match(RPAREN);
			State = 1565; statementNoShortIf();
			State = 1566; Match(ELSE);
			State = 1567; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementNoShortIfContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(Java8Parser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public StatementNoShortIfContext[] statementNoShortIf() {
			return GetRuleContexts<StatementNoShortIfContext>();
		}
		public StatementNoShortIfContext statementNoShortIf(int i) {
			return GetRuleContext<StatementNoShortIfContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(Java8Parser.ELSE, 0); }
		public IfThenElseStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterIfThenElseStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitIfThenElseStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
		IfThenElseStatementNoShortIfContext _localctx = new IfThenElseStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 280, RULE_ifThenElseStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1569; Match(IF);
			State = 1570; Match(LPAREN);
			State = 1571; expression();
			State = 1572; Match(RPAREN);
			State = 1573; statementNoShortIf();
			State = 1574; Match(ELSE);
			State = 1575; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStatementContext : ParserRuleContext {
		public ITerminalNode ASSERT() { return GetToken(Java8Parser.ASSERT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public ITerminalNode COLON() { return GetToken(Java8Parser.COLON, 0); }
		public AssertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAssertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAssertStatement(this);
		}
	}

	[RuleVersion(0)]
	public AssertStatementContext assertStatement() {
		AssertStatementContext _localctx = new AssertStatementContext(Context, State);
		EnterRule(_localctx, 282, RULE_assertStatement);
		try {
			State = 1587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1577; Match(ASSERT);
				State = 1578; expression();
				State = 1579; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1581; Match(ASSERT);
				State = 1582; expression();
				State = 1583; Match(COLON);
				State = 1584; expression();
				State = 1585; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ITerminalNode SWITCH() { return GetToken(Java8Parser.SWITCH, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 284, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1589; Match(SWITCH);
			State = 1590; Match(LPAREN);
			State = 1591; expression();
			State = 1592; Match(RPAREN);
			State = 1593; switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(Java8Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(Java8Parser.RBRACE, 0); }
		public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 286, RULE_switchBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595; Match(LBRACE);
			State = 1599;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1596; switchBlockStatementGroup();
					}
					} 
				}
				State = 1601;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			}
			State = 1605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1602; switchLabel();
				}
				}
				State = 1607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1608; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		public SwitchLabelsContext switchLabels() {
			return GetRuleContext<SwitchLabelsContext>(0);
		}
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 288, RULE_switchBlockStatementGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610; switchLabels();
			State = 1611; blockStatements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelsContext : ParserRuleContext {
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchLabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabels(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelsContext switchLabels() {
		SwitchLabelsContext _localctx = new SwitchLabelsContext(Context, State);
		EnterRule(_localctx, 290, RULE_switchLabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1613; switchLabel();
			State = 1617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1614; switchLabel();
				}
				}
				State = 1619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(Java8Parser.CASE, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(Java8Parser.COLON, 0); }
		public EnumConstantNameContext enumConstantName() {
			return GetRuleContext<EnumConstantNameContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(Java8Parser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 292, RULE_switchLabel);
		try {
			State = 1630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1620; Match(CASE);
				State = 1621; constantExpression();
				State = 1622; Match(COLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1624; Match(CASE);
				State = 1625; enumConstantName();
				State = 1626; Match(COLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1628; Match(DEFAULT);
				State = 1629; Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumConstantNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterEnumConstantName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitEnumConstantName(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantNameContext enumConstantName() {
		EnumConstantNameContext _localctx = new EnumConstantNameContext(Context, State);
		EnterRule(_localctx, 294, RULE_enumConstantName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(Java8Parser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 296, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1634; Match(WHILE);
			State = 1635; Match(LPAREN);
			State = 1636; expression();
			State = 1637; Match(RPAREN);
			State = 1638; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementNoShortIfContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(Java8Parser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public WhileStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterWhileStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitWhileStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementNoShortIfContext whileStatementNoShortIf() {
		WhileStatementNoShortIfContext _localctx = new WhileStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 298, RULE_whileStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1640; Match(WHILE);
			State = 1641; Match(LPAREN);
			State = 1642; expression();
			State = 1643; Match(RPAREN);
			State = 1644; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(Java8Parser.DO, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(Java8Parser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 300, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646; Match(DO);
			State = 1647; statement();
			State = 1648; Match(WHILE);
			State = 1649; Match(LPAREN);
			State = 1650; expression();
			State = 1651; Match(RPAREN);
			State = 1652; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public BasicForStatementContext basicForStatement() {
			return GetRuleContext<BasicForStatementContext>(0);
		}
		public EnhancedForStatementContext enhancedForStatement() {
			return GetRuleContext<EnhancedForStatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 302, RULE_forStatement);
		try {
			State = 1656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1654; basicForStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1655; enhancedForStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementNoShortIfContext : ParserRuleContext {
		public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
			return GetRuleContext<BasicForStatementNoShortIfContext>(0);
		}
		public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
			return GetRuleContext<EnhancedForStatementNoShortIfContext>(0);
		}
		public ForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitForStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementNoShortIfContext forStatementNoShortIf() {
		ForStatementNoShortIfContext _localctx = new ForStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 304, RULE_forStatementNoShortIf);
		try {
			State = 1660;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1658; basicForStatementNoShortIf();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1659; enhancedForStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(Java8Parser.FOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode[] SEMI() { return GetTokens(Java8Parser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(Java8Parser.SEMI, i);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterBasicForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitBasicForStatement(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementContext basicForStatement() {
		BasicForStatementContext _localctx = new BasicForStatementContext(Context, State);
		EnterRule(_localctx, 306, RULE_basicForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1662; Match(FOR);
			State = 1663; Match(LPAREN);
			State = 1665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1664; forInit();
				}
			}

			State = 1667; Match(SEMI);
			State = 1669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1668; expression();
				}
			}

			State = 1671; Match(SEMI);
			State = 1673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1672; forUpdate();
				}
			}

			State = 1675; Match(RPAREN);
			State = 1676; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementNoShortIfContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(Java8Parser.FOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode[] SEMI() { return GetTokens(Java8Parser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(Java8Parser.SEMI, i);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterBasicForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitBasicForStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
		BasicForStatementNoShortIfContext _localctx = new BasicForStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 308, RULE_basicForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678; Match(FOR);
			State = 1679; Match(LPAREN);
			State = 1681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1680; forInit();
				}
			}

			State = 1683; Match(SEMI);
			State = 1685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1684; expression();
				}
			}

			State = 1687; Match(SEMI);
			State = 1689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1688; forUpdate();
				}
			}

			State = 1691; Match(RPAREN);
			State = 1692; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 310, RULE_forInit);
		try {
			State = 1696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1694; statementExpressionList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1695; localVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(Context, State);
		EnterRule(_localctx, 312, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698; statementExpressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionListContext : ParserRuleContext {
		public StatementExpressionContext[] statementExpression() {
			return GetRuleContexts<StatementExpressionContext>();
		}
		public StatementExpressionContext statementExpression(int i) {
			return GetRuleContext<StatementExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public StatementExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterStatementExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitStatementExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionListContext statementExpressionList() {
		StatementExpressionListContext _localctx = new StatementExpressionListContext(Context, State);
		EnterRule(_localctx, 314, RULE_statementExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1700; statementExpression();
			State = 1705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1701; Match(COMMA);
				State = 1702; statementExpression();
				}
				}
				State = 1707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(Java8Parser.FOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(Java8Parser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterEnhancedForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitEnhancedForStatement(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementContext enhancedForStatement() {
		EnhancedForStatementContext _localctx = new EnhancedForStatementContext(Context, State);
		EnterRule(_localctx, 316, RULE_enhancedForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1708; Match(FOR);
			State = 1709; Match(LPAREN);
			State = 1713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1710; variableModifier();
				}
				}
				State = 1715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1716; unannType();
			State = 1717; variableDeclaratorId();
			State = 1718; Match(COLON);
			State = 1719; expression();
			State = 1720; Match(RPAREN);
			State = 1721; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementNoShortIfContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(Java8Parser.FOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(Java8Parser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterEnhancedForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitEnhancedForStatementNoShortIf(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
		EnhancedForStatementNoShortIfContext _localctx = new EnhancedForStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 318, RULE_enhancedForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1723; Match(FOR);
			State = 1724; Match(LPAREN);
			State = 1728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1725; variableModifier();
				}
				}
				State = 1730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1731; unannType();
			State = 1732; variableDeclaratorId();
			State = 1733; Match(COLON);
			State = 1734; expression();
			State = 1735; Match(RPAREN);
			State = 1736; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(Java8Parser.BREAK, 0); }
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 320, RULE_breakStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738; Match(BREAK);
			State = 1740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1739; Match(Identifier);
				}
			}

			State = 1742; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(Java8Parser.CONTINUE, 0); }
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 322, RULE_continueStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1744; Match(CONTINUE);
			State = 1746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1745; Match(Identifier);
				}
			}

			State = 1748; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(Java8Parser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 324, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1750; Match(RETURN);
			State = 1752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1751; expression();
				}
			}

			State = 1754; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ITerminalNode THROW() { return GetToken(Java8Parser.THROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 326, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1756; Match(THROW);
			State = 1757; expression();
			State = 1758; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SynchronizedStatementContext : ParserRuleContext {
		public ITerminalNode SYNCHRONIZED() { return GetToken(Java8Parser.SYNCHRONIZED, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SynchronizedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synchronizedStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterSynchronizedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitSynchronizedStatement(this);
		}
	}

	[RuleVersion(0)]
	public SynchronizedStatementContext synchronizedStatement() {
		SynchronizedStatementContext _localctx = new SynchronizedStatementContext(Context, State);
		EnterRule(_localctx, 328, RULE_synchronizedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1760; Match(SYNCHRONIZED);
			State = 1761; Match(LPAREN);
			State = 1762; expression();
			State = 1763; Match(RPAREN);
			State = 1764; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		public ITerminalNode TRY() { return GetToken(Java8Parser.TRY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		public Finally_Context finally_() {
			return GetRuleContext<Finally_Context>(0);
		}
		public TryWithResourcesStatementContext tryWithResourcesStatement() {
			return GetRuleContext<TryWithResourcesStatementContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 330, RULE_tryStatement);
		int _la;
		try {
			State = 1778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1766; Match(TRY);
				State = 1767; block();
				State = 1768; catches();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1770; Match(TRY);
				State = 1771; block();
				State = 1773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATCH) {
					{
					State = 1772; catches();
					}
				}

				State = 1775; finally_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1777; tryWithResourcesStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchesContext : ParserRuleContext {
		public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public CatchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catches; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterCatches(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitCatches(this);
		}
	}

	[RuleVersion(0)]
	public CatchesContext catches() {
		CatchesContext _localctx = new CatchesContext(Context, State);
		EnterRule(_localctx, 332, RULE_catches);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1780; catchClause();
			State = 1784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATCH) {
				{
				{
				State = 1781; catchClause();
				}
				}
				State = 1786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(Java8Parser.CATCH, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public CatchFormalParameterContext catchFormalParameter() {
			return GetRuleContext<CatchFormalParameterContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 334, RULE_catchClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1787; Match(CATCH);
			State = 1788; Match(LPAREN);
			State = 1789; catchFormalParameter();
			State = 1790; Match(RPAREN);
			State = 1791; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchFormalParameterContext : ParserRuleContext {
		public CatchTypeContext catchType() {
			return GetRuleContext<CatchTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public CatchFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterCatchFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitCatchFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public CatchFormalParameterContext catchFormalParameter() {
		CatchFormalParameterContext _localctx = new CatchFormalParameterContext(Context, State);
		EnterRule(_localctx, 336, RULE_catchFormalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1793; variableModifier();
				}
				}
				State = 1798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1799; catchType();
			State = 1800; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchTypeContext : ParserRuleContext {
		public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		public ITerminalNode[] BITOR() { return GetTokens(Java8Parser.BITOR); }
		public ITerminalNode BITOR(int i) {
			return GetToken(Java8Parser.BITOR, i);
		}
		public ClassTypeContext[] classType() {
			return GetRuleContexts<ClassTypeContext>();
		}
		public ClassTypeContext classType(int i) {
			return GetRuleContext<ClassTypeContext>(i);
		}
		public CatchTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterCatchType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitCatchType(this);
		}
	}

	[RuleVersion(0)]
	public CatchTypeContext catchType() {
		CatchTypeContext _localctx = new CatchTypeContext(Context, State);
		EnterRule(_localctx, 338, RULE_catchType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1802; unannClassType();
			State = 1807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITOR) {
				{
				{
				State = 1803; Match(BITOR);
				State = 1804; classType();
				}
				}
				State = 1809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_Context : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(Java8Parser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterFinally_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitFinally_(this);
		}
	}

	[RuleVersion(0)]
	public Finally_Context finally_() {
		Finally_Context _localctx = new Finally_Context(Context, State);
		EnterRule(_localctx, 340, RULE_finally_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1810; Match(FINALLY);
			State = 1811; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryWithResourcesStatementContext : ParserRuleContext {
		public ITerminalNode TRY() { return GetToken(Java8Parser.TRY, 0); }
		public ResourceSpecificationContext resourceSpecification() {
			return GetRuleContext<ResourceSpecificationContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		public Finally_Context finally_() {
			return GetRuleContext<Finally_Context>(0);
		}
		public TryWithResourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryWithResourcesStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTryWithResourcesStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTryWithResourcesStatement(this);
		}
	}

	[RuleVersion(0)]
	public TryWithResourcesStatementContext tryWithResourcesStatement() {
		TryWithResourcesStatementContext _localctx = new TryWithResourcesStatementContext(Context, State);
		EnterRule(_localctx, 342, RULE_tryWithResourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1813; Match(TRY);
			State = 1814; resourceSpecification();
			State = 1815; block();
			State = 1817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CATCH) {
				{
				State = 1816; catches();
				}
			}

			State = 1820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINALLY) {
				{
				State = 1819; finally_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceSpecificationContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ResourceListContext resourceList() {
			return GetRuleContext<ResourceListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(Java8Parser.SEMI, 0); }
		public ResourceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceSpecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterResourceSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitResourceSpecification(this);
		}
	}

	[RuleVersion(0)]
	public ResourceSpecificationContext resourceSpecification() {
		ResourceSpecificationContext _localctx = new ResourceSpecificationContext(Context, State);
		EnterRule(_localctx, 344, RULE_resourceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1822; Match(LPAREN);
			State = 1823; resourceList();
			State = 1825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 1824; Match(SEMI);
				}
			}

			State = 1827; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceListContext : ParserRuleContext {
		public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(Java8Parser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(Java8Parser.SEMI, i);
		}
		public ResourceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterResourceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitResourceList(this);
		}
	}

	[RuleVersion(0)]
	public ResourceListContext resourceList() {
		ResourceListContext _localctx = new ResourceListContext(Context, State);
		EnterRule(_localctx, 346, RULE_resourceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1829; resource();
			State = 1834;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,187,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1830; Match(SEMI);
					State = 1831; resource();
					}
					} 
				}
				State = 1836;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,187,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(Java8Parser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 348, RULE_resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1837; variableModifier();
				}
				}
				State = 1842;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1843; unannType();
			State = 1844; variableDeclaratorId();
			State = 1845; Match(ASSIGN);
			State = 1846; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lfno_primaryContext primaryNoNewArray_lfno_primary() {
			return GetRuleContext<PrimaryNoNewArray_lfno_primaryContext>(0);
		}
		public ArrayCreationExpressionContext arrayCreationExpression() {
			return GetRuleContext<ArrayCreationExpressionContext>(0);
		}
		public PrimaryNoNewArray_lf_primaryContext[] primaryNoNewArray_lf_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lf_primaryContext>();
		}
		public PrimaryNoNewArray_lf_primaryContext primaryNoNewArray_lf_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_primaryContext>(i);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 350, RULE_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1850;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
			case 1:
				{
				State = 1848; primaryNoNewArray_lfno_primary();
				}
				break;
			case 2:
				{
				State = 1849; arrayCreationExpression();
				}
				break;
			}
			State = 1855;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,190,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1852; primaryNoNewArray_lf_primary();
					}
					} 
				}
				State = 1857;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,190,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArrayContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ITerminalNode CLASS() { return GetToken(Java8Parser.CLASS, 0); }
		public ITerminalNode[] LBRACK() { return GetTokens(Java8Parser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(Java8Parser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(Java8Parser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(Java8Parser.RBRACK, i);
		}
		public ITerminalNode VOID() { return GetToken(Java8Parser.VOID, 0); }
		public ITerminalNode THIS() { return GetToken(Java8Parser.THIS, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public PrimaryNoNewArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArrayContext primaryNoNewArray() {
		PrimaryNoNewArrayContext _localctx = new PrimaryNoNewArrayContext(Context, State);
		EnterRule(_localctx, 352, RULE_primaryNoNewArray);
		int _la;
		try {
			State = 1887;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1858; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1859; typeName();
				State = 1864;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1860; Match(LBRACK);
					State = 1861; Match(RBRACK);
					}
					}
					State = 1866;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1867; Match(DOT);
				State = 1868; Match(CLASS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1870; Match(VOID);
				State = 1871; Match(DOT);
				State = 1872; Match(CLASS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1873; Match(THIS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1874; typeName();
				State = 1875; Match(DOT);
				State = 1876; Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1878; Match(LPAREN);
				State = 1879; expression();
				State = 1880; Match(RPAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1882; classInstanceCreationExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1883; fieldAccess();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1884; arrayAccess();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1885; methodInvocation();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1886; methodReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_arrayAccessContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_arrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_arrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_arrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_arrayAccessContext primaryNoNewArray_lf_arrayAccess() {
		PrimaryNoNewArray_lf_arrayAccessContext _localctx = new PrimaryNoNewArray_lf_arrayAccessContext(Context, State);
		EnterRule(_localctx, 354, RULE_primaryNoNewArray_lf_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_arrayAccessContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ITerminalNode CLASS() { return GetToken(Java8Parser.CLASS, 0); }
		public ITerminalNode[] LBRACK() { return GetTokens(Java8Parser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(Java8Parser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(Java8Parser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(Java8Parser.RBRACK, i);
		}
		public ITerminalNode VOID() { return GetToken(Java8Parser.VOID, 0); }
		public ITerminalNode THIS() { return GetToken(Java8Parser.THIS, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public PrimaryNoNewArray_lfno_arrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_arrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_arrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_arrayAccessContext primaryNoNewArray_lfno_arrayAccess() {
		PrimaryNoNewArray_lfno_arrayAccessContext _localctx = new PrimaryNoNewArray_lfno_arrayAccessContext(Context, State);
		EnterRule(_localctx, 356, RULE_primaryNoNewArray_lfno_arrayAccess);
		int _la;
		try {
			State = 1919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1891; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1892; typeName();
				State = 1897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1893; Match(LBRACK);
					State = 1894; Match(RBRACK);
					}
					}
					State = 1899;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1900; Match(DOT);
				State = 1901; Match(CLASS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1903; Match(VOID);
				State = 1904; Match(DOT);
				State = 1905; Match(CLASS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1906; Match(THIS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1907; typeName();
				State = 1908; Match(DOT);
				State = 1909; Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1911; Match(LPAREN);
				State = 1912; expression();
				State = 1913; Match(RPAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1915; classInstanceCreationExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1916; fieldAccess();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1917; methodInvocation();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1918; methodReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primaryContext : ParserRuleContext {
		public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lf_primaryContext>(0);
		}
		public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
			return GetRuleContext<FieldAccess_lf_primaryContext>(0);
		}
		public ArrayAccess_lf_primaryContext arrayAccess_lf_primary() {
			return GetRuleContext<ArrayAccess_lf_primaryContext>(0);
		}
		public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
			return GetRuleContext<MethodInvocation_lf_primaryContext>(0);
		}
		public MethodReference_lf_primaryContext methodReference_lf_primary() {
			return GetRuleContext<MethodReference_lf_primaryContext>(0);
		}
		public PrimaryNoNewArray_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primaryContext primaryNoNewArray_lf_primary() {
		PrimaryNoNewArray_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primaryContext(Context, State);
		EnterRule(_localctx, 358, RULE_primaryNoNewArray_lf_primary);
		try {
			State = 1926;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1921; classInstanceCreationExpression_lf_primary();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1922; fieldAccess_lf_primary();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1923; arrayAccess_lf_primary();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1924; methodInvocation_lf_primary();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1925; methodReference_lf_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
		PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(Context, State);
		EnterRule(_localctx, 360, RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext : ParserRuleContext {
		public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lf_primaryContext>(0);
		}
		public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
			return GetRuleContext<FieldAccess_lf_primaryContext>(0);
		}
		public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
			return GetRuleContext<MethodInvocation_lf_primaryContext>(0);
		}
		public MethodReference_lf_primaryContext methodReference_lf_primary() {
			return GetRuleContext<MethodReference_lf_primaryContext>(0);
		}
		public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
		PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(Context, State);
		EnterRule(_localctx, 362, RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);
		try {
			State = 1934;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1930; classInstanceCreationExpression_lf_primary();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1931; fieldAccess_lf_primary();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1932; methodInvocation_lf_primary();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1933; methodReference_lf_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primaryContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ITerminalNode CLASS() { return GetToken(Java8Parser.CLASS, 0); }
		public ITerminalNode[] LBRACK() { return GetTokens(Java8Parser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(Java8Parser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(Java8Parser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(Java8Parser.RBRACK, i);
		}
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(Java8Parser.VOID, 0); }
		public ITerminalNode THIS() { return GetToken(Java8Parser.THIS, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lfno_primaryContext>(0);
		}
		public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
			return GetRuleContext<FieldAccess_lfno_primaryContext>(0);
		}
		public ArrayAccess_lfno_primaryContext arrayAccess_lfno_primary() {
			return GetRuleContext<ArrayAccess_lfno_primaryContext>(0);
		}
		public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
			return GetRuleContext<MethodInvocation_lfno_primaryContext>(0);
		}
		public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
			return GetRuleContext<MethodReference_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primaryContext primaryNoNewArray_lfno_primary() {
		PrimaryNoNewArray_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 364, RULE_primaryNoNewArray_lfno_primary);
		int _la;
		try {
			State = 1976;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1936; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1937; typeName();
				State = 1942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1938; Match(LBRACK);
					State = 1939; Match(RBRACK);
					}
					}
					State = 1944;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1945; Match(DOT);
				State = 1946; Match(CLASS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1948; unannPrimitiveType();
				State = 1953;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1949; Match(LBRACK);
					State = 1950; Match(RBRACK);
					}
					}
					State = 1955;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1956; Match(DOT);
				State = 1957; Match(CLASS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1959; Match(VOID);
				State = 1960; Match(DOT);
				State = 1961; Match(CLASS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1962; Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1963; typeName();
				State = 1964; Match(DOT);
				State = 1965; Match(THIS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1967; Match(LPAREN);
				State = 1968; expression();
				State = 1969; Match(RPAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1971; classInstanceCreationExpression_lfno_primary();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1972; fieldAccess_lfno_primary();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1973; arrayAccess_lfno_primary();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1974; methodInvocation_lfno_primary();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1975; methodReference_lfno_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
		PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 366, RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ITerminalNode CLASS() { return GetToken(Java8Parser.CLASS, 0); }
		public ITerminalNode[] LBRACK() { return GetTokens(Java8Parser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(Java8Parser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(Java8Parser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(Java8Parser.RBRACK, i);
		}
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(Java8Parser.VOID, 0); }
		public ITerminalNode THIS() { return GetToken(Java8Parser.THIS, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lfno_primaryContext>(0);
		}
		public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
			return GetRuleContext<FieldAccess_lfno_primaryContext>(0);
		}
		public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
			return GetRuleContext<MethodInvocation_lfno_primaryContext>(0);
		}
		public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
			return GetRuleContext<MethodReference_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
		PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 368, RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);
		int _la;
		try {
			State = 2019;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1980; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1981; typeName();
				State = 1986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1982; Match(LBRACK);
					State = 1983; Match(RBRACK);
					}
					}
					State = 1988;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1989; Match(DOT);
				State = 1990; Match(CLASS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1992; unannPrimitiveType();
				State = 1997;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1993; Match(LBRACK);
					State = 1994; Match(RBRACK);
					}
					}
					State = 1999;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2000; Match(DOT);
				State = 2001; Match(CLASS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2003; Match(VOID);
				State = 2004; Match(DOT);
				State = 2005; Match(CLASS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2006; Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2007; typeName();
				State = 2008; Match(DOT);
				State = 2009; Match(THIS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2011; Match(LPAREN);
				State = 2012; expression();
				State = 2013; Match(RPAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2015; classInstanceCreationExpression_lfno_primary();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2016; fieldAccess_lfno_primary();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2017; methodInvocation_lfno_primary();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2018; methodReference_lfno_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(Java8Parser.NEW, 0); }
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(Java8Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Java8Parser.DOT, i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ClassInstanceCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
		ClassInstanceCreationExpressionContext _localctx = new ClassInstanceCreationExpressionContext(Context, State);
		EnterRule(_localctx, 370, RULE_classInstanceCreationExpression);
		int _la;
		try {
			State = 2104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2021; Match(NEW);
				State = 2023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2022; typeArguments();
					}
				}

				State = 2028;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2025; annotation();
					}
					}
					State = 2030;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2031; Match(Identifier);
				State = 2042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 2032; Match(DOT);
					State = 2036;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AT) {
						{
						{
						State = 2033; annotation();
						}
						}
						State = 2038;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2039; Match(Identifier);
					}
					}
					State = 2044;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2045; typeArgumentsOrDiamond();
					}
				}

				State = 2048; Match(LPAREN);
				State = 2050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2049; argumentList();
					}
				}

				State = 2052; Match(RPAREN);
				State = 2054;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 2053; classBody();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2056; expressionName();
				State = 2057; Match(DOT);
				State = 2058; Match(NEW);
				State = 2060;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2059; typeArguments();
					}
				}

				State = 2065;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2062; annotation();
					}
					}
					State = 2067;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2068; Match(Identifier);
				State = 2070;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2069; typeArgumentsOrDiamond();
					}
				}

				State = 2072; Match(LPAREN);
				State = 2074;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2073; argumentList();
					}
				}

				State = 2076; Match(RPAREN);
				State = 2078;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 2077; classBody();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2080; primary();
				State = 2081; Match(DOT);
				State = 2082; Match(NEW);
				State = 2084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2083; typeArguments();
					}
				}

				State = 2089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2086; annotation();
					}
					}
					State = 2091;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2092; Match(Identifier);
				State = 2094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2093; typeArgumentsOrDiamond();
					}
				}

				State = 2096; Match(LPAREN);
				State = 2098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2097; argumentList();
					}
				}

				State = 2100; Match(RPAREN);
				State = 2102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 2101; classBody();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpression_lf_primaryContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ITerminalNode NEW() { return GetToken(Java8Parser.NEW, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassInstanceCreationExpression_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
		ClassInstanceCreationExpression_lf_primaryContext _localctx = new ClassInstanceCreationExpression_lf_primaryContext(Context, State);
		EnterRule(_localctx, 372, RULE_classInstanceCreationExpression_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2106; Match(DOT);
			State = 2107; Match(NEW);
			State = 2109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2108; typeArguments();
				}
			}

			State = 2114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 2111; annotation();
				}
				}
				State = 2116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2117; Match(Identifier);
			State = 2119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2118; typeArgumentsOrDiamond();
				}
			}

			State = 2121; Match(LPAREN);
			State = 2123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 2122; argumentList();
				}
			}

			State = 2125; Match(RPAREN);
			State = 2127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				{
				State = 2126; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpression_lfno_primaryContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(Java8Parser.NEW, 0); }
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(Java8Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Java8Parser.DOT, i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
		ClassInstanceCreationExpression_lfno_primaryContext _localctx = new ClassInstanceCreationExpression_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 374, RULE_classInstanceCreationExpression_lfno_primary);
		int _la;
		try {
			State = 2188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2129; Match(NEW);
				State = 2131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2130; typeArguments();
					}
				}

				State = 2136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2133; annotation();
					}
					}
					State = 2138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2139; Match(Identifier);
				State = 2150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 2140; Match(DOT);
					State = 2144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AT) {
						{
						{
						State = 2141; annotation();
						}
						}
						State = 2146;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2147; Match(Identifier);
					}
					}
					State = 2152;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2153; typeArgumentsOrDiamond();
					}
				}

				State = 2156; Match(LPAREN);
				State = 2158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2157; argumentList();
					}
				}

				State = 2160; Match(RPAREN);
				State = 2162;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
				case 1:
					{
					State = 2161; classBody();
					}
					break;
				}
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2164; expressionName();
				State = 2165; Match(DOT);
				State = 2166; Match(NEW);
				State = 2168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2167; typeArguments();
					}
				}

				State = 2173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2170; annotation();
					}
					}
					State = 2175;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2176; Match(Identifier);
				State = 2178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2177; typeArgumentsOrDiamond();
					}
				}

				State = 2180; Match(LPAREN);
				State = 2182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2181; argumentList();
					}
				}

				State = 2184; Match(RPAREN);
				State = 2186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
				case 1:
					{
					State = 2185; classBody();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ITerminalNode LT() { return GetToken(Java8Parser.LT, 0); }
		public ITerminalNode GT() { return GetToken(Java8Parser.GT, 0); }
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 376, RULE_typeArgumentsOrDiamond);
		try {
			State = 2193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2190; typeArguments();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2191; Match(LT);
				State = 2192; Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(Java8Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Java8Parser.DOT, i);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ITerminalNode SUPER() { return GetToken(Java8Parser.SUPER, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 378, RULE_fieldAccess);
		try {
			State = 2208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2195; primary();
				State = 2196; Match(DOT);
				State = 2197; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2199; Match(SUPER);
				State = 2200; Match(DOT);
				State = 2201; Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2202; typeName();
				State = 2203; Match(DOT);
				State = 2204; Match(SUPER);
				State = 2205; Match(DOT);
				State = 2206; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccess_lf_primaryContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FieldAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterFieldAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitFieldAccess_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
		FieldAccess_lf_primaryContext _localctx = new FieldAccess_lf_primaryContext(Context, State);
		EnterRule(_localctx, 380, RULE_fieldAccess_lf_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2210; Match(DOT);
			State = 2211; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccess_lfno_primaryContext : ParserRuleContext {
		public ITerminalNode SUPER() { return GetToken(Java8Parser.SUPER, 0); }
		public ITerminalNode[] DOT() { return GetTokens(Java8Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Java8Parser.DOT, i);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterFieldAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitFieldAccess_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
		FieldAccess_lfno_primaryContext _localctx = new FieldAccess_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 382, RULE_fieldAccess_lfno_primary);
		try {
			State = 2222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2213; Match(SUPER);
				State = 2214; Match(DOT);
				State = 2215; Match(Identifier);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2216; typeName();
				State = 2217; Match(DOT);
				State = 2218; Match(SUPER);
				State = 2219; Match(DOT);
				State = 2220; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(Java8Parser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(Java8Parser.LBRACK, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(Java8Parser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(Java8Parser.RBRACK, i);
		}
		public PrimaryNoNewArray_lfno_arrayAccessContext primaryNoNewArray_lfno_arrayAccess() {
			return GetRuleContext<PrimaryNoNewArray_lfno_arrayAccessContext>(0);
		}
		public PrimaryNoNewArray_lf_arrayAccessContext[] primaryNoNewArray_lf_arrayAccess() {
			return GetRuleContexts<PrimaryNoNewArray_lf_arrayAccessContext>();
		}
		public PrimaryNoNewArray_lf_arrayAccessContext primaryNoNewArray_lf_arrayAccess(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_arrayAccessContext>(i);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 384, RULE_arrayAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				{
				State = 2224; expressionName();
				State = 2225; Match(LBRACK);
				State = 2226; expression();
				State = 2227; Match(RBRACK);
				}
				break;
			case 2:
				{
				State = 2229; primaryNoNewArray_lfno_arrayAccess();
				State = 2230; Match(LBRACK);
				State = 2231; expression();
				State = 2232; Match(RBRACK);
				}
				break;
			}
			State = 2243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 2236; primaryNoNewArray_lf_arrayAccess();
				State = 2237; Match(LBRACK);
				State = 2238; expression();
				State = 2239; Match(RBRACK);
				}
				}
				State = 2245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess_lf_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
			return GetRuleContext<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext>(0);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(Java8Parser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(Java8Parser.LBRACK, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(Java8Parser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(Java8Parser.RBRACK, i);
		}
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext[] primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>();
		}
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>(i);
		}
		public ArrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterArrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitArrayAccess_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess_lf_primaryContext arrayAccess_lf_primary() {
		ArrayAccess_lf_primaryContext _localctx = new ArrayAccess_lf_primaryContext(Context, State);
		EnterRule(_localctx, 386, RULE_arrayAccess_lf_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2246; primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
			State = 2247; Match(LBRACK);
			State = 2248; expression();
			State = 2249; Match(RBRACK);
			}
			State = 2258;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,244,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2251; primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
					State = 2252; Match(LBRACK);
					State = 2253; expression();
					State = 2254; Match(RBRACK);
					}
					} 
				}
				State = 2260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,244,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess_lfno_primaryContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(Java8Parser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(Java8Parser.LBRACK, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(Java8Parser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(Java8Parser.RBRACK, i);
		}
		public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
			return GetRuleContext<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext[] primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>();
		}
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>(i);
		}
		public ArrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterArrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitArrayAccess_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess_lfno_primaryContext arrayAccess_lfno_primary() {
		ArrayAccess_lfno_primaryContext _localctx = new ArrayAccess_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 388, RULE_arrayAccess_lfno_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
			case 1:
				{
				State = 2261; expressionName();
				State = 2262; Match(LBRACK);
				State = 2263; expression();
				State = 2264; Match(RBRACK);
				}
				break;
			case 2:
				{
				State = 2266; primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
				State = 2267; Match(LBRACK);
				State = 2268; expression();
				State = 2269; Match(RBRACK);
				}
				break;
			}
			State = 2280;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,246,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2273; primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
					State = 2274; Match(LBRACK);
					State = 2275; expression();
					State = 2276; Match(RBRACK);
					}
					} 
				}
				State = 2282;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,246,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(Java8Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Java8Parser.DOT, i);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode SUPER() { return GetToken(Java8Parser.SUPER, 0); }
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMethodInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMethodInvocation(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 390, RULE_methodInvocation);
		int _la;
		try {
			State = 2351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2283; methodName();
				State = 2284; Match(LPAREN);
				State = 2286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2285; argumentList();
					}
				}

				State = 2288; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2290; typeName();
				State = 2291; Match(DOT);
				State = 2293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2292; typeArguments();
					}
				}

				State = 2295; Match(Identifier);
				State = 2296; Match(LPAREN);
				State = 2298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2297; argumentList();
					}
				}

				State = 2300; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2302; expressionName();
				State = 2303; Match(DOT);
				State = 2305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2304; typeArguments();
					}
				}

				State = 2307; Match(Identifier);
				State = 2308; Match(LPAREN);
				State = 2310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2309; argumentList();
					}
				}

				State = 2312; Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2314; primary();
				State = 2315; Match(DOT);
				State = 2317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2316; typeArguments();
					}
				}

				State = 2319; Match(Identifier);
				State = 2320; Match(LPAREN);
				State = 2322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2321; argumentList();
					}
				}

				State = 2324; Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2326; Match(SUPER);
				State = 2327; Match(DOT);
				State = 2329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2328; typeArguments();
					}
				}

				State = 2331; Match(Identifier);
				State = 2332; Match(LPAREN);
				State = 2334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2333; argumentList();
					}
				}

				State = 2336; Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2337; typeName();
				State = 2338; Match(DOT);
				State = 2339; Match(SUPER);
				State = 2340; Match(DOT);
				State = 2342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2341; typeArguments();
					}
				}

				State = 2344; Match(Identifier);
				State = 2345; Match(LPAREN);
				State = 2347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2346; argumentList();
					}
				}

				State = 2349; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocation_lf_primaryContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocation_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMethodInvocation_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMethodInvocation_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
		MethodInvocation_lf_primaryContext _localctx = new MethodInvocation_lf_primaryContext(Context, State);
		EnterRule(_localctx, 392, RULE_methodInvocation_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2353; Match(DOT);
			State = 2355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2354; typeArguments();
				}
			}

			State = 2357; Match(Identifier);
			State = 2358; Match(LPAREN);
			State = 2360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 2359; argumentList();
				}
			}

			State = 2362; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocation_lfno_primaryContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(Java8Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(Java8Parser.DOT, i);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode SUPER() { return GetToken(Java8Parser.SUPER, 0); }
		public MethodInvocation_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMethodInvocation_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMethodInvocation_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
		MethodInvocation_lfno_primaryContext _localctx = new MethodInvocation_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 394, RULE_methodInvocation_lfno_primary);
		int _la;
		try {
			State = 2420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2364; methodName();
				State = 2365; Match(LPAREN);
				State = 2367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2366; argumentList();
					}
				}

				State = 2369; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2371; typeName();
				State = 2372; Match(DOT);
				State = 2374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2373; typeArguments();
					}
				}

				State = 2376; Match(Identifier);
				State = 2377; Match(LPAREN);
				State = 2379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2378; argumentList();
					}
				}

				State = 2381; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2383; expressionName();
				State = 2384; Match(DOT);
				State = 2386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2385; typeArguments();
					}
				}

				State = 2388; Match(Identifier);
				State = 2389; Match(LPAREN);
				State = 2391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2390; argumentList();
					}
				}

				State = 2393; Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2395; Match(SUPER);
				State = 2396; Match(DOT);
				State = 2398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2397; typeArguments();
					}
				}

				State = 2400; Match(Identifier);
				State = 2401; Match(LPAREN);
				State = 2403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2402; argumentList();
					}
				}

				State = 2405; Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2406; typeName();
				State = 2407; Match(DOT);
				State = 2408; Match(SUPER);
				State = 2409; Match(DOT);
				State = 2411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2410; typeArguments();
					}
				}

				State = 2413; Match(Identifier);
				State = 2414; Match(LPAREN);
				State = 2416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2415; argumentList();
					}
				}

				State = 2418; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 396, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2422; expression();
			State = 2427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2423; Match(COMMA);
				State = 2424; expression();
				}
				}
				State = 2429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReferenceContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(Java8Parser.COLONCOLON, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode SUPER() { return GetToken(Java8Parser.SUPER, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(Java8Parser.NEW, 0); }
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMethodReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMethodReference(this);
		}
	}

	[RuleVersion(0)]
	public MethodReferenceContext methodReference() {
		MethodReferenceContext _localctx = new MethodReferenceContext(Context, State);
		EnterRule(_localctx, 398, RULE_methodReference);
		int _la;
		try {
			State = 2477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2430; expressionName();
				State = 2431; Match(COLONCOLON);
				State = 2433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2432; typeArguments();
					}
				}

				State = 2435; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2437; referenceType();
				State = 2438; Match(COLONCOLON);
				State = 2440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2439; typeArguments();
					}
				}

				State = 2442; Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2444; primary();
				State = 2445; Match(COLONCOLON);
				State = 2447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2446; typeArguments();
					}
				}

				State = 2449; Match(Identifier);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2451; Match(SUPER);
				State = 2452; Match(COLONCOLON);
				State = 2454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2453; typeArguments();
					}
				}

				State = 2456; Match(Identifier);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2457; typeName();
				State = 2458; Match(DOT);
				State = 2459; Match(SUPER);
				State = 2460; Match(COLONCOLON);
				State = 2462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2461; typeArguments();
					}
				}

				State = 2464; Match(Identifier);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2466; classType();
				State = 2467; Match(COLONCOLON);
				State = 2469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2468; typeArguments();
					}
				}

				State = 2471; Match(NEW);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2473; arrayType();
				State = 2474; Match(COLONCOLON);
				State = 2475; Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReference_lf_primaryContext : ParserRuleContext {
		public ITerminalNode COLONCOLON() { return GetToken(Java8Parser.COLONCOLON, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public MethodReference_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMethodReference_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMethodReference_lf_primary(this);
		}
	}

	[RuleVersion(0)]
	public MethodReference_lf_primaryContext methodReference_lf_primary() {
		MethodReference_lf_primaryContext _localctx = new MethodReference_lf_primaryContext(Context, State);
		EnterRule(_localctx, 400, RULE_methodReference_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2479; Match(COLONCOLON);
			State = 2481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2480; typeArguments();
				}
			}

			State = 2483; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReference_lfno_primaryContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(Java8Parser.COLONCOLON, 0); }
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public ITerminalNode SUPER() { return GetToken(Java8Parser.SUPER, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(Java8Parser.DOT, 0); }
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(Java8Parser.NEW, 0); }
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReference_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMethodReference_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMethodReference_lfno_primary(this);
		}
	}

	[RuleVersion(0)]
	public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
		MethodReference_lfno_primaryContext _localctx = new MethodReference_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 402, RULE_methodReference_lfno_primary);
		int _la;
		try {
			State = 2525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2485; expressionName();
				State = 2486; Match(COLONCOLON);
				State = 2488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2487; typeArguments();
					}
				}

				State = 2490; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2492; referenceType();
				State = 2493; Match(COLONCOLON);
				State = 2495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2494; typeArguments();
					}
				}

				State = 2497; Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2499; Match(SUPER);
				State = 2500; Match(COLONCOLON);
				State = 2502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2501; typeArguments();
					}
				}

				State = 2504; Match(Identifier);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2505; typeName();
				State = 2506; Match(DOT);
				State = 2507; Match(SUPER);
				State = 2508; Match(COLONCOLON);
				State = 2510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2509; typeArguments();
					}
				}

				State = 2512; Match(Identifier);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2514; classType();
				State = 2515; Match(COLONCOLON);
				State = 2517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2516; typeArguments();
					}
				}

				State = 2519; Match(NEW);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2521; arrayType();
				State = 2522; Match(COLONCOLON);
				State = 2523; Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationExpressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(Java8Parser.NEW, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public DimExprsContext dimExprs() {
			return GetRuleContext<DimExprsContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ArrayCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterArrayCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitArrayCreationExpression(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationExpressionContext arrayCreationExpression() {
		ArrayCreationExpressionContext _localctx = new ArrayCreationExpressionContext(Context, State);
		EnterRule(_localctx, 404, RULE_arrayCreationExpression);
		try {
			State = 2549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2527; Match(NEW);
				State = 2528; primitiveType();
				State = 2529; dimExprs();
				State = 2531;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
				case 1:
					{
					State = 2530; dims();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2533; Match(NEW);
				State = 2534; classOrInterfaceType();
				State = 2535; dimExprs();
				State = 2537;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
				case 1:
					{
					State = 2536; dims();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2539; Match(NEW);
				State = 2540; primitiveType();
				State = 2541; dims();
				State = 2542; arrayInitializer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2544; Match(NEW);
				State = 2545; classOrInterfaceType();
				State = 2546; dims();
				State = 2547; arrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprsContext : ParserRuleContext {
		public DimExprContext[] dimExpr() {
			return GetRuleContexts<DimExprContext>();
		}
		public DimExprContext dimExpr(int i) {
			return GetRuleContext<DimExprContext>(i);
		}
		public DimExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExprs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterDimExprs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitDimExprs(this);
		}
	}

	[RuleVersion(0)]
	public DimExprsContext dimExprs() {
		DimExprsContext _localctx = new DimExprsContext(Context, State);
		EnterRule(_localctx, 406, RULE_dimExprs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2551; dimExpr();
			State = 2555;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,289,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2552; dimExpr();
					}
					} 
				}
				State = 2557;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,289,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprContext : ParserRuleContext {
		public ITerminalNode LBRACK() { return GetToken(Java8Parser.LBRACK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RBRACK() { return GetToken(Java8Parser.RBRACK, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterDimExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitDimExpr(this);
		}
	}

	[RuleVersion(0)]
	public DimExprContext dimExpr() {
		DimExprContext _localctx = new DimExprContext(Context, State);
		EnterRule(_localctx, 408, RULE_dimExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 2558; annotation();
				}
				}
				State = 2563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2564; Match(LBRACK);
			State = 2565; expression();
			State = 2566; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 410, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2568; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 412, RULE_expression);
		try {
			State = 2572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2570; lambdaExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2571; assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		public ITerminalNode ARROW() { return GetToken(Java8Parser.ARROW, 0); }
		public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 414, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2574; lambdaParameters();
			State = 2575; Match(ARROW);
			State = 2576; lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public InferredFormalParameterListContext inferredFormalParameterList() {
			return GetRuleContext<InferredFormalParameterListContext>(0);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterLambdaParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitLambdaParameters(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
		EnterRule(_localctx, 416, RULE_lambdaParameters);
		int _la;
		try {
			State = 2588;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2578; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2579; Match(LPAREN);
				State = 2581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
					{
					State = 2580; formalParameterList();
					}
				}

				State = 2583; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2584; Match(LPAREN);
				State = 2585; inferredFormalParameterList();
				State = 2586; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InferredFormalParameterListContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Java8Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Java8Parser.COMMA, i);
		}
		public InferredFormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inferredFormalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInferredFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInferredFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public InferredFormalParameterListContext inferredFormalParameterList() {
		InferredFormalParameterListContext _localctx = new InferredFormalParameterListContext(Context, State);
		EnterRule(_localctx, 418, RULE_inferredFormalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2590; Match(Identifier);
			State = 2595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2591; Match(COMMA);
				State = 2592; Match(Identifier);
				}
				}
				State = 2597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterLambdaBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitLambdaBody(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 420, RULE_lambdaBody);
		try {
			State = 2600;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2598; expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2599; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 422, RULE_assignmentExpression);
		try {
			State = 2604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2602; conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2603; assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public LeftHandSideContext leftHandSide() {
			return GetRuleContext<LeftHandSideContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 424, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2606; leftHandSide();
			State = 2607; assignmentOperator();
			State = 2608; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftHandSideContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public LeftHandSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftHandSide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterLeftHandSide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitLeftHandSide(this);
		}
	}

	[RuleVersion(0)]
	public LeftHandSideContext leftHandSide() {
		LeftHandSideContext _localctx = new LeftHandSideContext(Context, State);
		EnterRule(_localctx, 426, RULE_leftHandSide);
		try {
			State = 2613;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2610; expressionName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2611; fieldAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2612; arrayAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(Java8Parser.ASSIGN, 0); }
		public ITerminalNode MUL_ASSIGN() { return GetToken(Java8Parser.MUL_ASSIGN, 0); }
		public ITerminalNode DIV_ASSIGN() { return GetToken(Java8Parser.DIV_ASSIGN, 0); }
		public ITerminalNode MOD_ASSIGN() { return GetToken(Java8Parser.MOD_ASSIGN, 0); }
		public ITerminalNode ADD_ASSIGN() { return GetToken(Java8Parser.ADD_ASSIGN, 0); }
		public ITerminalNode SUB_ASSIGN() { return GetToken(Java8Parser.SUB_ASSIGN, 0); }
		public ITerminalNode LSHIFT_ASSIGN() { return GetToken(Java8Parser.LSHIFT_ASSIGN, 0); }
		public ITerminalNode RSHIFT_ASSIGN() { return GetToken(Java8Parser.RSHIFT_ASSIGN, 0); }
		public ITerminalNode URSHIFT_ASSIGN() { return GetToken(Java8Parser.URSHIFT_ASSIGN, 0); }
		public ITerminalNode AND_ASSIGN() { return GetToken(Java8Parser.AND_ASSIGN, 0); }
		public ITerminalNode XOR_ASSIGN() { return GetToken(Java8Parser.XOR_ASSIGN, 0); }
		public ITerminalNode OR_ASSIGN() { return GetToken(Java8Parser.OR_ASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 428, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2615;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ASSIGN - 66)) | (1L << (ADD_ASSIGN - 66)) | (1L << (SUB_ASSIGN - 66)) | (1L << (MUL_ASSIGN - 66)) | (1L << (DIV_ASSIGN - 66)) | (1L << (AND_ASSIGN - 66)) | (1L << (OR_ASSIGN - 66)) | (1L << (XOR_ASSIGN - 66)) | (1L << (MOD_ASSIGN - 66)) | (1L << (LSHIFT_ASSIGN - 66)) | (1L << (RSHIFT_ASSIGN - 66)) | (1L << (URSHIFT_ASSIGN - 66)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ITerminalNode QUESTION() { return GetToken(Java8Parser.QUESTION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(Java8Parser.COLON, 0); }
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 430, RULE_conditionalExpression);
		try {
			State = 2624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2617; conditionalOrExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2618; conditionalOrExpression(0);
				State = 2619; Match(QUESTION);
				State = 2620; expression();
				State = 2621; Match(COLON);
				State = 2622; conditionalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ITerminalNode OR() { return GetToken(Java8Parser.OR, 0); }
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		return conditionalOrExpression(0);
	}

	private ConditionalOrExpressionContext conditionalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, _parentState);
		ConditionalOrExpressionContext _prevctx = _localctx;
		int _startState = 432;
		EnterRecursionRule(_localctx, 432, RULE_conditionalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2627; conditionalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2634;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
					State = 2629;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2630; Match(OR);
					State = 2631; conditionalAndExpression(0);
					}
					} 
				}
				State = 2636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ITerminalNode AND() { return GetToken(Java8Parser.AND, 0); }
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		return conditionalAndExpression(0);
	}

	private ConditionalAndExpressionContext conditionalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, _parentState);
		ConditionalAndExpressionContext _prevctx = _localctx;
		int _startState = 434;
		EnterRecursionRule(_localctx, 434, RULE_conditionalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2638; inclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2645;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,300,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
					State = 2640;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2641; Match(AND);
					State = 2642; inclusiveOrExpression(0);
					}
					} 
				}
				State = 2647;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,300,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ITerminalNode BITOR() { return GetToken(Java8Parser.BITOR, 0); }
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 436;
		EnterRecursionRule(_localctx, 436, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2649; exclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2656;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,301,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 2651;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2652; Match(BITOR);
					State = 2653; exclusiveOrExpression(0);
					}
					} 
				}
				State = 2658;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,301,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ITerminalNode CARET() { return GetToken(Java8Parser.CARET, 0); }
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 438;
		EnterRecursionRule(_localctx, 438, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2660; andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2667;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,302,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 2662;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2663; Match(CARET);
					State = 2664; andExpression(0);
					}
					} 
				}
				State = 2669;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,302,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ITerminalNode BITAND() { return GetToken(Java8Parser.BITAND, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 440;
		EnterRecursionRule(_localctx, 440, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2671; equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2678;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,303,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 2673;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2674; Match(BITAND);
					State = 2675; equalityExpression(0);
					}
					} 
				}
				State = 2680;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,303,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(Java8Parser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(Java8Parser.NOTEQUAL, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 442;
		EnterRecursionRule(_localctx, 442, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2682; relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2692;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,305,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2690;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2684;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2685; Match(EQUAL);
						State = 2686; relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2687;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2688; Match(NOTEQUAL);
						State = 2689; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 2694;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,305,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ITerminalNode LT() { return GetToken(Java8Parser.LT, 0); }
		public ITerminalNode GT() { return GetToken(Java8Parser.GT, 0); }
		public ITerminalNode LE() { return GetToken(Java8Parser.LE, 0); }
		public ITerminalNode GE() { return GetToken(Java8Parser.GE, 0); }
		public ITerminalNode INSTANCEOF() { return GetToken(Java8Parser.INSTANCEOF, 0); }
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 444;
		EnterRecursionRule(_localctx, 444, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2696; shiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2715;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,307,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2713;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2698;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 2699; Match(LT);
						State = 2700; shiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2701;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 2702; Match(GT);
						State = 2703; shiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2704;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2705; Match(LE);
						State = 2706; shiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2707;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2708; Match(GE);
						State = 2709; shiftExpression(0);
						}
						break;
					case 5:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2710;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2711; Match(INSTANCEOF);
						State = 2712; referenceType();
						}
						break;
					}
					} 
				}
				State = 2717;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,307,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public ITerminalNode[] LT() { return GetTokens(Java8Parser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(Java8Parser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(Java8Parser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(Java8Parser.GT, i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		return shiftExpression(0);
	}

	private ShiftExpressionContext shiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 446;
		EnterRecursionRule(_localctx, 446, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2719; additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2736;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,309,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2734;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
					case 1:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2721;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2722; Match(LT);
						State = 2723; Match(LT);
						State = 2724; additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2725;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2726; Match(GT);
						State = 2727; Match(GT);
						State = 2728; additiveExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2729;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2730; Match(GT);
						State = 2731; Match(GT);
						State = 2732; Match(GT);
						State = 2733; additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 2738;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,309,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(Java8Parser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(Java8Parser.SUB, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 448;
		EnterRecursionRule(_localctx, 448, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2740; multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2750;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,311,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2748;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2742;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2743; Match(ADD);
						State = 2744; multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2745;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2746; Match(SUB);
						State = 2747; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 2752;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,311,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(Java8Parser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(Java8Parser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(Java8Parser.MOD, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 450;
		EnterRecursionRule(_localctx, 450, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2754; unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2767;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,313,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2765;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2756;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2757; Match(MUL);
						State = 2758; unaryExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2759;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2760; Match(DIV);
						State = 2761; unaryExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2762;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2763; Match(MOD);
						State = 2764; unaryExpression();
						}
						break;
					}
					} 
				}
				State = 2769;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,313,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(Java8Parser.ADD, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(Java8Parser.SUB, 0); }
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 452, RULE_unaryExpression);
		try {
			State = 2777;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2770; preIncrementExpression();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2771; preDecrementExpression();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2772; Match(ADD);
				State = 2773; unaryExpression();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2774; Match(SUB);
				State = 2775; unaryExpression();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2776; unaryExpressionNotPlusMinus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIncrementExpressionContext : ParserRuleContext {
		public ITerminalNode INC() { return GetToken(Java8Parser.INC, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIncrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
	}

	[RuleVersion(0)]
	public PreIncrementExpressionContext preIncrementExpression() {
		PreIncrementExpressionContext _localctx = new PreIncrementExpressionContext(Context, State);
		EnterRule(_localctx, 454, RULE_preIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2779; Match(INC);
			State = 2780; unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreDecrementExpressionContext : ParserRuleContext {
		public ITerminalNode DEC() { return GetToken(Java8Parser.DEC, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preDecrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPreDecrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPreDecrementExpression(this);
		}
	}

	[RuleVersion(0)]
	public PreDecrementExpressionContext preDecrementExpression() {
		PreDecrementExpressionContext _localctx = new PreDecrementExpressionContext(Context, State);
		EnterRule(_localctx, 456, RULE_preDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2782; Match(DEC);
			State = 2783; unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionNotPlusMinusContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ITerminalNode TILDE() { return GetToken(Java8Parser.TILDE, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ITerminalNode BANG() { return GetToken(Java8Parser.BANG, 0); }
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpressionNotPlusMinus; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionNotPlusMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionNotPlusMinus(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
		UnaryExpressionNotPlusMinusContext _localctx = new UnaryExpressionNotPlusMinusContext(Context, State);
		EnterRule(_localctx, 458, RULE_unaryExpressionNotPlusMinus);
		try {
			State = 2791;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2785; postfixExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2786; Match(TILDE);
				State = 2787; unaryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2788; Match(BANG);
				State = 2789; unaryExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2790; castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PostIncrementExpression_lf_postfixExpressionContext[] postIncrementExpression_lf_postfixExpression() {
			return GetRuleContexts<PostIncrementExpression_lf_postfixExpressionContext>();
		}
		public PostIncrementExpression_lf_postfixExpressionContext postIncrementExpression_lf_postfixExpression(int i) {
			return GetRuleContext<PostIncrementExpression_lf_postfixExpressionContext>(i);
		}
		public PostDecrementExpression_lf_postfixExpressionContext[] postDecrementExpression_lf_postfixExpression() {
			return GetRuleContexts<PostDecrementExpression_lf_postfixExpressionContext>();
		}
		public PostDecrementExpression_lf_postfixExpressionContext postDecrementExpression_lf_postfixExpression(int i) {
			return GetRuleContext<PostDecrementExpression_lf_postfixExpressionContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 460, RULE_postfixExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2795;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,316,Context) ) {
			case 1:
				{
				State = 2793; primary();
				}
				break;
			case 2:
				{
				State = 2794; expressionName();
				}
				break;
			}
			State = 2801;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,318,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 2799;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INC:
						{
						State = 2797; postIncrementExpression_lf_postfixExpression();
						}
						break;
					case DEC:
						{
						State = 2798; postDecrementExpression_lf_postfixExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2803;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,318,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ITerminalNode INC() { return GetToken(Java8Parser.INC, 0); }
		public PostIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpressionContext postIncrementExpression() {
		PostIncrementExpressionContext _localctx = new PostIncrementExpressionContext(Context, State);
		EnterRule(_localctx, 462, RULE_postIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2804; postfixExpression();
			State = 2805; Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpression_lf_postfixExpressionContext : ParserRuleContext {
		public ITerminalNode INC() { return GetToken(Java8Parser.INC, 0); }
		public PostIncrementExpression_lf_postfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression_lf_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression_lf_postfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression_lf_postfixExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpression_lf_postfixExpressionContext postIncrementExpression_lf_postfixExpression() {
		PostIncrementExpression_lf_postfixExpressionContext _localctx = new PostIncrementExpression_lf_postfixExpressionContext(Context, State);
		EnterRule(_localctx, 464, RULE_postIncrementExpression_lf_postfixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2807; Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ITerminalNode DEC() { return GetToken(Java8Parser.DEC, 0); }
		public PostDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpressionContext postDecrementExpression() {
		PostDecrementExpressionContext _localctx = new PostDecrementExpressionContext(Context, State);
		EnterRule(_localctx, 466, RULE_postDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2809; postfixExpression();
			State = 2810; Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpression_lf_postfixExpressionContext : ParserRuleContext {
		public ITerminalNode DEC() { return GetToken(Java8Parser.DEC, 0); }
		public PostDecrementExpression_lf_postfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression_lf_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression_lf_postfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression_lf_postfixExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpression_lf_postfixExpressionContext postDecrementExpression_lf_postfixExpression() {
		PostDecrementExpression_lf_postfixExpressionContext _localctx = new PostDecrementExpression_lf_postfixExpressionContext(Context, State);
		EnterRule(_localctx, 468, RULE_postDecrementExpression_lf_postfixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2812; Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(Java8Parser.LPAREN, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(Java8Parser.RPAREN, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8ParserListener typedListener = listener as IJava8ParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 470, RULE_castExpression);
		int _la;
		try {
			State = 2841;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,321,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2814; Match(LPAREN);
				State = 2815; primitiveType();
				State = 2816; Match(RPAREN);
				State = 2817; unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2819; Match(LPAREN);
				State = 2820; referenceType();
				State = 2824;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 2821; additionalBound();
					}
					}
					State = 2826;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2827; Match(RPAREN);
				State = 2828; unaryExpressionNotPlusMinus();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2830; Match(LPAREN);
				State = 2831; referenceType();
				State = 2835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 2832; additionalBound();
					}
					}
					State = 2837;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2838; Match(RPAREN);
				State = 2839; lambdaExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return packageName_sempred((PackageNameContext)_localctx, predIndex);
		case 27: return packageOrTypeName_sempred((PackageOrTypeNameContext)_localctx, predIndex);
		case 30: return ambiguousName_sempred((AmbiguousNameContext)_localctx, predIndex);
		case 216: return conditionalOrExpression_sempred((ConditionalOrExpressionContext)_localctx, predIndex);
		case 217: return conditionalAndExpression_sempred((ConditionalAndExpressionContext)_localctx, predIndex);
		case 218: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);
		case 219: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);
		case 220: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 221: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 222: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 223: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);
		case 224: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 225: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool packageName_sempred(PackageNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool packageOrTypeName_sempred(PackageOrTypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool ambiguousName_sempred(AmbiguousNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalOrExpression_sempred(ConditionalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalAndExpression_sempred(ConditionalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 3);
		case 21: return Precpred(Context, 2);
		case 22: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'm', '\xB1E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\a', '\x3', '\x1DE', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x1E1', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', 
		'\x3', '\x1E5', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1E8', '\v', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x1EB', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x1EF', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x1F8', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x1FC', '\n', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x200', '\n', 
		'\b', '\f', '\b', '\xE', '\b', '\x203', '\v', '\b', '\x3', '\t', '\a', 
		'\t', '\x206', '\n', '\t', '\f', '\t', '\xE', '\t', '\x209', '\v', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x20D', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\x212', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\x215', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x219', '\n', '\t', '\x5', '\t', '\x21B', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', '\x21F', '\n', '\n', '\f', '\n', '\xE', '\n', '\x222', 
		'\v', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x226', '\n', '\n', 
		'\x3', '\v', '\a', '\v', '\x229', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\x22C', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x230', '\n', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\a', '\xF', '\x239', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\x23C', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x249', 
		'\n', '\x10', '\x3', '\x11', '\a', '\x11', '\x24C', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\x24F', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\x254', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\x257', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\x25B', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x25E', '\v', '\x11', 
		'\x3', '\x12', '\a', '\x12', '\x261', '\n', '\x12', '\f', '\x12', '\xE', 
		'\x12', '\x264', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x268', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x271', 
		'\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x274', '\v', '\x14', '\x5', 
		'\x14', '\x276', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x282', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\x285', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x289', '\n', '\x18', '\x3', '\x19', '\a', '\x19', '\x28C', 
		'\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x28F', '\v', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x293', '\n', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x299', '\n', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\a', '\x1B', '\x2A1', '\n', '\x1B', '\f', '\x1B', 
		'\xE', '\x1B', '\x2A4', '\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x2AB', '\n', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\a', '\x1D', '\x2B3', '\n', '\x1D', '\f', '\x1D', '\xE', 
		'\x1D', '\x2B6', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x2BD', '\n', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\a', ' ', '\x2C7', '\n', ' ', '\f', ' ', '\xE', 
		' ', '\x2CA', '\v', ' ', '\x3', '!', '\x5', '!', '\x2CD', '\n', '!', '\x3', 
		'!', '\a', '!', '\x2D0', '\n', '!', '\f', '!', '\xE', '!', '\x2D3', '\v', 
		'!', '\x3', '!', '\a', '!', '\x2D6', '\n', '!', '\f', '!', '\xE', '!', 
		'\x2D9', '\v', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\a', '\"', '\x2DE', 
		'\n', '\"', '\f', '\"', '\xE', '\"', '\x2E1', '\v', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x2ED', '\n', '$', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x30A', '\n', ')', 
		'\x3', '*', '\x3', '*', '\x5', '*', '\x30E', '\n', '*', '\x3', '+', '\a', 
		'+', '\x311', '\n', '+', '\f', '+', '\xE', '+', '\x314', '\v', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x5', '+', '\x319', '\n', '+', '\x3', '+', 
		'\x5', '+', '\x31C', '\n', '+', '\x3', '+', '\x5', '+', '\x31F', '\n', 
		'+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x32B', 
		'\n', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\a', '.', '\x334', '\n', '.', '\f', '.', '\xE', 
		'.', '\x337', '\v', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\a', '\x31', '\x342', '\n', '\x31', '\f', '\x31', '\xE', '\x31', '\x345', 
		'\v', '\x31', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x349', '\n', 
		'\x32', '\f', '\x32', '\xE', '\x32', '\x34C', '\v', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x5', '\x33', '\x354', '\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x35B', '\n', '\x34', 
		'\x3', '\x35', '\a', '\x35', '\x35E', '\n', '\x35', '\f', '\x35', '\xE', 
		'\x35', '\x361', '\v', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', 
		'\x36F', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\a', 
		'\x37', '\x374', '\n', '\x37', '\f', '\x37', '\xE', '\x37', '\x377', '\v', 
		'\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x37C', 
		'\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x380', '\n', 
		'\x39', '\x3', ':', '\x3', ':', '\x5', ':', '\x384', '\n', ':', '\x3', 
		';', '\x3', ';', '\x5', ';', '\x388', '\n', ';', '\x3', '<', '\x3', '<', 
		'\x5', '<', '\x38C', '\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', 
		'=', '\x391', '\n', '=', '\x3', '>', '\x3', '>', '\x5', '>', '\x395', 
		'\n', '>', '\x3', '>', '\x3', '>', '\a', '>', '\x399', '\n', '>', '\f', 
		'>', '\xE', '>', '\x39C', '\v', '>', '\x3', '?', '\x3', '?', '\x5', '?', 
		'\x3A0', '\n', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\a', '?', '\x3A5', 
		'\n', '?', '\f', '?', '\xE', '?', '\x3A8', '\v', '?', '\x3', '?', '\x3', 
		'?', '\x5', '?', '\x3AC', '\n', '?', '\x5', '?', '\x3AE', '\n', '?', '\x3', 
		'@', '\x3', '@', '\a', '@', '\x3B2', '\n', '@', '\f', '@', '\xE', '@', 
		'\x3B5', '\v', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x3B9', '\n', 
		'@', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x3BD', '\n', '\x41', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x3D0', '\n', '\x46', '\x3', 
		'G', '\a', 'G', '\x3D3', '\n', 'G', '\f', 'G', '\xE', 'G', '\x3D6', '\v', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x5', 'H', '\x3E5', '\n', 'H', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x5', 'I', '\x3EA', '\n', 'I', '\x3', 'I', '\x3', 'I', '\a', 
		'I', '\x3EE', '\n', 'I', '\f', 'I', '\xE', 'I', '\x3F1', '\v', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x3F6', '\n', 'I', '\x5', 'I', 
		'\x3F8', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x3FC', '\n', 
		'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x401', '\n', 'K', 
		'\x3', 'K', '\x3', 'K', '\x5', 'K', '\x405', '\n', 'K', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x40D', 
		'\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\a', 'M', '\x412', '\n', 
		'M', '\f', 'M', '\xE', 'M', '\x415', '\v', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\a', 'M', '\x41A', '\n', 'M', '\f', 'M', '\xE', 'M', '\x41D', 
		'\v', 'M', '\x5', 'M', '\x41F', '\n', 'M', '\x3', 'N', '\a', 'N', '\x422', 
		'\n', 'N', '\f', 'N', '\xE', 'N', '\x425', '\v', 'N', '\x3', 'N', '\x3', 
		'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x42C', '\n', 'O', 
		'\x3', 'P', '\a', 'P', '\x42F', '\n', 'P', '\f', 'P', '\xE', 'P', '\x432', 
		'\v', 'P', '\x3', 'P', '\x3', 'P', '\a', 'P', '\x436', '\n', 'P', '\f', 
		'P', '\xE', 'P', '\x439', '\v', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', 
		'\x3', 'P', '\x5', 'P', '\x43F', '\n', 'P', '\x3', 'Q', '\a', 'Q', '\x442', 
		'\n', 'Q', '\f', 'Q', '\xE', 'Q', '\x445', '\v', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'Q', '\x5', 'Q', '\x44A', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\a', 'S', '\x454', '\n', 'S', '\f', 'S', '\xE', 'S', '\x457', '\v', 'S', 
		'\x3', 'T', '\x3', 'T', '\x5', 'T', '\x45B', '\n', 'T', '\x3', 'U', '\x3', 
		'U', '\x5', 'U', '\x45F', '\n', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'W', 
		'\x3', 'W', '\x3', 'W', '\x3', 'X', '\a', 'X', '\x467', '\n', 'X', '\f', 
		'X', '\xE', 'X', '\x46A', '\v', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', 
		'\x46E', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x5', 'Y', '\x476', '\n', 'Y', '\x3', 'Z', '\x5', 'Z', 
		'\x479', '\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x47E', 
		'\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', '[', '\x3', '[', '\x3', '\\', 
		'\x3', '\\', '\x5', '\\', '\x486', '\n', '\\', '\x3', '\\', '\x5', '\\', 
		'\x489', '\n', '\\', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x5', ']', 
		'\x48E', '\n', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x5', ']', '\x493', 
		'\n', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x5', ']', '\x498', '\n', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x5', ']', '\x49D', '\n', ']', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x5', ']', 
		'\x4A4', '\n', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x5', ']', '\x4A9', 
		'\n', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', 
		'\x3', ']', '\x5', ']', '\x4B1', '\n', ']', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x5', ']', '\x4B6', '\n', ']', '\x3', ']', '\x3', ']', '\x3', ']', 
		'\x5', ']', '\x4BB', '\n', ']', '\x3', '^', '\a', '^', '\x4BE', '\n', 
		'^', '\f', '^', '\xE', '^', '\x4C1', '\v', '^', '\x3', '^', '\x3', '^', 
		'\x3', '^', '\x5', '^', '\x4C6', '\n', '^', '\x3', '^', '\x3', '^', '\x3', 
		'_', '\x3', '_', '\x5', '_', '\x4CC', '\n', '_', '\x3', '_', '\x5', '_', 
		'\x4CF', '\n', '_', '\x3', '_', '\x5', '_', '\x4D2', '\n', '_', '\x3', 
		'_', '\x3', '_', '\x3', '`', '\x3', '`', '\x3', '`', '\a', '`', '\x4D9', 
		'\n', '`', '\f', '`', '\xE', '`', '\x4DC', '\v', '`', '\x3', '\x61', '\a', 
		'\x61', '\x4DF', '\n', '\x61', '\f', '\x61', '\xE', '\x61', '\x4E2', '\v', 
		'\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', '\x4E7', 
		'\n', '\x61', '\x3', '\x61', '\x5', '\x61', '\x4EA', '\n', '\x61', '\x3', 
		'\x61', '\x5', '\x61', '\x4ED', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x63', '\x3', '\x63', '\a', '\x63', '\x4F3', '\n', '\x63', '\f', 
		'\x63', '\xE', '\x63', '\x4F6', '\v', '\x63', '\x3', '\x64', '\x3', '\x64', 
		'\x5', '\x64', '\x4FA', '\n', '\x64', '\x3', '\x65', '\a', '\x65', '\x4FD', 
		'\n', '\x65', '\f', '\x65', '\xE', '\x65', '\x500', '\v', '\x65', '\x3', 
		'\x65', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', '\x505', '\n', '\x65', 
		'\x3', '\x65', '\x5', '\x65', '\x508', '\n', '\x65', '\x3', '\x65', '\x3', 
		'\x65', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x513', '\n', '\x66', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x3', 'h', '\a', 'h', 
		'\x51A', '\n', 'h', '\f', 'h', '\xE', 'h', '\x51D', '\v', 'h', '\x3', 
		'h', '\x3', 'h', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 
		'i', '\x5', 'i', '\x526', '\n', 'i', '\x3', 'j', '\a', 'j', '\x529', '\n', 
		'j', '\f', 'j', '\xE', 'j', '\x52C', '\v', 'j', '\x3', 'j', '\x3', 'j', 
		'\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', 
		'\x5', 'k', '\x536', '\n', 'k', '\x3', 'l', '\a', 'l', '\x539', '\n', 
		'l', '\f', 'l', '\xE', 'l', '\x53C', '\v', 'l', '\x3', 'l', '\x3', 'l', 
		'\x3', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', 
		'\x3', 'm', '\x5', 'm', '\x547', '\n', 'm', '\x3', 'n', '\a', 'n', '\x54A', 
		'\n', 'n', '\f', 'n', '\xE', 'n', '\x54D', '\v', 'n', '\x3', 'n', '\x3', 
		'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'o', '\x3', 'o', '\a', 
		'o', '\x556', '\n', 'o', '\f', 'o', '\xE', 'o', '\x559', '\v', 'o', '\x3', 
		'o', '\x3', 'o', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 
		'p', '\x5', 'p', '\x562', '\n', 'p', '\x3', 'q', '\a', 'q', '\x565', '\n', 
		'q', '\f', 'q', '\xE', 'q', '\x568', '\v', 'q', '\x3', 'q', '\x3', 'q', 
		'\x3', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', '\x56F', '\n', 'q', '\x3', 
		'q', '\x5', 'q', '\x572', '\n', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'r', 
		'\x3', 'r', '\x3', 'r', '\x5', 'r', '\x579', '\n', 'r', '\x3', 's', '\x3', 
		's', '\x3', 's', '\x3', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\x581', 
		'\n', 't', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', 
		'\x587', '\n', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'v', '\x3', 'v', '\x3', 
		'v', '\a', 'v', '\x58E', '\n', 'v', '\f', 'v', '\xE', 'v', '\x591', '\v', 
		'v', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'x', '\x3', 
		'x', '\x3', 'x', '\x5', 'x', '\x59A', '\n', 'x', '\x3', 'y', '\x3', 'y', 
		'\x5', 'y', '\x59E', '\n', 'y', '\x3', 'y', '\x5', 'y', '\x5A1', '\n', 
		'y', '\x3', 'y', '\x3', 'y', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\a', 
		'z', '\x5A8', '\n', 'z', '\f', 'z', '\xE', 'z', '\x5AB', '\v', 'z', '\x3', 
		'{', '\x3', '{', '\x3', '{', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', 
		'|', '\x3', '|', '\x3', '|', '\x3', '}', '\x3', '}', '\x5', '}', '\x5B8', 
		'\n', '}', '\x3', '}', '\x5', '}', '\x5BB', '\n', '}', '\x3', '}', '\x3', 
		'}', '\x3', '~', '\x3', '~', '\x3', '~', '\a', '~', '\x5C2', '\n', '~', 
		'\f', '~', '\xE', '~', '\x5C5', '\v', '~', '\x3', '\x7F', '\x3', '\x7F', 
		'\x5', '\x7F', '\x5C9', '\n', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', 
		'\x80', '\x6', '\x80', '\x5CE', '\n', '\x80', '\r', '\x80', '\xE', '\x80', 
		'\x5CF', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x5', '\x81', '\x5D5', 
		'\n', '\x81', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x83', 
		'\a', '\x83', '\x5DB', '\n', '\x83', '\f', '\x83', '\xE', '\x83', '\x5DE', 
		'\v', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x84', 
		'\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', 
		'\x5', '\x84', '\x5E9', '\n', '\x84', '\x3', '\x85', '\x3', '\x85', '\x3', 
		'\x85', '\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\x5F0', '\n', '\x85', 
		'\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', 
		'\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', 
		'\x3', '\x86', '\x3', '\x86', '\x5', '\x86', '\x5FE', '\n', '\x86', '\x3', 
		'\x87', '\x3', '\x87', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', 
		'\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x3', 
		'\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x5', 
		'\x8B', '\x614', '\n', '\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', 
		'\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8D', '\x3', '\x8D', 
		'\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', 
		'\x3', '\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', 
		'\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8F', 
		'\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', 
		'\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x5', '\x8F', 
		'\x636', '\n', '\x8F', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', 
		'\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x91', '\x3', '\x91', '\a', 
		'\x91', '\x640', '\n', '\x91', '\f', '\x91', '\xE', '\x91', '\x643', '\v', 
		'\x91', '\x3', '\x91', '\a', '\x91', '\x646', '\n', '\x91', '\f', '\x91', 
		'\xE', '\x91', '\x649', '\v', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', 
		'\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x93', '\x3', '\x93', '\a', 
		'\x93', '\x652', '\n', '\x93', '\f', '\x93', '\xE', '\x93', '\x655', '\v', 
		'\x93', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', 
		'\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', 
		'\x94', '\x5', '\x94', '\x661', '\n', '\x94', '\x3', '\x95', '\x3', '\x95', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', 
		'\x3', '\x97', '\x3', '\x97', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', 
		'\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', 
		'\x3', '\x99', '\x3', '\x99', '\x5', '\x99', '\x67B', '\n', '\x99', '\x3', 
		'\x9A', '\x3', '\x9A', '\x5', '\x9A', '\x67F', '\n', '\x9A', '\x3', '\x9B', 
		'\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', '\x684', '\n', '\x9B', '\x3', 
		'\x9B', '\x3', '\x9B', '\x5', '\x9B', '\x688', '\n', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9B', '\x5', '\x9B', '\x68C', '\n', '\x9B', '\x3', '\x9B', '\x3', 
		'\x9B', '\x3', '\x9B', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x5', 
		'\x9C', '\x694', '\n', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x5', '\x9C', 
		'\x698', '\n', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x5', '\x9C', '\x69C', 
		'\n', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', 
		'\x3', '\x9D', '\x5', '\x9D', '\x6A3', '\n', '\x9D', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\a', '\x9F', '\x6AA', 
		'\n', '\x9F', '\f', '\x9F', '\xE', '\x9F', '\x6AD', '\v', '\x9F', '\x3', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA0', '\a', '\xA0', '\x6B2', '\n', '\xA0', 
		'\f', '\xA0', '\xE', '\xA0', '\x6B5', '\v', '\xA0', '\x3', '\xA0', '\x3', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', 
		'\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\a', '\xA1', '\x6C1', 
		'\n', '\xA1', '\f', '\xA1', '\xE', '\xA1', '\x6C4', '\v', '\xA1', '\x3', 
		'\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', 
		'\xA1', '\x3', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\x6CF', 
		'\n', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA3', '\x3', '\xA3', 
		'\x5', '\xA3', '\x6D5', '\n', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA4', '\x3', '\xA4', '\x5', '\xA4', '\x6DB', '\n', '\xA4', '\x3', '\xA4', 
		'\x3', '\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', 
		'\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x5', '\xA7', '\x6F0', '\n', 
		'\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x5', '\xA7', '\x6F5', 
		'\n', '\xA7', '\x3', '\xA8', '\x3', '\xA8', '\a', '\xA8', '\x6F9', '\n', 
		'\xA8', '\f', '\xA8', '\xE', '\xA8', '\x6FC', '\v', '\xA8', '\x3', '\xA9', 
		'\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', 
		'\x3', '\xAA', '\a', '\xAA', '\x705', '\n', '\xAA', '\f', '\xAA', '\xE', 
		'\xAA', '\x708', '\v', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\a', '\xAB', '\x710', '\n', 
		'\xAB', '\f', '\xAB', '\xE', '\xAB', '\x713', '\v', '\xAB', '\x3', '\xAC', 
		'\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', 
		'\x3', '\xAD', '\x5', '\xAD', '\x71C', '\n', '\xAD', '\x3', '\xAD', '\x5', 
		'\xAD', '\x71F', '\n', '\xAD', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', 
		'\x5', '\xAE', '\x724', '\n', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', 
		'\xAF', '\x3', '\xAF', '\x3', '\xAF', '\a', '\xAF', '\x72B', '\n', '\xAF', 
		'\f', '\xAF', '\xE', '\xAF', '\x72E', '\v', '\xAF', '\x3', '\xB0', '\a', 
		'\xB0', '\x731', '\n', '\xB0', '\f', '\xB0', '\xE', '\xB0', '\x734', '\v', 
		'\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', 
		'\xB0', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', '\x73D', '\n', '\xB1', 
		'\x3', '\xB1', '\a', '\xB1', '\x740', '\n', '\xB1', '\f', '\xB1', '\xE', 
		'\xB1', '\x743', '\v', '\xB1', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', 
		'\x3', '\xB2', '\a', '\xB2', '\x749', '\n', '\xB2', '\f', '\xB2', '\xE', 
		'\xB2', '\x74C', '\v', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', 
		'\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', 
		'\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', 
		'\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', 
		'\x3', '\xB2', '\x3', '\xB2', '\x5', '\xB2', '\x762', '\n', '\xB2', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\a', '\xB4', '\x76A', '\n', '\xB4', '\f', '\xB4', '\xE', '\xB4', 
		'\x76D', '\v', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB4', '\x5', '\xB4', '\x782', '\n', '\xB4', '\x3', '\xB5', '\x3', '\xB5', 
		'\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x5', '\xB5', '\x789', '\n', 
		'\xB5', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB7', '\x3', '\xB7', '\x3', 
		'\xB7', '\x3', '\xB7', '\x5', '\xB7', '\x791', '\n', '\xB7', '\x3', '\xB8', 
		'\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\a', '\xB8', '\x797', '\n', 
		'\xB8', '\f', '\xB8', '\xE', '\xB8', '\x79A', '\v', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', 
		'\a', '\xB8', '\x7A2', '\n', '\xB8', '\f', '\xB8', '\xE', '\xB8', '\x7A5', 
		'\v', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB8', '\x5', '\xB8', '\x7BB', '\n', '\xB8', '\x3', '\xB9', '\x3', 
		'\xB9', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\a', 
		'\xBA', '\x7C3', '\n', '\xBA', '\f', '\xBA', '\xE', '\xBA', '\x7C6', '\v', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\a', '\xBA', '\x7CE', '\n', '\xBA', '\f', '\xBA', 
		'\xE', '\xBA', '\x7D1', '\v', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x7E6', '\n', '\xBA', '\x3', '\xBB', 
		'\x3', '\xBB', '\x5', '\xBB', '\x7EA', '\n', '\xBB', '\x3', '\xBB', '\a', 
		'\xBB', '\x7ED', '\n', '\xBB', '\f', '\xBB', '\xE', '\xBB', '\x7F0', '\v', 
		'\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\a', '\xBB', '\x7F5', 
		'\n', '\xBB', '\f', '\xBB', '\xE', '\xBB', '\x7F8', '\v', '\xBB', '\x3', 
		'\xBB', '\a', '\xBB', '\x7FB', '\n', '\xBB', '\f', '\xBB', '\xE', '\xBB', 
		'\x7FE', '\v', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x801', '\n', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x805', '\n', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x809', '\n', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x80F', '\n', 
		'\xBB', '\x3', '\xBB', '\a', '\xBB', '\x812', '\n', '\xBB', '\f', '\xBB', 
		'\xE', '\xBB', '\x815', '\v', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x5', 
		'\xBB', '\x819', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', 
		'\x81D', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x821', 
		'\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x5', '\xBB', '\x827', '\n', '\xBB', '\x3', '\xBB', '\a', '\xBB', '\x82A', 
		'\n', '\xBB', '\f', '\xBB', '\xE', '\xBB', '\x82D', '\v', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x5', '\xBB', '\x831', '\n', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBB', '\x5', '\xBB', '\x835', '\n', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBB', '\x5', '\xBB', '\x839', '\n', '\xBB', '\x5', '\xBB', '\x83B', 
		'\n', '\xBB', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', 
		'\x840', '\n', '\xBC', '\x3', '\xBC', '\a', '\xBC', '\x843', '\n', '\xBC', 
		'\f', '\xBC', '\xE', '\xBC', '\x846', '\v', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x5', '\xBC', '\x84A', '\n', '\xBC', '\x3', '\xBC', '\x3', '\xBC', 
		'\x5', '\xBC', '\x84E', '\n', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', 
		'\xBC', '\x852', '\n', '\xBC', '\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', 
		'\x856', '\n', '\xBD', '\x3', '\xBD', '\a', '\xBD', '\x859', '\n', '\xBD', 
		'\f', '\xBD', '\xE', '\xBD', '\x85C', '\v', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\a', '\xBD', '\x861', '\n', '\xBD', '\f', '\xBD', 
		'\xE', '\xBD', '\x864', '\v', '\xBD', '\x3', '\xBD', '\a', '\xBD', '\x867', 
		'\n', '\xBD', '\f', '\xBD', '\xE', '\xBD', '\x86A', '\v', '\xBD', '\x3', 
		'\xBD', '\x5', '\xBD', '\x86D', '\n', '\xBD', '\x3', '\xBD', '\x3', '\xBD', 
		'\x5', '\xBD', '\x871', '\n', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x5', 
		'\xBD', '\x875', '\n', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', 
		'\x3', '\xBD', '\x5', '\xBD', '\x87B', '\n', '\xBD', '\x3', '\xBD', '\a', 
		'\xBD', '\x87E', '\n', '\xBD', '\f', '\xBD', '\xE', '\xBD', '\x881', '\v', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\x885', '\n', '\xBD', 
		'\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\x889', '\n', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x5', '\xBD', '\x88D', '\n', '\xBD', '\x5', '\xBD', 
		'\x88F', '\n', '\xBD', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x5', 
		'\xBE', '\x894', '\n', '\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x5', '\xBF', '\x8A3', '\n', '\xBF', '\x3', '\xC0', '\x3', '\xC0', '\x3', 
		'\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x5', 
		'\xC1', '\x8B1', '\n', '\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', 
		'\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', 
		'\x3', '\xC2', '\x3', '\xC2', '\x5', '\xC2', '\x8BD', '\n', '\xC2', '\x3', 
		'\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\a', 
		'\xC2', '\x8C4', '\n', '\xC2', '\f', '\xC2', '\xE', '\xC2', '\x8C7', '\v', 
		'\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', 
		'\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', 
		'\xC3', '\a', '\xC3', '\x8D3', '\n', '\xC3', '\f', '\xC3', '\xE', '\xC3', 
		'\x8D6', '\v', '\xC3', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC4', '\x5', '\xC4', '\x8E2', '\n', '\xC4', '\x3', '\xC4', 
		'\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\a', '\xC4', 
		'\x8E9', '\n', '\xC4', '\f', '\xC4', '\xE', '\xC4', '\x8EC', '\v', '\xC4', 
		'\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x8F1', '\n', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x5', '\xC5', '\x8F8', '\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', 
		'\x3', '\xC5', '\x5', '\xC5', '\x8FD', '\n', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x904', 
		'\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', 
		'\x909', '\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x910', '\n', '\xC5', '\x3', '\xC5', 
		'\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x915', '\n', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', 
		'\xC5', '\x91C', '\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', 
		'\x5', '\xC5', '\x921', '\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x929', 
		'\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', 
		'\x92E', '\n', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x932', 
		'\n', '\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', '\x936', '\n', 
		'\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', '\x93B', 
		'\n', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC7', '\x3', '\xC7', 
		'\x3', '\xC7', '\x5', '\xC7', '\x942', '\n', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x949', 
		'\n', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', 
		'\x94E', '\n', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x955', '\n', '\xC7', '\x3', '\xC7', 
		'\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x95A', '\n', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', 
		'\xC7', '\x961', '\n', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', 
		'\x5', '\xC7', '\x966', '\n', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x96E', 
		'\n', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', 
		'\x973', '\n', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x977', 
		'\n', '\xC7', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\a', '\xC8', 
		'\x97C', '\n', '\xC8', '\f', '\xC8', '\xE', '\xC8', '\x97F', '\v', '\xC8', 
		'\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x984', '\n', 
		'\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x5', '\xC9', '\x98B', '\n', '\xC9', '\x3', '\xC9', '\x3', '\xC9', 
		'\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x992', '\n', 
		'\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x5', '\xC9', '\x999', '\n', '\xC9', '\x3', '\xC9', '\x3', '\xC9', 
		'\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x5', '\xC9', 
		'\x9A1', '\n', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x9A8', '\n', '\xC9', '\x3', '\xC9', 
		'\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', 
		'\x5', '\xC9', '\x9B0', '\n', '\xC9', '\x3', '\xCA', '\x3', '\xCA', '\x5', 
		'\xCA', '\x9B4', '\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\x9BB', '\n', '\xCB', '\x3', 
		'\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', 
		'\xCB', '\x9C2', '\n', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\x9C9', '\n', '\xCB', '\x3', 
		'\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', 
		'\xCB', '\x5', '\xCB', '\x9D1', '\n', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\x9D8', '\n', 
		'\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', 
		'\xCB', '\x3', '\xCB', '\x5', '\xCB', '\x9E0', '\n', '\xCB', '\x3', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\x9E6', '\n', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', 
		'\xCC', '\x9EC', '\n', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\x9F8', '\n', '\xCC', '\x3', 
		'\xCD', '\x3', '\xCD', '\a', '\xCD', '\x9FC', '\n', '\xCD', '\f', '\xCD', 
		'\xE', '\xCD', '\x9FF', '\v', '\xCD', '\x3', '\xCE', '\a', '\xCE', '\xA02', 
		'\n', '\xCE', '\f', '\xCE', '\xE', '\xCE', '\xA05', '\v', '\xCE', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCF', '\x3', 
		'\xCF', '\x3', '\xD0', '\x3', '\xD0', '\x5', '\xD0', '\xA0F', '\n', '\xD0', 
		'\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD2', 
		'\x3', '\xD2', '\x3', '\xD2', '\x5', '\xD2', '\xA18', '\n', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x5', 
		'\xD2', '\xA1F', '\n', '\xD2', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', 
		'\a', '\xD3', '\xA24', '\n', '\xD3', '\f', '\xD3', '\xE', '\xD3', '\xA27', 
		'\v', '\xD3', '\x3', '\xD4', '\x3', '\xD4', '\x5', '\xD4', '\xA2B', '\n', 
		'\xD4', '\x3', '\xD5', '\x3', '\xD5', '\x5', '\xD5', '\xA2F', '\n', '\xD5', 
		'\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD7', 
		'\x3', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\xA38', '\n', '\xD7', '\x3', 
		'\xD8', '\x3', '\xD8', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', 
		'\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x5', '\xD9', '\xA43', 
		'\n', '\xD9', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', 
		'\x3', '\xDA', '\x3', '\xDA', '\a', '\xDA', '\xA4B', '\n', '\xDA', '\f', 
		'\xDA', '\xE', '\xDA', '\xA4E', '\v', '\xDA', '\x3', '\xDB', '\x3', '\xDB', 
		'\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\a', '\xDB', 
		'\xA56', '\n', '\xDB', '\f', '\xDB', '\xE', '\xDB', '\xA59', '\v', '\xDB', 
		'\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', 
		'\x3', '\xDC', '\a', '\xDC', '\xA61', '\n', '\xDC', '\f', '\xDC', '\xE', 
		'\xDC', '\xA64', '\v', '\xDC', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\a', '\xDD', '\xA6C', '\n', 
		'\xDD', '\f', '\xDD', '\xE', '\xDD', '\xA6F', '\v', '\xDD', '\x3', '\xDE', 
		'\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', 
		'\a', '\xDE', '\xA77', '\n', '\xDE', '\f', '\xDE', '\xE', '\xDE', '\xA7A', 
		'\v', '\xDE', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', 
		'\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', 
		'\a', '\xDF', '\xA85', '\n', '\xDF', '\f', '\xDF', '\xE', '\xDF', '\xA88', 
		'\v', '\xDF', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', 
		'\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', 
		'\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', 
		'\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\a', '\xE0', 
		'\xA9C', '\n', '\xE0', '\f', '\xE0', '\xE', '\xE0', '\xA9F', '\v', '\xE0', 
		'\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', 
		'\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', 
		'\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', 
		'\x3', '\xE1', '\a', '\xE1', '\xAB1', '\n', '\xE1', '\f', '\xE1', '\xE', 
		'\xE1', '\xAB4', '\v', '\xE1', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x3', '\xE2', '\a', '\xE2', '\xABF', '\n', '\xE2', '\f', '\xE2', '\xE', 
		'\xE2', '\xAC2', '\v', '\xE2', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\a', '\xE3', 
		'\xAD0', '\n', '\xE3', '\f', '\xE3', '\xE', '\xE3', '\xAD3', '\v', '\xE3', 
		'\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', 
		'\x3', '\xE4', '\x3', '\xE4', '\x5', '\xE4', '\xADC', '\n', '\xE4', '\x3', 
		'\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE6', '\x3', '\xE6', '\x3', 
		'\xE6', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x5', '\xE7', '\xAEA', '\n', '\xE7', '\x3', '\xE8', 
		'\x3', '\xE8', '\x5', '\xE8', '\xAEE', '\n', '\xE8', '\x3', '\xE8', '\x3', 
		'\xE8', '\a', '\xE8', '\xAF2', '\n', '\xE8', '\f', '\xE8', '\xE', '\xE8', 
		'\xAF5', '\v', '\xE8', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', 
		'\xEA', '\x3', '\xEA', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', 
		'\xEC', '\x3', '\xEC', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', 
		'\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\a', 
		'\xED', '\xB09', '\n', '\xED', '\f', '\xED', '\xE', '\xED', '\xB0C', '\v', 
		'\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', 
		'\xED', '\x3', '\xED', '\a', '\xED', '\xB14', '\n', '\xED', '\f', '\xED', 
		'\xE', '\xED', '\xB17', '\v', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', 
		'\xED', '\x5', '\xED', '\xB1C', '\n', '\xED', '\x3', '\xED', '\x2', '\xF', 
		'\x34', '\x38', '>', '\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', 
		'\x1BE', '\x1C0', '\x1C2', '\x1C4', '\xEE', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', 
		'\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', 
		'\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', 
		'\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', 
		'\xDC', '\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', 
		'\xEE', '\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', 
		'\x100', '\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', 
		'\x110', '\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', 
		'\x120', '\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', 
		'\x130', '\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', 
		'\x140', '\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', 
		'\x150', '\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', 
		'\x160', '\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', 
		'\x170', '\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', 
		'\x180', '\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', 
		'\x190', '\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E', 
		'\x1A0', '\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', 
		'\x1B0', '\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', 
		'\x1C0', '\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', 
		'\x1D0', '\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x2', '\x6', '\x3', '\x2', 
		'\x35', ':', '\a', '\x2', '\a', '\a', '\n', '\n', '\x1D', '\x1D', '\x1F', 
		'\x1F', '\'', '\'', '\x4', '\x2', '\x10', '\x10', '\x16', '\x16', '\x4', 
		'\x2', '\x44', '\x44', ']', 'g', '\x2', '\xC0F', '\x2', '\x1DA', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x1EE', '\x3', '\x2', '\x2', '\x2', '\b', '\x1F0', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\f', '\x1F7', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x21A', '\x3', '\x2', '\x2', '\x2', '\x12', '\x21C', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x16', '\x231', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x233', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x235', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x23A', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x248', '\x3', '\x2', '\x2', '\x2', ' ', '\x24D', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x262', '\x3', '\x2', '\x2', '\x2', '$', '\x269', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x275', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x277', '\x3', '\x2', '\x2', '\x2', '*', '\x27A', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x27E', '\x3', '\x2', '\x2', '\x2', '.', '\x288', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x28D', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x298', '\x3', '\x2', '\x2', '\x2', '\x34', '\x29A', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x2AA', '\x3', '\x2', '\x2', '\x2', '\x38', '\x2AC', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x2BC', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x2BE', '\x3', '\x2', '\x2', '\x2', '>', '\x2C0', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x42', '\x2DF', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x2E6', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x2EC', '\x3', '\x2', '\x2', '\x2', 'H', '\x2EE', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x2F2', '\x3', '\x2', '\x2', '\x2', 'L', '\x2F8', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x2FF', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x309', '\x3', '\x2', '\x2', '\x2', 'R', '\x30D', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x312', '\x3', '\x2', '\x2', '\x2', 'V', '\x32A', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x32C', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x330', '\x3', '\x2', '\x2', '\x2', '\\', '\x338', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x33B', '\x3', '\x2', '\x2', '\x2', '`', '\x33E', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x346', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x353', '\x3', '\x2', '\x2', '\x2', '\x66', '\x35A', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x35F', '\x3', '\x2', '\x2', '\x2', 'j', '\x36E', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x370', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x378', '\x3', '\x2', '\x2', '\x2', 'p', '\x37D', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x383', '\x3', '\x2', '\x2', '\x2', 't', '\x387', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x38B', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x390', '\x3', '\x2', '\x2', '\x2', 'z', '\x394', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x3AD', '\x3', '\x2', '\x2', '\x2', '~', '\x3AF', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x3BA', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x3BE', '\x3', '\x2', '\x2', '\x2', '\x84', '\x3C0', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x3C2', '\x3', '\x2', '\x2', '\x2', '\x88', '\x3C4', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x3CF', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x3E4', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x3F7', '\x3', '\x2', '\x2', '\x2', '\x92', '\x3FB', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x3FD', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x40C', '\x3', '\x2', '\x2', '\x2', '\x98', '\x41E', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x423', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x42B', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x43E', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x443', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x44D', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x450', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x45A', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\x45E', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\x460', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x462', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x468', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x475', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\x478', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\x481', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x483', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x4BA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x4BF', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\x4C9', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\x4D5', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x4E0', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x4EE', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x4F0', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\x4F9', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\x4FE', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x512', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\x514', '\x3', '\x2', '\x2', '\x2', '\xCE', '\x517', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\x525', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\x52A', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x535', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\x53A', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x546', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\x54B', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\x553', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x561', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\x566', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x578', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\x57A', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\x580', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x582', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\x58A', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x592', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\x599', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\x59B', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x5A4', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\x5AC', '\x3', '\x2', '\x2', '\x2', '\xF6', '\x5AF', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\x5B5', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\x5BE', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x5C6', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\x5CD', '\x3', '\x2', '\x2', '\x2', '\x100', '\x5D4', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x5D6', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x106', '\x5E8', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x5EF', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x5FD', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x5FF', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x601', '\x3', '\x2', '\x2', '\x2', '\x110', '\x605', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x609', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x613', '\x3', '\x2', '\x2', '\x2', '\x116', '\x615', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x61B', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x623', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x635', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x637', '\x3', '\x2', '\x2', '\x2', '\x120', '\x63D', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x64C', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x64F', '\x3', '\x2', '\x2', '\x2', '\x126', '\x660', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x662', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x664', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x66A', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x670', '\x3', '\x2', '\x2', '\x2', '\x130', '\x67A', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x67E', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x680', '\x3', '\x2', '\x2', '\x2', '\x136', '\x690', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x6A2', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x6A4', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x6A6', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x6AE', '\x3', '\x2', '\x2', '\x2', '\x140', '\x6BD', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x6CC', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x6D2', '\x3', '\x2', '\x2', '\x2', '\x146', '\x6D8', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x6DE', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x6E2', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x6F4', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x6F6', '\x3', '\x2', '\x2', '\x2', '\x150', '\x6FD', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x706', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x70C', '\x3', '\x2', '\x2', '\x2', '\x156', '\x714', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x717', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x720', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x727', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x732', '\x3', '\x2', '\x2', '\x2', '\x160', '\x73C', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x761', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x763', '\x3', '\x2', '\x2', '\x2', '\x166', '\x781', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x788', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x78A', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x790', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x7BA', '\x3', '\x2', '\x2', '\x2', '\x170', '\x7BC', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x7E5', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x83A', '\x3', '\x2', '\x2', '\x2', '\x176', '\x83C', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x88E', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x893', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x8A2', '\x3', '\x2', '\x2', 
		'\x2', '\x17E', '\x8A4', '\x3', '\x2', '\x2', '\x2', '\x180', '\x8B0', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x8BC', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x8C8', '\x3', '\x2', '\x2', '\x2', '\x186', '\x8E1', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x931', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x933', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x976', '\x3', '\x2', '\x2', 
		'\x2', '\x18E', '\x978', '\x3', '\x2', '\x2', '\x2', '\x190', '\x9AF', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x9B1', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x9DF', '\x3', '\x2', '\x2', '\x2', '\x196', '\x9F7', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\x9F9', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\xA03', '\x3', '\x2', '\x2', '\x2', '\x19C', '\xA0A', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\xA0E', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\xA10', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\xA1E', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\xA20', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\xA2A', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\xA2E', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		'\xA30', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\xA37', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\xA39', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\xA42', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2', '\xA44', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\xA4F', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\xA5A', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\xA65', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\xA70', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\xA7B', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\xA89', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\xAA0', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\xAB5', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\xAC3', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\xADB', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\xADD', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\xAE0', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\xAE9', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\xAED', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\xAF6', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', '\xAF9', '\x3', '\x2', '\x2', '\x2', 
		'\x1D4', '\xAFB', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\xAFE', '\x3', 
		'\x2', '\x2', '\x2', '\x1D8', '\xB1B', '\x3', '\x2', '\x2', '\x2', '\x1DA', 
		'\x1DB', '\t', '\x2', '\x2', '\x2', '\x1DB', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', '\x1DE', '\x5', '\xE6', 't', '\x2', '\x1DD', '\x1DC', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1E1', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\x3', 
		'\x2', '\x2', '\x2', '\x1E0', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E1', 
		'\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1EB', '\x5', '\x6', '\x4', 
		'\x2', '\x1E3', '\x1E5', '\x5', '\xE6', 't', '\x2', '\x1E4', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E8', '\x3', '\x2', '\x2', '\x2', 
		'\x1E6', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', 
		'\x2', '\x2', '\x2', '\x1E7', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1E8', 
		'\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EB', '\a', '\x5', '\x2', 
		'\x2', '\x1EA', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1E6', 
		'\x3', '\x2', '\x2', '\x2', '\x1EB', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x1EC', '\x1EF', '\x5', '\b', '\x5', '\x2', '\x1ED', '\x1EF', '\x5', 
		'\n', '\x6', '\x2', '\x1EE', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x1F0', '\x1F1', '\t', '\x3', '\x2', '\x2', '\x1F1', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x1F2', '\x1F3', '\t', '\x4', '\x2', '\x2', '\x1F3', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F8', '\x5', '\xE', '\b', 
		'\x2', '\x1F5', '\x1F8', '\x5', '\x1C', '\xF', '\x2', '\x1F6', '\x1F8', 
		'\x5', '\x1E', '\x10', '\x2', '\x1F7', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F6', '\x3', 
		'\x2', '\x2', '\x2', '\x1F8', '\r', '\x3', '\x2', '\x2', '\x2', '\x1F9', 
		'\x1FC', '\x5', '\x14', '\v', '\x2', '\x1FA', '\x1FC', '\x5', '\x1A', 
		'\xE', '\x2', '\x1FB', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FA', 
		'\x3', '\x2', '\x2', '\x2', '\x1FC', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'\x1FD', '\x200', '\x5', '\x12', '\n', '\x2', '\x1FE', '\x200', '\x5', 
		'\x18', '\r', '\x2', '\x1FF', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FF', 
		'\x1FE', '\x3', '\x2', '\x2', '\x2', '\x200', '\x203', '\x3', '\x2', '\x2', 
		'\x2', '\x201', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x203', '\x201', '\x3', '\x2', '\x2', '\x2', '\x204', '\x206', '\x5', 
		'\xE6', 't', '\x2', '\x205', '\x204', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x209', '\x3', '\x2', '\x2', '\x2', '\x207', '\x205', '\x3', '\x2', '\x2', 
		'\x2', '\x207', '\x208', '\x3', '\x2', '\x2', '\x2', '\x208', '\x20A', 
		'\x3', '\x2', '\x2', '\x2', '\x209', '\x207', '\x3', '\x2', '\x2', '\x2', 
		'\x20A', '\x20C', '\a', 'h', '\x2', '\x2', '\x20B', '\x20D', '\x5', '*', 
		'\x16', '\x2', '\x20C', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x21B', '\x3', '\x2', '\x2', 
		'\x2', '\x20E', '\x20F', '\x5', '\xE', '\b', '\x2', '\x20F', '\x213', 
		'\a', '\x43', '\x2', '\x2', '\x210', '\x212', '\x5', '\xE6', 't', '\x2', 
		'\x211', '\x210', '\x3', '\x2', '\x2', '\x2', '\x212', '\x215', '\x3', 
		'\x2', '\x2', '\x2', '\x213', '\x211', '\x3', '\x2', '\x2', '\x2', '\x213', 
		'\x214', '\x3', '\x2', '\x2', '\x2', '\x214', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x215', '\x213', '\x3', '\x2', '\x2', '\x2', '\x216', '\x218', 
		'\a', 'h', '\x2', '\x2', '\x217', '\x219', '\x5', '*', '\x16', '\x2', 
		'\x218', '\x217', '\x3', '\x2', '\x2', '\x2', '\x218', '\x219', '\x3', 
		'\x2', '\x2', '\x2', '\x219', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21A', 
		'\x207', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x20E', '\x3', '\x2', '\x2', 
		'\x2', '\x21B', '\x11', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x220', 
		'\a', '\x43', '\x2', '\x2', '\x21D', '\x21F', '\x5', '\xE6', 't', '\x2', 
		'\x21E', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x222', '\x3', 
		'\x2', '\x2', '\x2', '\x220', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x221', '\x3', '\x2', '\x2', '\x2', '\x221', '\x223', '\x3', '\x2', '\x2', 
		'\x2', '\x222', '\x220', '\x3', '\x2', '\x2', '\x2', '\x223', '\x225', 
		'\a', 'h', '\x2', '\x2', '\x224', '\x226', '\x5', '*', '\x16', '\x2', 
		'\x225', '\x224', '\x3', '\x2', '\x2', '\x2', '\x225', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x226', '\x13', '\x3', '\x2', '\x2', '\x2', '\x227', 
		'\x229', '\x5', '\xE6', 't', '\x2', '\x228', '\x227', '\x3', '\x2', '\x2', 
		'\x2', '\x229', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x228', 
		'\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', '\x3', '\x2', '\x2', '\x2', 
		'\x22B', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22A', '\x3', 
		'\x2', '\x2', '\x2', '\x22D', '\x22F', '\a', 'h', '\x2', '\x2', '\x22E', 
		'\x230', '\x5', '*', '\x16', '\x2', '\x22F', '\x22E', '\x3', '\x2', '\x2', 
		'\x2', '\x22F', '\x230', '\x3', '\x2', '\x2', '\x2', '\x230', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x231', '\x232', '\x5', '\x10', '\t', '\x2', 
		'\x232', '\x17', '\x3', '\x2', '\x2', '\x2', '\x233', '\x234', '\x5', 
		'\x12', '\n', '\x2', '\x234', '\x19', '\x3', '\x2', '\x2', '\x2', '\x235', 
		'\x236', '\x5', '\x14', '\v', '\x2', '\x236', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x239', '\x5', '\xE6', 't', '\x2', '\x238', '\x237', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x23C', '\x3', '\x2', '\x2', '\x2', 
		'\x23A', '\x238', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x23B', '\x3', 
		'\x2', '\x2', '\x2', '\x23B', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x23A', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\a', 'h', '\x2', 
		'\x2', '\x23E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', 
		'\x5', '\x4', '\x3', '\x2', '\x240', '\x241', '\x5', ' ', '\x11', '\x2', 
		'\x241', '\x249', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', '\x5', 
		'\xE', '\b', '\x2', '\x243', '\x244', '\x5', ' ', '\x11', '\x2', '\x244', 
		'\x249', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', '\x5', '\x1C', 
		'\xF', '\x2', '\x246', '\x247', '\x5', ' ', '\x11', '\x2', '\x247', '\x249', 
		'\x3', '\x2', '\x2', '\x2', '\x248', '\x23F', '\x3', '\x2', '\x2', '\x2', 
		'\x248', '\x242', '\x3', '\x2', '\x2', '\x2', '\x248', '\x245', '\x3', 
		'\x2', '\x2', '\x2', '\x249', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x24A', 
		'\x24C', '\x5', '\xE6', 't', '\x2', '\x24B', '\x24A', '\x3', '\x2', '\x2', 
		'\x2', '\x24C', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', '\x3', '\x2', '\x2', '\x2', 
		'\x24E', '\x250', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x24D', '\x3', 
		'\x2', '\x2', '\x2', '\x250', '\x251', '\a', '?', '\x2', '\x2', '\x251', 
		'\x25C', '\a', '@', '\x2', '\x2', '\x252', '\x254', '\x5', '\xE6', 't', 
		'\x2', '\x253', '\x252', '\x3', '\x2', '\x2', '\x2', '\x254', '\x257', 
		'\x3', '\x2', '\x2', '\x2', '\x255', '\x253', '\x3', '\x2', '\x2', '\x2', 
		'\x255', '\x256', '\x3', '\x2', '\x2', '\x2', '\x256', '\x258', '\x3', 
		'\x2', '\x2', '\x2', '\x257', '\x255', '\x3', '\x2', '\x2', '\x2', '\x258', 
		'\x259', '\a', '?', '\x2', '\x2', '\x259', '\x25B', '\a', '@', '\x2', 
		'\x2', '\x25A', '\x255', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25E', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x25A', '\x3', '\x2', '\x2', '\x2', 
		'\x25C', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25D', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x25E', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x261', 
		'\x5', '$', '\x13', '\x2', '\x260', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x264', '\x3', '\x2', '\x2', '\x2', '\x262', '\x260', '\x3', 
		'\x2', '\x2', '\x2', '\x262', '\x263', '\x3', '\x2', '\x2', '\x2', '\x263', 
		'\x265', '\x3', '\x2', '\x2', '\x2', '\x264', '\x262', '\x3', '\x2', '\x2', 
		'\x2', '\x265', '\x267', '\a', 'h', '\x2', '\x2', '\x266', '\x268', '\x5', 
		'&', '\x14', '\x2', '\x267', '\x266', '\x3', '\x2', '\x2', '\x2', '\x267', 
		'\x268', '\x3', '\x2', '\x2', '\x2', '\x268', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x269', '\x26A', '\x5', '\xE6', 't', '\x2', '\x26A', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x26B', '\x26C', '\a', '\x13', '\x2', '\x2', '\x26C', 
		'\x276', '\x5', '\x1C', '\xF', '\x2', '\x26D', '\x26E', '\a', '\x13', 
		'\x2', '\x2', '\x26E', '\x272', '\x5', '\xE', '\b', '\x2', '\x26F', '\x271', 
		'\x5', '(', '\x15', '\x2', '\x270', '\x26F', '\x3', '\x2', '\x2', '\x2', 
		'\x271', '\x274', '\x3', '\x2', '\x2', '\x2', '\x272', '\x270', '\x3', 
		'\x2', '\x2', '\x2', '\x272', '\x273', '\x3', '\x2', '\x2', '\x2', '\x273', 
		'\x276', '\x3', '\x2', '\x2', '\x2', '\x274', '\x272', '\x3', '\x2', '\x2', 
		'\x2', '\x275', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x275', '\x26D', 
		'\x3', '\x2', '\x2', '\x2', '\x276', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x277', '\x278', '\a', 'W', '\x2', '\x2', '\x278', '\x279', '\x5', '\x16', 
		'\f', '\x2', '\x279', ')', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27B', 
		'\a', '\x46', '\x2', '\x2', '\x27B', '\x27C', '\x5', ',', '\x17', '\x2', 
		'\x27C', '\x27D', '\a', '\x45', '\x2', '\x2', '\x27D', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x27E', '\x283', '\x5', '.', '\x18', '\x2', '\x27F', '\x280', 
		'\a', '\x42', '\x2', '\x2', '\x280', '\x282', '\x5', '.', '\x18', '\x2', 
		'\x281', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x282', '\x285', '\x3', 
		'\x2', '\x2', '\x2', '\x283', '\x281', '\x3', '\x2', '\x2', '\x2', '\x283', 
		'\x284', '\x3', '\x2', '\x2', '\x2', '\x284', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x285', '\x283', '\x3', '\x2', '\x2', '\x2', '\x286', '\x289', 
		'\x5', '\f', '\a', '\x2', '\x287', '\x289', '\x5', '\x30', '\x19', '\x2', 
		'\x288', '\x286', '\x3', '\x2', '\x2', '\x2', '\x288', '\x287', '\x3', 
		'\x2', '\x2', '\x2', '\x289', '/', '\x3', '\x2', '\x2', '\x2', '\x28A', 
		'\x28C', '\x5', '\xE6', 't', '\x2', '\x28B', '\x28A', '\x3', '\x2', '\x2', 
		'\x2', '\x28C', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28B', 
		'\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', '\x3', '\x2', '\x2', '\x2', 
		'\x28E', '\x290', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x28D', '\x3', 
		'\x2', '\x2', '\x2', '\x290', '\x292', '\a', 'I', '\x2', '\x2', '\x291', 
		'\x293', '\x5', '\x32', '\x1A', '\x2', '\x292', '\x291', '\x3', '\x2', 
		'\x2', '\x2', '\x292', '\x293', '\x3', '\x2', '\x2', '\x2', '\x293', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x294', '\x295', '\a', '\x13', '\x2', '\x2', 
		'\x295', '\x299', '\x5', '\f', '\a', '\x2', '\x296', '\x297', '\a', '*', 
		'\x2', '\x2', '\x297', '\x299', '\x5', '\f', '\a', '\x2', '\x298', '\x294', 
		'\x3', '\x2', '\x2', '\x2', '\x298', '\x296', '\x3', '\x2', '\x2', '\x2', 
		'\x299', '\x33', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x29B', '\b', '\x1B', 
		'\x1', '\x2', '\x29B', '\x29C', '\a', 'h', '\x2', '\x2', '\x29C', '\x2A2', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', '\f', '\x3', '\x2', '\x2', 
		'\x29E', '\x29F', '\a', '\x43', '\x2', '\x2', '\x29F', '\x2A1', '\a', 
		'h', '\x2', '\x2', '\x2A0', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A0', '\x3', '\x2', '\x2', 
		'\x2', '\x2A2', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A2', '\x3', '\x2', '\x2', '\x2', 
		'\x2A5', '\x2AB', '\a', 'h', '\x2', '\x2', '\x2A6', '\x2A7', '\x5', '\x38', 
		'\x1D', '\x2', '\x2A7', '\x2A8', '\a', '\x43', '\x2', '\x2', '\x2A8', 
		'\x2A9', '\a', 'h', '\x2', '\x2', '\x2A9', '\x2AB', '\x3', '\x2', '\x2', 
		'\x2', '\x2AA', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2A6', 
		'\x3', '\x2', '\x2', '\x2', '\x2AB', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x2AC', '\x2AD', '\b', '\x1D', '\x1', '\x2', '\x2AD', '\x2AE', '\a', 
		'h', '\x2', '\x2', '\x2AE', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2AF', 
		'\x2B0', '\f', '\x3', '\x2', '\x2', '\x2B0', '\x2B1', '\a', '\x43', '\x2', 
		'\x2', '\x2B1', '\x2B3', '\a', 'h', '\x2', '\x2', '\x2B2', '\x2AF', '\x3', 
		'\x2', '\x2', '\x2', '\x2B3', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B4', 
		'\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', '\x3', '\x2', '\x2', 
		'\x2', '\x2B5', '\x39', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B4', 
		'\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2BD', '\a', 'h', '\x2', '\x2', 
		'\x2B8', '\x2B9', '\x5', '>', ' ', '\x2', '\x2B9', '\x2BA', '\a', '\x43', 
		'\x2', '\x2', '\x2BA', '\x2BB', '\a', 'h', '\x2', '\x2', '\x2BB', '\x2BD', 
		'\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2B7', '\x3', '\x2', '\x2', '\x2', 
		'\x2BC', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2BD', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x2BE', '\x2BF', '\a', 'h', '\x2', '\x2', '\x2BF', '=', 
		'\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\b', ' ', '\x1', '\x2', 
		'\x2C1', '\x2C2', '\a', 'h', '\x2', '\x2', '\x2C2', '\x2C8', '\x3', '\x2', 
		'\x2', '\x2', '\x2C3', '\x2C4', '\f', '\x3', '\x2', '\x2', '\x2C4', '\x2C5', 
		'\a', '\x43', '\x2', '\x2', '\x2C5', '\x2C7', '\a', 'h', '\x2', '\x2', 
		'\x2C6', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2CA', '\x3', 
		'\x2', '\x2', '\x2', '\x2C8', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C8', 
		'\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2C9', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x2CA', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2CD', 
		'\x5', '\x42', '\"', '\x2', '\x2CC', '\x2CB', '\x3', '\x2', '\x2', '\x2', 
		'\x2CC', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2D1', '\x3', 
		'\x2', '\x2', '\x2', '\x2CE', '\x2D0', '\x5', '\x46', '$', '\x2', '\x2CF', 
		'\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D3', '\x3', '\x2', '\x2', 
		'\x2', '\x2D1', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D2', 
		'\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D7', '\x3', '\x2', '\x2', '\x2', 
		'\x2D3', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D6', '\x5', 
		'P', ')', '\x2', '\x2D5', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D5', '\x3', '\x2', '\x2', 
		'\x2', '\x2D7', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2DA', 
		'\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2D7', '\x3', '\x2', '\x2', '\x2', 
		'\x2DA', '\x2DB', '\a', '\x2', '\x2', '\x3', '\x2DB', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x2DC', '\x2DE', '\x5', '\x44', '#', '\x2', '\x2DD', '\x2DC', 
		'\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2E1', '\x3', '\x2', '\x2', '\x2', 
		'\x2DF', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E0', '\x3', 
		'\x2', '\x2', '\x2', '\x2E0', '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2E1', 
		'\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2E3', '\a', '\"', '\x2', 
		'\x2', '\x2E3', '\x2E4', '\x5', '\x34', '\x1B', '\x2', '\x2E4', '\x2E5', 
		'\a', '\x41', '\x2', '\x2', '\x2E5', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x2E6', '\x2E7', '\x5', '\xE6', 't', '\x2', '\x2E7', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x2E8', '\x2ED', '\x5', 'H', '%', '\x2', '\x2E9', '\x2ED', 
		'\x5', 'J', '&', '\x2', '\x2EA', '\x2ED', '\x5', 'L', '\'', '\x2', '\x2EB', 
		'\x2ED', '\x5', 'N', '(', '\x2', '\x2EC', '\x2E8', '\x3', '\x2', '\x2', 
		'\x2', '\x2EC', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2EA', 
		'\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2EB', '\x3', '\x2', '\x2', '\x2', 
		'\x2ED', 'G', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2EF', '\a', '\x1B', 
		'\x2', '\x2', '\x2EF', '\x2F0', '\x5', '\x36', '\x1C', '\x2', '\x2F0', 
		'\x2F1', '\a', '\x41', '\x2', '\x2', '\x2F1', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x2F2', '\x2F3', '\a', '\x1B', '\x2', '\x2', '\x2F3', '\x2F4', 
		'\x5', '\x38', '\x1D', '\x2', '\x2F4', '\x2F5', '\a', '\x43', '\x2', '\x2', 
		'\x2F5', '\x2F6', '\a', 'U', '\x2', '\x2', '\x2F6', '\x2F7', '\a', '\x41', 
		'\x2', '\x2', '\x2F7', 'K', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', 
		'\a', '\x1B', '\x2', '\x2', '\x2F9', '\x2FA', '\a', '(', '\x2', '\x2', 
		'\x2FA', '\x2FB', '\x5', '\x36', '\x1C', '\x2', '\x2FB', '\x2FC', '\a', 
		'\x43', '\x2', '\x2', '\x2FC', '\x2FD', '\a', 'h', '\x2', '\x2', '\x2FD', 
		'\x2FE', '\a', '\x41', '\x2', '\x2', '\x2FE', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x2FF', '\x300', '\a', '\x1B', '\x2', '\x2', '\x300', '\x301', 
		'\a', '(', '\x2', '\x2', '\x301', '\x302', '\x5', '\x36', '\x1C', '\x2', 
		'\x302', '\x303', '\a', '\x43', '\x2', '\x2', '\x303', '\x304', '\a', 
		'U', '\x2', '\x2', '\x304', '\x305', '\a', '\x41', '\x2', '\x2', '\x305', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x306', '\x30A', '\x5', 'R', '*', '\x2', 
		'\x307', '\x30A', '\x5', '\xC6', '\x64', '\x2', '\x308', '\x30A', '\a', 
		'\x41', '\x2', '\x2', '\x309', '\x306', '\x3', '\x2', '\x2', '\x2', '\x309', 
		'\x307', '\x3', '\x2', '\x2', '\x2', '\x309', '\x308', '\x3', '\x2', '\x2', 
		'\x2', '\x30A', 'Q', '\x3', '\x2', '\x2', '\x2', '\x30B', '\x30E', '\x5', 
		'T', '+', '\x2', '\x30C', '\x30E', '\x5', '\xBA', '^', '\x2', '\x30D', 
		'\x30B', '\x3', '\x2', '\x2', '\x2', '\x30D', '\x30C', '\x3', '\x2', '\x2', 
		'\x2', '\x30E', 'S', '\x3', '\x2', '\x2', '\x2', '\x30F', '\x311', '\x5', 
		'V', ',', '\x2', '\x310', '\x30F', '\x3', '\x2', '\x2', '\x2', '\x311', 
		'\x314', '\x3', '\x2', '\x2', '\x2', '\x312', '\x310', '\x3', '\x2', '\x2', 
		'\x2', '\x312', '\x313', '\x3', '\x2', '\x2', '\x2', '\x313', '\x315', 
		'\x3', '\x2', '\x2', '\x2', '\x314', '\x312', '\x3', '\x2', '\x2', '\x2', 
		'\x315', '\x316', '\a', '\v', '\x2', '\x2', '\x316', '\x318', '\a', 'h', 
		'\x2', '\x2', '\x317', '\x319', '\x5', 'X', '-', '\x2', '\x318', '\x317', 
		'\x3', '\x2', '\x2', '\x2', '\x318', '\x319', '\x3', '\x2', '\x2', '\x2', 
		'\x319', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x31C', '\x5', 
		'\\', '/', '\x2', '\x31B', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x31B', 
		'\x31C', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31E', '\x3', '\x2', '\x2', 
		'\x2', '\x31D', '\x31F', '\x5', '^', '\x30', '\x2', '\x31E', '\x31D', 
		'\x3', '\x2', '\x2', '\x2', '\x31E', '\x31F', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x320', '\x3', '\x2', '\x2', '\x2', '\x320', '\x321', '\x5', 
		'\x62', '\x32', '\x2', '\x321', 'U', '\x3', '\x2', '\x2', '\x2', '\x322', 
		'\x32B', '\x5', '\xE6', 't', '\x2', '\x323', '\x32B', '\a', '%', '\x2', 
		'\x2', '\x324', '\x32B', '\a', '$', '\x2', '\x2', '\x325', '\x32B', '\a', 
		'#', '\x2', '\x2', '\x326', '\x32B', '\a', '\x3', '\x2', '\x2', '\x327', 
		'\x32B', '\a', '(', '\x2', '\x2', '\x328', '\x32B', '\a', '\x14', '\x2', 
		'\x2', '\x329', '\x32B', '\a', ')', '\x2', '\x2', '\x32A', '\x322', '\x3', 
		'\x2', '\x2', '\x2', '\x32A', '\x323', '\x3', '\x2', '\x2', '\x2', '\x32A', 
		'\x324', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x325', '\x3', '\x2', '\x2', 
		'\x2', '\x32A', '\x326', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x327', 
		'\x3', '\x2', '\x2', '\x2', '\x32A', '\x328', '\x3', '\x2', '\x2', '\x2', 
		'\x32A', '\x329', '\x3', '\x2', '\x2', '\x2', '\x32B', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x32C', '\x32D', '\a', '\x46', '\x2', '\x2', '\x32D', '\x32E', 
		'\x5', 'Z', '.', '\x2', '\x32E', '\x32F', '\a', '\x45', '\x2', '\x2', 
		'\x32F', 'Y', '\x3', '\x2', '\x2', '\x2', '\x330', '\x335', '\x5', '\"', 
		'\x12', '\x2', '\x331', '\x332', '\a', '\x42', '\x2', '\x2', '\x332', 
		'\x334', '\x5', '\"', '\x12', '\x2', '\x333', '\x331', '\x3', '\x2', '\x2', 
		'\x2', '\x334', '\x337', '\x3', '\x2', '\x2', '\x2', '\x335', '\x333', 
		'\x3', '\x2', '\x2', '\x2', '\x335', '\x336', '\x3', '\x2', '\x2', '\x2', 
		'\x336', '[', '\x3', '\x2', '\x2', '\x2', '\x337', '\x335', '\x3', '\x2', 
		'\x2', '\x2', '\x338', '\x339', '\a', '\x13', '\x2', '\x2', '\x339', '\x33A', 
		'\x5', '\x10', '\t', '\x2', '\x33A', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x33B', '\x33C', '\a', '\x1A', '\x2', '\x2', '\x33C', '\x33D', '\x5', 
		'`', '\x31', '\x2', '\x33D', '_', '\x3', '\x2', '\x2', '\x2', '\x33E', 
		'\x343', '\x5', '\x16', '\f', '\x2', '\x33F', '\x340', '\a', '\x42', '\x2', 
		'\x2', '\x340', '\x342', '\x5', '\x16', '\f', '\x2', '\x341', '\x33F', 
		'\x3', '\x2', '\x2', '\x2', '\x342', '\x345', '\x3', '\x2', '\x2', '\x2', 
		'\x343', '\x341', '\x3', '\x2', '\x2', '\x2', '\x343', '\x344', '\x3', 
		'\x2', '\x2', '\x2', '\x344', '\x61', '\x3', '\x2', '\x2', '\x2', '\x345', 
		'\x343', '\x3', '\x2', '\x2', '\x2', '\x346', '\x34A', '\a', '=', '\x2', 
		'\x2', '\x347', '\x349', '\x5', '\x64', '\x33', '\x2', '\x348', '\x347', 
		'\x3', '\x2', '\x2', '\x2', '\x349', '\x34C', '\x3', '\x2', '\x2', '\x2', 
		'\x34A', '\x348', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x34B', '\x3', 
		'\x2', '\x2', '\x2', '\x34B', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x34C', 
		'\x34A', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x34E', '\a', '>', '\x2', 
		'\x2', '\x34E', '\x63', '\x3', '\x2', '\x2', '\x2', '\x34F', '\x354', 
		'\x5', '\x66', '\x34', '\x2', '\x350', '\x354', '\x5', '\xAA', 'V', '\x2', 
		'\x351', '\x354', '\x5', '\xAC', 'W', '\x2', '\x352', '\x354', '\x5', 
		'\xAE', 'X', '\x2', '\x353', '\x34F', '\x3', '\x2', '\x2', '\x2', '\x353', 
		'\x350', '\x3', '\x2', '\x2', '\x2', '\x353', '\x351', '\x3', '\x2', '\x2', 
		'\x2', '\x353', '\x352', '\x3', '\x2', '\x2', '\x2', '\x354', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x355', '\x35B', '\x5', 'h', '\x35', '\x2', 
		'\x356', '\x35B', '\x5', '\x8C', 'G', '\x2', '\x357', '\x35B', '\x5', 
		'R', '*', '\x2', '\x358', '\x35B', '\x5', '\xC6', '\x64', '\x2', '\x359', 
		'\x35B', '\a', '\x41', '\x2', '\x2', '\x35A', '\x355', '\x3', '\x2', '\x2', 
		'\x2', '\x35A', '\x356', '\x3', '\x2', '\x2', '\x2', '\x35A', '\x357', 
		'\x3', '\x2', '\x2', '\x2', '\x35A', '\x358', '\x3', '\x2', '\x2', '\x2', 
		'\x35A', '\x359', '\x3', '\x2', '\x2', '\x2', '\x35B', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x35C', '\x35E', '\x5', 'j', '\x36', '\x2', '\x35D', '\x35C', 
		'\x3', '\x2', '\x2', '\x2', '\x35E', '\x361', '\x3', '\x2', '\x2', '\x2', 
		'\x35F', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x35F', '\x360', '\x3', 
		'\x2', '\x2', '\x2', '\x360', '\x362', '\x3', '\x2', '\x2', '\x2', '\x361', 
		'\x35F', '\x3', '\x2', '\x2', '\x2', '\x362', '\x363', '\x5', 't', ';', 
		'\x2', '\x363', '\x364', '\x5', 'l', '\x37', '\x2', '\x364', '\x365', 
		'\a', '\x41', '\x2', '\x2', '\x365', 'i', '\x3', '\x2', '\x2', '\x2', 
		'\x366', '\x36F', '\x5', '\xE6', 't', '\x2', '\x367', '\x36F', '\a', '%', 
		'\x2', '\x2', '\x368', '\x36F', '\a', '$', '\x2', '\x2', '\x369', '\x36F', 
		'\a', '#', '\x2', '\x2', '\x36A', '\x36F', '\a', '(', '\x2', '\x2', '\x36B', 
		'\x36F', '\a', '\x14', '\x2', '\x2', '\x36C', '\x36F', '\a', '\x30', '\x2', 
		'\x2', '\x36D', '\x36F', '\a', '\x33', '\x2', '\x2', '\x36E', '\x366', 
		'\x3', '\x2', '\x2', '\x2', '\x36E', '\x367', '\x3', '\x2', '\x2', '\x2', 
		'\x36E', '\x368', '\x3', '\x2', '\x2', '\x2', '\x36E', '\x369', '\x3', 
		'\x2', '\x2', '\x2', '\x36E', '\x36A', '\x3', '\x2', '\x2', '\x2', '\x36E', 
		'\x36B', '\x3', '\x2', '\x2', '\x2', '\x36E', '\x36C', '\x3', '\x2', '\x2', 
		'\x2', '\x36E', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36F', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x370', '\x375', '\x5', 'n', '\x38', '\x2', '\x371', 
		'\x372', '\a', '\x42', '\x2', '\x2', '\x372', '\x374', '\x5', 'n', '\x38', 
		'\x2', '\x373', '\x371', '\x3', '\x2', '\x2', '\x2', '\x374', '\x377', 
		'\x3', '\x2', '\x2', '\x2', '\x375', '\x373', '\x3', '\x2', '\x2', '\x2', 
		'\x375', '\x376', '\x3', '\x2', '\x2', '\x2', '\x376', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x377', '\x375', '\x3', '\x2', '\x2', '\x2', '\x378', '\x37B', 
		'\x5', 'p', '\x39', '\x2', '\x379', '\x37A', '\a', '\x44', '\x2', '\x2', 
		'\x37A', '\x37C', '\x5', 'r', ':', '\x2', '\x37B', '\x379', '\x3', '\x2', 
		'\x2', '\x2', '\x37B', '\x37C', '\x3', '\x2', '\x2', '\x2', '\x37C', 'o', 
		'\x3', '\x2', '\x2', '\x2', '\x37D', '\x37F', '\a', 'h', '\x2', '\x2', 
		'\x37E', '\x380', '\x5', ' ', '\x11', '\x2', '\x37F', '\x37E', '\x3', 
		'\x2', '\x2', '\x2', '\x37F', '\x380', '\x3', '\x2', '\x2', '\x2', '\x380', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x381', '\x384', '\x5', '\x19E', '\xD0', 
		'\x2', '\x382', '\x384', '\x5', '\xF8', '}', '\x2', '\x383', '\x381', 
		'\x3', '\x2', '\x2', '\x2', '\x383', '\x382', '\x3', '\x2', '\x2', '\x2', 
		'\x384', 's', '\x3', '\x2', '\x2', '\x2', '\x385', '\x388', '\x5', 'v', 
		'<', '\x2', '\x386', '\x388', '\x5', 'x', '=', '\x2', '\x387', '\x385', 
		'\x3', '\x2', '\x2', '\x2', '\x387', '\x386', '\x3', '\x2', '\x2', '\x2', 
		'\x388', 'u', '\x3', '\x2', '\x2', '\x2', '\x389', '\x38C', '\x5', '\x6', 
		'\x4', '\x2', '\x38A', '\x38C', '\a', '\x5', '\x2', '\x2', '\x38B', '\x389', 
		'\x3', '\x2', '\x2', '\x2', '\x38B', '\x38A', '\x3', '\x2', '\x2', '\x2', 
		'\x38C', 'w', '\x3', '\x2', '\x2', '\x2', '\x38D', '\x391', '\x5', 'z', 
		'>', '\x2', '\x38E', '\x391', '\x5', '\x88', '\x45', '\x2', '\x38F', '\x391', 
		'\x5', '\x8A', '\x46', '\x2', '\x390', '\x38D', '\x3', '\x2', '\x2', '\x2', 
		'\x390', '\x38E', '\x3', '\x2', '\x2', '\x2', '\x390', '\x38F', '\x3', 
		'\x2', '\x2', '\x2', '\x391', 'y', '\x3', '\x2', '\x2', '\x2', '\x392', 
		'\x395', '\x5', '\x80', '\x41', '\x2', '\x393', '\x395', '\x5', '\x86', 
		'\x44', '\x2', '\x394', '\x392', '\x3', '\x2', '\x2', '\x2', '\x394', 
		'\x393', '\x3', '\x2', '\x2', '\x2', '\x395', '\x39A', '\x3', '\x2', '\x2', 
		'\x2', '\x396', '\x399', '\x5', '~', '@', '\x2', '\x397', '\x399', '\x5', 
		'\x84', '\x43', '\x2', '\x398', '\x396', '\x3', '\x2', '\x2', '\x2', '\x398', 
		'\x397', '\x3', '\x2', '\x2', '\x2', '\x399', '\x39C', '\x3', '\x2', '\x2', 
		'\x2', '\x39A', '\x398', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x39B', 
		'\x3', '\x2', '\x2', '\x2', '\x39B', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x39C', '\x39A', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x39F', '\a', 
		'h', '\x2', '\x2', '\x39E', '\x3A0', '\x5', '*', '\x16', '\x2', '\x39F', 
		'\x39E', '\x3', '\x2', '\x2', '\x2', '\x39F', '\x3A0', '\x3', '\x2', '\x2', 
		'\x2', '\x3A0', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A2', 
		'\x5', 'z', '>', '\x2', '\x3A2', '\x3A6', '\a', '\x43', '\x2', '\x2', 
		'\x3A3', '\x3A5', '\x5', '\xE6', 't', '\x2', '\x3A4', '\x3A3', '\x3', 
		'\x2', '\x2', '\x2', '\x3A5', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3A6', 
		'\x3A4', '\x3', '\x2', '\x2', '\x2', '\x3A6', '\x3A7', '\x3', '\x2', '\x2', 
		'\x2', '\x3A7', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A6', 
		'\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3AB', '\a', 'h', '\x2', '\x2', 
		'\x3AA', '\x3AC', '\x5', '*', '\x16', '\x2', '\x3AB', '\x3AA', '\x3', 
		'\x2', '\x2', '\x2', '\x3AB', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3AC', 
		'\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3AD', '\x39D', '\x3', '\x2', '\x2', 
		'\x2', '\x3AD', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3AE', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x3AF', '\x3B3', '\a', '\x43', '\x2', '\x2', '\x3B0', 
		'\x3B2', '\x5', '\xE6', 't', '\x2', '\x3B1', '\x3B0', '\x3', '\x2', '\x2', 
		'\x2', '\x3B2', '\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B1', 
		'\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B4', '\x3', '\x2', '\x2', '\x2', 
		'\x3B4', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B3', '\x3', 
		'\x2', '\x2', '\x2', '\x3B6', '\x3B8', '\a', 'h', '\x2', '\x2', '\x3B7', 
		'\x3B9', '\x5', '*', '\x16', '\x2', '\x3B8', '\x3B7', '\x3', '\x2', '\x2', 
		'\x2', '\x3B8', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3B9', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x3BA', '\x3BC', '\a', 'h', '\x2', '\x2', 
		'\x3BB', '\x3BD', '\x5', '*', '\x16', '\x2', '\x3BC', '\x3BB', '\x3', 
		'\x2', '\x2', '\x2', '\x3BC', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3BD', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x3BE', '\x3BF', '\x5', '|', '?', 
		'\x2', '\x3BF', '\x83', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3C1', 
		'\x5', '~', '@', '\x2', '\x3C1', '\x85', '\x3', '\x2', '\x2', '\x2', '\x3C2', 
		'\x3C3', '\x5', '\x80', '\x41', '\x2', '\x3C3', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x3C4', '\x3C5', '\a', 'h', '\x2', '\x2', '\x3C5', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C7', '\x5', 'v', '<', '\x2', 
		'\x3C7', '\x3C8', '\x5', ' ', '\x11', '\x2', '\x3C8', '\x3D0', '\x3', 
		'\x2', '\x2', '\x2', '\x3C9', '\x3CA', '\x5', 'z', '>', '\x2', '\x3CA', 
		'\x3CB', '\x5', ' ', '\x11', '\x2', '\x3CB', '\x3D0', '\x3', '\x2', '\x2', 
		'\x2', '\x3CC', '\x3CD', '\x5', '\x88', '\x45', '\x2', '\x3CD', '\x3CE', 
		'\x5', ' ', '\x11', '\x2', '\x3CE', '\x3D0', '\x3', '\x2', '\x2', '\x2', 
		'\x3CF', '\x3C6', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3C9', '\x3', 
		'\x2', '\x2', '\x2', '\x3CF', '\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3D0', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3D3', '\x5', '\x8E', 'H', 
		'\x2', '\x3D2', '\x3D1', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D6', 
		'\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3D2', '\x3', '\x2', '\x2', '\x2', 
		'\x3D4', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3D7', '\x3', 
		'\x2', '\x2', '\x2', '\x3D6', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D7', 
		'\x3D8', '\x5', '\x90', 'I', '\x2', '\x3D8', '\x3D9', '\x5', '\xA8', 'U', 
		'\x2', '\x3D9', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x3DA', '\x3E5', 
		'\x5', '\xE6', 't', '\x2', '\x3DB', '\x3E5', '\a', '%', '\x2', '\x2', 
		'\x3DC', '\x3E5', '\a', '$', '\x2', '\x2', '\x3DD', '\x3E5', '\a', '#', 
		'\x2', '\x2', '\x3DE', '\x3E5', '\a', '\x3', '\x2', '\x2', '\x3DF', '\x3E5', 
		'\a', '(', '\x2', '\x2', '\x3E0', '\x3E5', '\a', '\x14', '\x2', '\x2', 
		'\x3E1', '\x3E5', '\a', ',', '\x2', '\x2', '\x3E2', '\x3E5', '\a', ' ', 
		'\x2', '\x2', '\x3E3', '\x3E5', '\a', ')', '\x2', '\x2', '\x3E4', '\x3DA', 
		'\x3', '\x2', '\x2', '\x2', '\x3E4', '\x3DB', '\x3', '\x2', '\x2', '\x2', 
		'\x3E4', '\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3E4', '\x3DD', '\x3', 
		'\x2', '\x2', '\x2', '\x3E4', '\x3DE', '\x3', '\x2', '\x2', '\x2', '\x3E4', 
		'\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3E4', '\x3E0', '\x3', '\x2', '\x2', 
		'\x2', '\x3E4', '\x3E1', '\x3', '\x2', '\x2', '\x2', '\x3E4', '\x3E2', 
		'\x3', '\x2', '\x2', '\x2', '\x3E4', '\x3E3', '\x3', '\x2', '\x2', '\x2', 
		'\x3E5', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3E7', '\x5', 
		'\x92', 'J', '\x2', '\x3E7', '\x3E9', '\x5', '\x94', 'K', '\x2', '\x3E8', 
		'\x3EA', '\x5', '\xA2', 'R', '\x2', '\x3E9', '\x3E8', '\x3', '\x2', '\x2', 
		'\x2', '\x3E9', '\x3EA', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3F8', 
		'\x3', '\x2', '\x2', '\x2', '\x3EB', '\x3EF', '\x5', 'X', '-', '\x2', 
		'\x3EC', '\x3EE', '\x5', '\xE6', 't', '\x2', '\x3ED', '\x3EC', '\x3', 
		'\x2', '\x2', '\x2', '\x3EE', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\x3EF', 
		'\x3ED', '\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3F0', '\x3', '\x2', '\x2', 
		'\x2', '\x3F0', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3EF', 
		'\x3', '\x2', '\x2', '\x2', '\x3F2', '\x3F3', '\x5', '\x92', 'J', '\x2', 
		'\x3F3', '\x3F5', '\x5', '\x94', 'K', '\x2', '\x3F4', '\x3F6', '\x5', 
		'\xA2', 'R', '\x2', '\x3F5', '\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3F5', 
		'\x3F6', '\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3F8', '\x3', '\x2', '\x2', 
		'\x2', '\x3F7', '\x3E6', '\x3', '\x2', '\x2', '\x2', '\x3F7', '\x3EB', 
		'\x3', '\x2', '\x2', '\x2', '\x3F8', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x3F9', '\x3FC', '\x5', 't', ';', '\x2', '\x3FA', '\x3FC', '\a', '\x32', 
		'\x2', '\x2', '\x3FB', '\x3F9', '\x3', '\x2', '\x2', '\x2', '\x3FB', '\x3FA', 
		'\x3', '\x2', '\x2', '\x2', '\x3FC', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x3FD', '\x3FE', '\a', 'h', '\x2', '\x2', '\x3FE', '\x400', '\a', ';', 
		'\x2', '\x2', '\x3FF', '\x401', '\x5', '\x96', 'L', '\x2', '\x400', '\x3FF', 
		'\x3', '\x2', '\x2', '\x2', '\x400', '\x401', '\x3', '\x2', '\x2', '\x2', 
		'\x401', '\x402', '\x3', '\x2', '\x2', '\x2', '\x402', '\x404', '\a', 
		'<', '\x2', '\x2', '\x403', '\x405', '\x5', ' ', '\x11', '\x2', '\x404', 
		'\x403', '\x3', '\x2', '\x2', '\x2', '\x404', '\x405', '\x3', '\x2', '\x2', 
		'\x2', '\x405', '\x95', '\x3', '\x2', '\x2', '\x2', '\x406', '\x40D', 
		'\x5', '\xA0', 'Q', '\x2', '\x407', '\x408', '\x5', '\x98', 'M', '\x2', 
		'\x408', '\x409', '\a', '\x42', '\x2', '\x2', '\x409', '\x40A', '\x5', 
		'\x9E', 'P', '\x2', '\x40A', '\x40D', '\x3', '\x2', '\x2', '\x2', '\x40B', 
		'\x40D', '\x5', '\x9E', 'P', '\x2', '\x40C', '\x406', '\x3', '\x2', '\x2', 
		'\x2', '\x40C', '\x407', '\x3', '\x2', '\x2', '\x2', '\x40C', '\x40B', 
		'\x3', '\x2', '\x2', '\x2', '\x40D', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x40E', '\x413', '\x5', '\x9A', 'N', '\x2', '\x40F', '\x410', '\a', '\x42', 
		'\x2', '\x2', '\x410', '\x412', '\x5', '\x9A', 'N', '\x2', '\x411', '\x40F', 
		'\x3', '\x2', '\x2', '\x2', '\x412', '\x415', '\x3', '\x2', '\x2', '\x2', 
		'\x413', '\x411', '\x3', '\x2', '\x2', '\x2', '\x413', '\x414', '\x3', 
		'\x2', '\x2', '\x2', '\x414', '\x41F', '\x3', '\x2', '\x2', '\x2', '\x415', 
		'\x413', '\x3', '\x2', '\x2', '\x2', '\x416', '\x41B', '\x5', '\xA0', 
		'Q', '\x2', '\x417', '\x418', '\a', '\x42', '\x2', '\x2', '\x418', '\x41A', 
		'\x5', '\x9A', 'N', '\x2', '\x419', '\x417', '\x3', '\x2', '\x2', '\x2', 
		'\x41A', '\x41D', '\x3', '\x2', '\x2', '\x2', '\x41B', '\x419', '\x3', 
		'\x2', '\x2', '\x2', '\x41B', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x41C', 
		'\x41F', '\x3', '\x2', '\x2', '\x2', '\x41D', '\x41B', '\x3', '\x2', '\x2', 
		'\x2', '\x41E', '\x40E', '\x3', '\x2', '\x2', '\x2', '\x41E', '\x416', 
		'\x3', '\x2', '\x2', '\x2', '\x41F', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x420', '\x422', '\x5', '\x9C', 'O', '\x2', '\x421', '\x420', '\x3', 
		'\x2', '\x2', '\x2', '\x422', '\x425', '\x3', '\x2', '\x2', '\x2', '\x423', 
		'\x421', '\x3', '\x2', '\x2', '\x2', '\x423', '\x424', '\x3', '\x2', '\x2', 
		'\x2', '\x424', '\x426', '\x3', '\x2', '\x2', '\x2', '\x425', '\x423', 
		'\x3', '\x2', '\x2', '\x2', '\x426', '\x427', '\x5', 't', ';', '\x2', 
		'\x427', '\x428', '\x5', 'p', '\x39', '\x2', '\x428', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x429', '\x42C', '\x5', '\xE6', 't', '\x2', '\x42A', '\x42C', 
		'\a', '\x14', '\x2', '\x2', '\x42B', '\x429', '\x3', '\x2', '\x2', '\x2', 
		'\x42B', '\x42A', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x42D', '\x42F', '\x5', '\x9C', 'O', '\x2', '\x42E', 
		'\x42D', '\x3', '\x2', '\x2', '\x2', '\x42F', '\x432', '\x3', '\x2', '\x2', 
		'\x2', '\x430', '\x42E', '\x3', '\x2', '\x2', '\x2', '\x430', '\x431', 
		'\x3', '\x2', '\x2', '\x2', '\x431', '\x433', '\x3', '\x2', '\x2', '\x2', 
		'\x432', '\x430', '\x3', '\x2', '\x2', '\x2', '\x433', '\x437', '\x5', 
		't', ';', '\x2', '\x434', '\x436', '\x5', '\xE6', 't', '\x2', '\x435', 
		'\x434', '\x3', '\x2', '\x2', '\x2', '\x436', '\x439', '\x3', '\x2', '\x2', 
		'\x2', '\x437', '\x435', '\x3', '\x2', '\x2', '\x2', '\x437', '\x438', 
		'\x3', '\x2', '\x2', '\x2', '\x438', '\x43A', '\x3', '\x2', '\x2', '\x2', 
		'\x439', '\x437', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x43B', '\a', 
		'j', '\x2', '\x2', '\x43B', '\x43C', '\x5', 'p', '\x39', '\x2', '\x43C', 
		'\x43F', '\x3', '\x2', '\x2', '\x2', '\x43D', '\x43F', '\x5', '\x9A', 
		'N', '\x2', '\x43E', '\x430', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x43D', 
		'\x3', '\x2', '\x2', '\x2', '\x43F', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x440', '\x442', '\x5', '\xE6', 't', '\x2', '\x441', '\x440', '\x3', 
		'\x2', '\x2', '\x2', '\x442', '\x445', '\x3', '\x2', '\x2', '\x2', '\x443', 
		'\x441', '\x3', '\x2', '\x2', '\x2', '\x443', '\x444', '\x3', '\x2', '\x2', 
		'\x2', '\x444', '\x446', '\x3', '\x2', '\x2', '\x2', '\x445', '\x443', 
		'\x3', '\x2', '\x2', '\x2', '\x446', '\x449', '\x5', 't', ';', '\x2', 
		'\x447', '\x448', '\a', 'h', '\x2', '\x2', '\x448', '\x44A', '\a', '\x43', 
		'\x2', '\x2', '\x449', '\x447', '\x3', '\x2', '\x2', '\x2', '\x449', '\x44A', 
		'\x3', '\x2', '\x2', '\x2', '\x44A', '\x44B', '\x3', '\x2', '\x2', '\x2', 
		'\x44B', '\x44C', '\a', '-', '\x2', '\x2', '\x44C', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x44D', '\x44E', '\a', '/', '\x2', '\x2', '\x44E', '\x44F', 
		'\x5', '\xA4', 'S', '\x2', '\x44F', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\x450', '\x455', '\x5', '\xA6', 'T', '\x2', '\x451', '\x452', '\a', '\x42', 
		'\x2', '\x2', '\x452', '\x454', '\x5', '\xA6', 'T', '\x2', '\x453', '\x451', 
		'\x3', '\x2', '\x2', '\x2', '\x454', '\x457', '\x3', '\x2', '\x2', '\x2', 
		'\x455', '\x453', '\x3', '\x2', '\x2', '\x2', '\x455', '\x456', '\x3', 
		'\x2', '\x2', '\x2', '\x456', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x457', 
		'\x455', '\x3', '\x2', '\x2', '\x2', '\x458', '\x45B', '\x5', '\x10', 
		'\t', '\x2', '\x459', '\x45B', '\x5', '\x1C', '\xF', '\x2', '\x45A', '\x458', 
		'\x3', '\x2', '\x2', '\x2', '\x45A', '\x459', '\x3', '\x2', '\x2', '\x2', 
		'\x45B', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x45C', '\x45F', '\x5', 
		'\xFC', '\x7F', '\x2', '\x45D', '\x45F', '\a', '\x41', '\x2', '\x2', '\x45E', 
		'\x45C', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x45D', '\x3', '\x2', '\x2', 
		'\x2', '\x45F', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x460', '\x461', 
		'\x5', '\xFC', '\x7F', '\x2', '\x461', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\x462', '\x463', '\a', '(', '\x2', '\x2', '\x463', '\x464', '\x5', '\xFC', 
		'\x7F', '\x2', '\x464', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x465', '\x467', 
		'\x5', '\xB0', 'Y', '\x2', '\x466', '\x465', '\x3', '\x2', '\x2', '\x2', 
		'\x467', '\x46A', '\x3', '\x2', '\x2', '\x2', '\x468', '\x466', '\x3', 
		'\x2', '\x2', '\x2', '\x468', '\x469', '\x3', '\x2', '\x2', '\x2', '\x469', 
		'\x46B', '\x3', '\x2', '\x2', '\x2', '\x46A', '\x468', '\x3', '\x2', '\x2', 
		'\x2', '\x46B', '\x46D', '\x5', '\xB2', 'Z', '\x2', '\x46C', '\x46E', 
		'\x5', '\xA2', 'R', '\x2', '\x46D', '\x46C', '\x3', '\x2', '\x2', '\x2', 
		'\x46D', '\x46E', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x46F', '\x3', 
		'\x2', '\x2', '\x2', '\x46F', '\x470', '\x5', '\xB6', '\\', '\x2', '\x470', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\x471', '\x476', '\x5', '\xE6', 't', 
		'\x2', '\x472', '\x476', '\a', '%', '\x2', '\x2', '\x473', '\x476', '\a', 
		'$', '\x2', '\x2', '\x474', '\x476', '\a', '#', '\x2', '\x2', '\x475', 
		'\x471', '\x3', '\x2', '\x2', '\x2', '\x475', '\x472', '\x3', '\x2', '\x2', 
		'\x2', '\x475', '\x473', '\x3', '\x2', '\x2', '\x2', '\x475', '\x474', 
		'\x3', '\x2', '\x2', '\x2', '\x476', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\x477', '\x479', '\x5', 'X', '-', '\x2', '\x478', '\x477', '\x3', '\x2', 
		'\x2', '\x2', '\x478', '\x479', '\x3', '\x2', '\x2', '\x2', '\x479', '\x47A', 
		'\x3', '\x2', '\x2', '\x2', '\x47A', '\x47B', '\x5', '\xB4', '[', '\x2', 
		'\x47B', '\x47D', '\a', ';', '\x2', '\x2', '\x47C', '\x47E', '\x5', '\x96', 
		'L', '\x2', '\x47D', '\x47C', '\x3', '\x2', '\x2', '\x2', '\x47D', '\x47E', 
		'\x3', '\x2', '\x2', '\x2', '\x47E', '\x47F', '\x3', '\x2', '\x2', '\x2', 
		'\x47F', '\x480', '\a', '<', '\x2', '\x2', '\x480', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\x481', '\x482', '\a', 'h', '\x2', '\x2', '\x482', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\x483', '\x485', '\a', '=', '\x2', '\x2', 
		'\x484', '\x486', '\x5', '\xB8', ']', '\x2', '\x485', '\x484', '\x3', 
		'\x2', '\x2', '\x2', '\x485', '\x486', '\x3', '\x2', '\x2', '\x2', '\x486', 
		'\x488', '\x3', '\x2', '\x2', '\x2', '\x487', '\x489', '\x5', '\xFE', 
		'\x80', '\x2', '\x488', '\x487', '\x3', '\x2', '\x2', '\x2', '\x488', 
		'\x489', '\x3', '\x2', '\x2', '\x2', '\x489', '\x48A', '\x3', '\x2', '\x2', 
		'\x2', '\x48A', '\x48B', '\a', '>', '\x2', '\x2', '\x48B', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\x48C', '\x48E', '\x5', '*', '\x16', '\x2', '\x48D', 
		'\x48C', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x48E', '\x3', '\x2', '\x2', 
		'\x2', '\x48E', '\x48F', '\x3', '\x2', '\x2', '\x2', '\x48F', '\x490', 
		'\a', '-', '\x2', '\x2', '\x490', '\x492', '\a', ';', '\x2', '\x2', '\x491', 
		'\x493', '\x5', '\x18E', '\xC8', '\x2', '\x492', '\x491', '\x3', '\x2', 
		'\x2', '\x2', '\x492', '\x493', '\x3', '\x2', '\x2', '\x2', '\x493', '\x494', 
		'\x3', '\x2', '\x2', '\x2', '\x494', '\x495', '\a', '<', '\x2', '\x2', 
		'\x495', '\x4BB', '\a', '\x41', '\x2', '\x2', '\x496', '\x498', '\x5', 
		'*', '\x16', '\x2', '\x497', '\x496', '\x3', '\x2', '\x2', '\x2', '\x497', 
		'\x498', '\x3', '\x2', '\x2', '\x2', '\x498', '\x499', '\x3', '\x2', '\x2', 
		'\x2', '\x499', '\x49A', '\a', '*', '\x2', '\x2', '\x49A', '\x49C', '\a', 
		';', '\x2', '\x2', '\x49B', '\x49D', '\x5', '\x18E', '\xC8', '\x2', '\x49C', 
		'\x49B', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x49D', '\x3', '\x2', '\x2', 
		'\x2', '\x49D', '\x49E', '\x3', '\x2', '\x2', '\x2', '\x49E', '\x49F', 
		'\a', '<', '\x2', '\x2', '\x49F', '\x4BB', '\a', '\x41', '\x2', '\x2', 
		'\x4A0', '\x4A1', '\x5', ':', '\x1E', '\x2', '\x4A1', '\x4A3', '\a', '\x43', 
		'\x2', '\x2', '\x4A2', '\x4A4', '\x5', '*', '\x16', '\x2', '\x4A3', '\x4A2', 
		'\x3', '\x2', '\x2', '\x2', '\x4A3', '\x4A4', '\x3', '\x2', '\x2', '\x2', 
		'\x4A4', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A6', '\a', 
		'*', '\x2', '\x2', '\x4A6', '\x4A8', '\a', ';', '\x2', '\x2', '\x4A7', 
		'\x4A9', '\x5', '\x18E', '\xC8', '\x2', '\x4A8', '\x4A7', '\x3', '\x2', 
		'\x2', '\x2', '\x4A8', '\x4A9', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4AA', 
		'\x3', '\x2', '\x2', '\x2', '\x4AA', '\x4AB', '\a', '<', '\x2', '\x2', 
		'\x4AB', '\x4AC', '\a', '\x41', '\x2', '\x2', '\x4AC', '\x4BB', '\x3', 
		'\x2', '\x2', '\x2', '\x4AD', '\x4AE', '\x5', '\x160', '\xB1', '\x2', 
		'\x4AE', '\x4B0', '\a', '\x43', '\x2', '\x2', '\x4AF', '\x4B1', '\x5', 
		'*', '\x16', '\x2', '\x4B0', '\x4AF', '\x3', '\x2', '\x2', '\x2', '\x4B0', 
		'\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4B2', '\x3', '\x2', '\x2', 
		'\x2', '\x4B2', '\x4B3', '\a', '*', '\x2', '\x2', '\x4B3', '\x4B5', '\a', 
		';', '\x2', '\x2', '\x4B4', '\x4B6', '\x5', '\x18E', '\xC8', '\x2', '\x4B5', 
		'\x4B4', '\x3', '\x2', '\x2', '\x2', '\x4B5', '\x4B6', '\x3', '\x2', '\x2', 
		'\x2', '\x4B6', '\x4B7', '\x3', '\x2', '\x2', '\x2', '\x4B7', '\x4B8', 
		'\a', '<', '\x2', '\x2', '\x4B8', '\x4B9', '\a', '\x41', '\x2', '\x2', 
		'\x4B9', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BA', '\x48D', '\x3', 
		'\x2', '\x2', '\x2', '\x4BA', '\x497', '\x3', '\x2', '\x2', '\x2', '\x4BA', 
		'\x4A0', '\x3', '\x2', '\x2', '\x2', '\x4BA', '\x4AD', '\x3', '\x2', '\x2', 
		'\x2', '\x4BB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x4BC', '\x4BE', 
		'\x5', 'V', ',', '\x2', '\x4BD', '\x4BC', '\x3', '\x2', '\x2', '\x2', 
		'\x4BE', '\x4C1', '\x3', '\x2', '\x2', '\x2', '\x4BF', '\x4BD', '\x3', 
		'\x2', '\x2', '\x2', '\x4BF', '\x4C0', '\x3', '\x2', '\x2', '\x2', '\x4C0', 
		'\x4C2', '\x3', '\x2', '\x2', '\x2', '\x4C1', '\x4BF', '\x3', '\x2', '\x2', 
		'\x2', '\x4C2', '\x4C3', '\a', '\x12', '\x2', '\x2', '\x4C3', '\x4C5', 
		'\a', 'h', '\x2', '\x2', '\x4C4', '\x4C6', '\x5', '^', '\x30', '\x2', 
		'\x4C5', '\x4C4', '\x3', '\x2', '\x2', '\x2', '\x4C5', '\x4C6', '\x3', 
		'\x2', '\x2', '\x2', '\x4C6', '\x4C7', '\x3', '\x2', '\x2', '\x2', '\x4C7', 
		'\x4C8', '\x5', '\xBC', '_', '\x2', '\x4C8', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\x4C9', '\x4CB', '\a', '=', '\x2', '\x2', '\x4CA', '\x4CC', '\x5', 
		'\xBE', '`', '\x2', '\x4CB', '\x4CA', '\x3', '\x2', '\x2', '\x2', '\x4CB', 
		'\x4CC', '\x3', '\x2', '\x2', '\x2', '\x4CC', '\x4CE', '\x3', '\x2', '\x2', 
		'\x2', '\x4CD', '\x4CF', '\a', '\x42', '\x2', '\x2', '\x4CE', '\x4CD', 
		'\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4CF', '\x3', '\x2', '\x2', '\x2', 
		'\x4CF', '\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4D0', '\x4D2', '\x5', 
		'\xC4', '\x63', '\x2', '\x4D1', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D1', 
		'\x4D2', '\x3', '\x2', '\x2', '\x2', '\x4D2', '\x4D3', '\x3', '\x2', '\x2', 
		'\x2', '\x4D3', '\x4D4', '\a', '>', '\x2', '\x2', '\x4D4', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\x4D5', '\x4DA', '\x5', '\xC0', '\x61', '\x2', '\x4D6', 
		'\x4D7', '\a', '\x42', '\x2', '\x2', '\x4D7', '\x4D9', '\x5', '\xC0', 
		'\x61', '\x2', '\x4D8', '\x4D6', '\x3', '\x2', '\x2', '\x2', '\x4D9', 
		'\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4DA', '\x4D8', '\x3', '\x2', '\x2', 
		'\x2', '\x4DA', '\x4DB', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\x4DC', '\x4DA', '\x3', '\x2', '\x2', '\x2', 
		'\x4DD', '\x4DF', '\x5', '\xC2', '\x62', '\x2', '\x4DE', '\x4DD', '\x3', 
		'\x2', '\x2', '\x2', '\x4DF', '\x4E2', '\x3', '\x2', '\x2', '\x2', '\x4E0', 
		'\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4E0', '\x4E1', '\x3', '\x2', '\x2', 
		'\x2', '\x4E1', '\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E0', 
		'\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4E9', '\a', 'h', '\x2', '\x2', 
		'\x4E4', '\x4E6', '\a', ';', '\x2', '\x2', '\x4E5', '\x4E7', '\x5', '\x18E', 
		'\xC8', '\x2', '\x4E6', '\x4E5', '\x3', '\x2', '\x2', '\x2', '\x4E6', 
		'\x4E7', '\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E8', '\x3', '\x2', '\x2', 
		'\x2', '\x4E8', '\x4EA', '\a', '<', '\x2', '\x2', '\x4E9', '\x4E4', '\x3', 
		'\x2', '\x2', '\x2', '\x4E9', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4EA', 
		'\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4ED', '\x5', '\x62', 
		'\x32', '\x2', '\x4EC', '\x4EB', '\x3', '\x2', '\x2', '\x2', '\x4EC', 
		'\x4ED', '\x3', '\x2', '\x2', '\x2', '\x4ED', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\x4EE', '\x4EF', '\x5', '\xE6', 't', '\x2', '\x4EF', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\x4F0', '\x4F4', '\a', '\x41', '\x2', '\x2', '\x4F1', 
		'\x4F3', '\x5', '\x64', '\x33', '\x2', '\x4F2', '\x4F1', '\x3', '\x2', 
		'\x2', '\x2', '\x4F3', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F2', 
		'\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F5', '\x3', '\x2', '\x2', '\x2', 
		'\x4F5', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4F4', '\x3', 
		'\x2', '\x2', '\x2', '\x4F7', '\x4FA', '\x5', '\xC8', '\x65', '\x2', '\x4F8', 
		'\x4FA', '\x5', '\xDA', 'n', '\x2', '\x4F9', '\x4F7', '\x3', '\x2', '\x2', 
		'\x2', '\x4F9', '\x4F8', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FD', '\x5', '\xCA', '\x66', '\x2', 
		'\x4FC', '\x4FB', '\x3', '\x2', '\x2', '\x2', '\x4FD', '\x500', '\x3', 
		'\x2', '\x2', '\x2', '\x4FE', '\x4FC', '\x3', '\x2', '\x2', '\x2', '\x4FE', 
		'\x4FF', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x501', '\x3', '\x2', '\x2', 
		'\x2', '\x500', '\x4FE', '\x3', '\x2', '\x2', '\x2', '\x501', '\x502', 
		'\a', '\x1E', '\x2', '\x2', '\x502', '\x504', '\a', 'h', '\x2', '\x2', 
		'\x503', '\x505', '\x5', 'X', '-', '\x2', '\x504', '\x503', '\x3', '\x2', 
		'\x2', '\x2', '\x504', '\x505', '\x3', '\x2', '\x2', '\x2', '\x505', '\x507', 
		'\x3', '\x2', '\x2', '\x2', '\x506', '\x508', '\x5', '\xCC', 'g', '\x2', 
		'\x507', '\x506', '\x3', '\x2', '\x2', '\x2', '\x507', '\x508', '\x3', 
		'\x2', '\x2', '\x2', '\x508', '\x509', '\x3', '\x2', '\x2', '\x2', '\x509', 
		'\x50A', '\x5', '\xCE', 'h', '\x2', '\x50A', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\x50B', '\x513', '\x5', '\xE6', 't', '\x2', '\x50C', '\x513', 
		'\a', '%', '\x2', '\x2', '\x50D', '\x513', '\a', '$', '\x2', '\x2', '\x50E', 
		'\x513', '\a', '#', '\x2', '\x2', '\x50F', '\x513', '\a', '\x3', '\x2', 
		'\x2', '\x510', '\x513', '\a', '(', '\x2', '\x2', '\x511', '\x513', '\a', 
		')', '\x2', '\x2', '\x512', '\x50B', '\x3', '\x2', '\x2', '\x2', '\x512', 
		'\x50C', '\x3', '\x2', '\x2', '\x2', '\x512', '\x50D', '\x3', '\x2', '\x2', 
		'\x2', '\x512', '\x50E', '\x3', '\x2', '\x2', '\x2', '\x512', '\x50F', 
		'\x3', '\x2', '\x2', '\x2', '\x512', '\x510', '\x3', '\x2', '\x2', '\x2', 
		'\x512', '\x511', '\x3', '\x2', '\x2', '\x2', '\x513', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\x514', '\x515', '\a', '\x13', '\x2', '\x2', '\x515', 
		'\x516', '\x5', '`', '\x31', '\x2', '\x516', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\x517', '\x51B', '\a', '=', '\x2', '\x2', '\x518', '\x51A', '\x5', 
		'\xD0', 'i', '\x2', '\x519', '\x518', '\x3', '\x2', '\x2', '\x2', '\x51A', 
		'\x51D', '\x3', '\x2', '\x2', '\x2', '\x51B', '\x519', '\x3', '\x2', '\x2', 
		'\x2', '\x51B', '\x51C', '\x3', '\x2', '\x2', '\x2', '\x51C', '\x51E', 
		'\x3', '\x2', '\x2', '\x2', '\x51D', '\x51B', '\x3', '\x2', '\x2', '\x2', 
		'\x51E', '\x51F', '\a', '>', '\x2', '\x2', '\x51F', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\x520', '\x526', '\x5', '\xD2', 'j', '\x2', '\x521', '\x526', 
		'\x5', '\xD6', 'l', '\x2', '\x522', '\x526', '\x5', 'R', '*', '\x2', '\x523', 
		'\x526', '\x5', '\xC6', '\x64', '\x2', '\x524', '\x526', '\a', '\x41', 
		'\x2', '\x2', '\x525', '\x520', '\x3', '\x2', '\x2', '\x2', '\x525', '\x521', 
		'\x3', '\x2', '\x2', '\x2', '\x525', '\x522', '\x3', '\x2', '\x2', '\x2', 
		'\x525', '\x523', '\x3', '\x2', '\x2', '\x2', '\x525', '\x524', '\x3', 
		'\x2', '\x2', '\x2', '\x526', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x527', 
		'\x529', '\x5', '\xD4', 'k', '\x2', '\x528', '\x527', '\x3', '\x2', '\x2', 
		'\x2', '\x529', '\x52C', '\x3', '\x2', '\x2', '\x2', '\x52A', '\x528', 
		'\x3', '\x2', '\x2', '\x2', '\x52A', '\x52B', '\x3', '\x2', '\x2', '\x2', 
		'\x52B', '\x52D', '\x3', '\x2', '\x2', '\x2', '\x52C', '\x52A', '\x3', 
		'\x2', '\x2', '\x2', '\x52D', '\x52E', '\x5', 't', ';', '\x2', '\x52E', 
		'\x52F', '\x5', 'l', '\x37', '\x2', '\x52F', '\x530', '\a', '\x41', '\x2', 
		'\x2', '\x530', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x531', '\x536', 
		'\x5', '\xE6', 't', '\x2', '\x532', '\x536', '\a', '%', '\x2', '\x2', 
		'\x533', '\x536', '\a', '(', '\x2', '\x2', '\x534', '\x536', '\a', '\x14', 
		'\x2', '\x2', '\x535', '\x531', '\x3', '\x2', '\x2', '\x2', '\x535', '\x532', 
		'\x3', '\x2', '\x2', '\x2', '\x535', '\x533', '\x3', '\x2', '\x2', '\x2', 
		'\x535', '\x534', '\x3', '\x2', '\x2', '\x2', '\x536', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\x537', '\x539', '\x5', '\xD8', 'm', '\x2', '\x538', 
		'\x537', '\x3', '\x2', '\x2', '\x2', '\x539', '\x53C', '\x3', '\x2', '\x2', 
		'\x2', '\x53A', '\x538', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x53B', 
		'\x3', '\x2', '\x2', '\x2', '\x53B', '\x53D', '\x3', '\x2', '\x2', '\x2', 
		'\x53C', '\x53A', '\x3', '\x2', '\x2', '\x2', '\x53D', '\x53E', '\x5', 
		'\x90', 'I', '\x2', '\x53E', '\x53F', '\x5', '\xA8', 'U', '\x2', '\x53F', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\x540', '\x547', '\x5', '\xE6', 't', 
		'\x2', '\x541', '\x547', '\a', '%', '\x2', '\x2', '\x542', '\x547', '\a', 
		'\x3', '\x2', '\x2', '\x543', '\x547', '\a', '\xE', '\x2', '\x2', '\x544', 
		'\x547', '\a', '(', '\x2', '\x2', '\x545', '\x547', '\a', ')', '\x2', 
		'\x2', '\x546', '\x540', '\x3', '\x2', '\x2', '\x2', '\x546', '\x541', 
		'\x3', '\x2', '\x2', '\x2', '\x546', '\x542', '\x3', '\x2', '\x2', '\x2', 
		'\x546', '\x543', '\x3', '\x2', '\x2', '\x2', '\x546', '\x544', '\x3', 
		'\x2', '\x2', '\x2', '\x546', '\x545', '\x3', '\x2', '\x2', '\x2', '\x547', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\x548', '\x54A', '\x5', '\xCA', '\x66', 
		'\x2', '\x549', '\x548', '\x3', '\x2', '\x2', '\x2', '\x54A', '\x54D', 
		'\x3', '\x2', '\x2', '\x2', '\x54B', '\x549', '\x3', '\x2', '\x2', '\x2', 
		'\x54B', '\x54C', '\x3', '\x2', '\x2', '\x2', '\x54C', '\x54E', '\x3', 
		'\x2', '\x2', '\x2', '\x54D', '\x54B', '\x3', '\x2', '\x2', '\x2', '\x54E', 
		'\x54F', '\a', 'i', '\x2', '\x2', '\x54F', '\x550', '\a', '\x1E', '\x2', 
		'\x2', '\x550', '\x551', '\a', 'h', '\x2', '\x2', '\x551', '\x552', '\x5', 
		'\xDC', 'o', '\x2', '\x552', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x553', 
		'\x557', '\a', '=', '\x2', '\x2', '\x554', '\x556', '\x5', '\xDE', 'p', 
		'\x2', '\x555', '\x554', '\x3', '\x2', '\x2', '\x2', '\x556', '\x559', 
		'\x3', '\x2', '\x2', '\x2', '\x557', '\x555', '\x3', '\x2', '\x2', '\x2', 
		'\x557', '\x558', '\x3', '\x2', '\x2', '\x2', '\x558', '\x55A', '\x3', 
		'\x2', '\x2', '\x2', '\x559', '\x557', '\x3', '\x2', '\x2', '\x2', '\x55A', 
		'\x55B', '\a', '>', '\x2', '\x2', '\x55B', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\x55C', '\x562', '\x5', '\xE0', 'q', '\x2', '\x55D', '\x562', 
		'\x5', '\xD2', 'j', '\x2', '\x55E', '\x562', '\x5', 'R', '*', '\x2', '\x55F', 
		'\x562', '\x5', '\xC6', '\x64', '\x2', '\x560', '\x562', '\a', '\x41', 
		'\x2', '\x2', '\x561', '\x55C', '\x3', '\x2', '\x2', '\x2', '\x561', '\x55D', 
		'\x3', '\x2', '\x2', '\x2', '\x561', '\x55E', '\x3', '\x2', '\x2', '\x2', 
		'\x561', '\x55F', '\x3', '\x2', '\x2', '\x2', '\x561', '\x560', '\x3', 
		'\x2', '\x2', '\x2', '\x562', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x563', 
		'\x565', '\x5', '\xE2', 'r', '\x2', '\x564', '\x563', '\x3', '\x2', '\x2', 
		'\x2', '\x565', '\x568', '\x3', '\x2', '\x2', '\x2', '\x566', '\x564', 
		'\x3', '\x2', '\x2', '\x2', '\x566', '\x567', '\x3', '\x2', '\x2', '\x2', 
		'\x567', '\x569', '\x3', '\x2', '\x2', '\x2', '\x568', '\x566', '\x3', 
		'\x2', '\x2', '\x2', '\x569', '\x56A', '\x5', 't', ';', '\x2', '\x56A', 
		'\x56B', '\a', 'h', '\x2', '\x2', '\x56B', '\x56C', '\a', ';', '\x2', 
		'\x2', '\x56C', '\x56E', '\a', '<', '\x2', '\x2', '\x56D', '\x56F', '\x5', 
		' ', '\x11', '\x2', '\x56E', '\x56D', '\x3', '\x2', '\x2', '\x2', '\x56E', 
		'\x56F', '\x3', '\x2', '\x2', '\x2', '\x56F', '\x571', '\x3', '\x2', '\x2', 
		'\x2', '\x570', '\x572', '\x5', '\xE4', 's', '\x2', '\x571', '\x570', 
		'\x3', '\x2', '\x2', '\x2', '\x571', '\x572', '\x3', '\x2', '\x2', '\x2', 
		'\x572', '\x573', '\x3', '\x2', '\x2', '\x2', '\x573', '\x574', '\a', 
		'\x41', '\x2', '\x2', '\x574', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x575', 
		'\x579', '\x5', '\xE6', 't', '\x2', '\x576', '\x579', '\a', '%', '\x2', 
		'\x2', '\x577', '\x579', '\a', '\x3', '\x2', '\x2', '\x578', '\x575', 
		'\x3', '\x2', '\x2', '\x2', '\x578', '\x576', '\x3', '\x2', '\x2', '\x2', 
		'\x578', '\x577', '\x3', '\x2', '\x2', '\x2', '\x579', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\x57A', '\x57B', '\a', '\xE', '\x2', '\x2', '\x57B', 
		'\x57C', '\x5', '\xEE', 'x', '\x2', '\x57C', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\x57D', '\x581', '\x5', '\xE8', 'u', '\x2', '\x57E', '\x581', 
		'\x5', '\xF4', '{', '\x2', '\x57F', '\x581', '\x5', '\xF6', '|', '\x2', 
		'\x580', '\x57D', '\x3', '\x2', '\x2', '\x2', '\x580', '\x57E', '\x3', 
		'\x2', '\x2', '\x2', '\x580', '\x57F', '\x3', '\x2', '\x2', '\x2', '\x581', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\x582', '\x583', '\a', 'i', '\x2', 
		'\x2', '\x583', '\x584', '\x5', '\x36', '\x1C', '\x2', '\x584', '\x586', 
		'\a', ';', '\x2', '\x2', '\x585', '\x587', '\x5', '\xEA', 'v', '\x2', 
		'\x586', '\x585', '\x3', '\x2', '\x2', '\x2', '\x586', '\x587', '\x3', 
		'\x2', '\x2', '\x2', '\x587', '\x588', '\x3', '\x2', '\x2', '\x2', '\x588', 
		'\x589', '\a', '<', '\x2', '\x2', '\x589', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\x58A', '\x58F', '\x5', '\xEC', 'w', '\x2', '\x58B', '\x58C', 
		'\a', '\x42', '\x2', '\x2', '\x58C', '\x58E', '\x5', '\xEC', 'w', '\x2', 
		'\x58D', '\x58B', '\x3', '\x2', '\x2', '\x2', '\x58E', '\x591', '\x3', 
		'\x2', '\x2', '\x2', '\x58F', '\x58D', '\x3', '\x2', '\x2', '\x2', '\x58F', 
		'\x590', '\x3', '\x2', '\x2', '\x2', '\x590', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\x591', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x592', '\x593', 
		'\a', 'h', '\x2', '\x2', '\x593', '\x594', '\a', '\x44', '\x2', '\x2', 
		'\x594', '\x595', '\x5', '\xEE', 'x', '\x2', '\x595', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\x596', '\x59A', '\x5', '\x1B0', '\xD9', '\x2', '\x597', 
		'\x59A', '\x5', '\xF0', 'y', '\x2', '\x598', '\x59A', '\x5', '\xE6', 't', 
		'\x2', '\x599', '\x596', '\x3', '\x2', '\x2', '\x2', '\x599', '\x597', 
		'\x3', '\x2', '\x2', '\x2', '\x599', '\x598', '\x3', '\x2', '\x2', '\x2', 
		'\x59A', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x59B', '\x59D', '\a', '=', 
		'\x2', '\x2', '\x59C', '\x59E', '\x5', '\xF2', 'z', '\x2', '\x59D', '\x59C', 
		'\x3', '\x2', '\x2', '\x2', '\x59D', '\x59E', '\x3', '\x2', '\x2', '\x2', 
		'\x59E', '\x5A0', '\x3', '\x2', '\x2', '\x2', '\x59F', '\x5A1', '\a', 
		'\x42', '\x2', '\x2', '\x5A0', '\x59F', '\x3', '\x2', '\x2', '\x2', '\x5A0', 
		'\x5A1', '\x3', '\x2', '\x2', '\x2', '\x5A1', '\x5A2', '\x3', '\x2', '\x2', 
		'\x2', '\x5A2', '\x5A3', '\a', '>', '\x2', '\x2', '\x5A3', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\x5A4', '\x5A9', '\x5', '\xEE', 'x', '\x2', '\x5A5', 
		'\x5A6', '\a', '\x42', '\x2', '\x2', '\x5A6', '\x5A8', '\x5', '\xEE', 
		'x', '\x2', '\x5A7', '\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A8', '\x5AB', 
		'\x3', '\x2', '\x2', '\x2', '\x5A9', '\x5A7', '\x3', '\x2', '\x2', '\x2', 
		'\x5A9', '\x5AA', '\x3', '\x2', '\x2', '\x2', '\x5AA', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\x5AB', '\x5A9', '\x3', '\x2', '\x2', '\x2', '\x5AC', 
		'\x5AD', '\a', 'i', '\x2', '\x2', '\x5AD', '\x5AE', '\x5', '\x36', '\x1C', 
		'\x2', '\x5AE', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x5AF', '\x5B0', 
		'\a', 'i', '\x2', '\x2', '\x5B0', '\x5B1', '\x5', '\x36', '\x1C', '\x2', 
		'\x5B1', '\x5B2', '\a', ';', '\x2', '\x2', '\x5B2', '\x5B3', '\x5', '\xEE', 
		'x', '\x2', '\x5B3', '\x5B4', '\a', '<', '\x2', '\x2', '\x5B4', '\xF7', 
		'\x3', '\x2', '\x2', '\x2', '\x5B5', '\x5B7', '\a', '=', '\x2', '\x2', 
		'\x5B6', '\x5B8', '\x5', '\xFA', '~', '\x2', '\x5B7', '\x5B6', '\x3', 
		'\x2', '\x2', '\x2', '\x5B7', '\x5B8', '\x3', '\x2', '\x2', '\x2', '\x5B8', 
		'\x5BA', '\x3', '\x2', '\x2', '\x2', '\x5B9', '\x5BB', '\a', '\x42', '\x2', 
		'\x2', '\x5BA', '\x5B9', '\x3', '\x2', '\x2', '\x2', '\x5BA', '\x5BB', 
		'\x3', '\x2', '\x2', '\x2', '\x5BB', '\x5BC', '\x3', '\x2', '\x2', '\x2', 
		'\x5BC', '\x5BD', '\a', '>', '\x2', '\x2', '\x5BD', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\x5BE', '\x5C3', '\x5', 'r', ':', '\x2', '\x5BF', '\x5C0', 
		'\a', '\x42', '\x2', '\x2', '\x5C0', '\x5C2', '\x5', 'r', ':', '\x2', 
		'\x5C1', '\x5BF', '\x3', '\x2', '\x2', '\x2', '\x5C2', '\x5C5', '\x3', 
		'\x2', '\x2', '\x2', '\x5C3', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5C3', 
		'\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5C4', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\x5C5', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\x5C6', '\x5C8', 
		'\a', '=', '\x2', '\x2', '\x5C7', '\x5C9', '\x5', '\xFE', '\x80', '\x2', 
		'\x5C8', '\x5C7', '\x3', '\x2', '\x2', '\x2', '\x5C8', '\x5C9', '\x3', 
		'\x2', '\x2', '\x2', '\x5C9', '\x5CA', '\x3', '\x2', '\x2', '\x2', '\x5CA', 
		'\x5CB', '\a', '>', '\x2', '\x2', '\x5CB', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\x5CC', '\x5CE', '\x5', '\x100', '\x81', '\x2', '\x5CD', '\x5CC', 
		'\x3', '\x2', '\x2', '\x2', '\x5CE', '\x5CF', '\x3', '\x2', '\x2', '\x2', 
		'\x5CF', '\x5CD', '\x3', '\x2', '\x2', '\x2', '\x5CF', '\x5D0', '\x3', 
		'\x2', '\x2', '\x2', '\x5D0', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x5D1', 
		'\x5D5', '\x5', '\x102', '\x82', '\x2', '\x5D2', '\x5D5', '\x5', 'R', 
		'*', '\x2', '\x5D3', '\x5D5', '\x5', '\x106', '\x84', '\x2', '\x5D4', 
		'\x5D1', '\x3', '\x2', '\x2', '\x2', '\x5D4', '\x5D2', '\x3', '\x2', '\x2', 
		'\x2', '\x5D4', '\x5D3', '\x3', '\x2', '\x2', '\x2', '\x5D5', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x5D6', '\x5D7', '\x5', '\x104', '\x83', 
		'\x2', '\x5D7', '\x5D8', '\a', '\x41', '\x2', '\x2', '\x5D8', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x5D9', '\x5DB', '\x5', '\x9C', 'O', '\x2', 
		'\x5DA', '\x5D9', '\x3', '\x2', '\x2', '\x2', '\x5DB', '\x5DE', '\x3', 
		'\x2', '\x2', '\x2', '\x5DC', '\x5DA', '\x3', '\x2', '\x2', '\x2', '\x5DC', 
		'\x5DD', '\x3', '\x2', '\x2', '\x2', '\x5DD', '\x5DF', '\x3', '\x2', '\x2', 
		'\x2', '\x5DE', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DF', '\x5E0', 
		'\x5', 't', ';', '\x2', '\x5E0', '\x5E1', '\x5', 'l', '\x37', '\x2', '\x5E1', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x5E2', '\x5E9', '\x5', '\x10A', 
		'\x86', '\x2', '\x5E3', '\x5E9', '\x5', '\x10E', '\x88', '\x2', '\x5E4', 
		'\x5E9', '\x5', '\x116', '\x8C', '\x2', '\x5E5', '\x5E9', '\x5', '\x118', 
		'\x8D', '\x2', '\x5E6', '\x5E9', '\x5', '\x12A', '\x96', '\x2', '\x5E7', 
		'\x5E9', '\x5', '\x130', '\x99', '\x2', '\x5E8', '\x5E2', '\x3', '\x2', 
		'\x2', '\x2', '\x5E8', '\x5E3', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5E4', 
		'\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5E5', '\x3', '\x2', '\x2', '\x2', 
		'\x5E8', '\x5E6', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5E7', '\x3', 
		'\x2', '\x2', '\x2', '\x5E9', '\x107', '\x3', '\x2', '\x2', '\x2', '\x5EA', 
		'\x5F0', '\x5', '\x10A', '\x86', '\x2', '\x5EB', '\x5F0', '\x5', '\x110', 
		'\x89', '\x2', '\x5EC', '\x5F0', '\x5', '\x11A', '\x8E', '\x2', '\x5ED', 
		'\x5F0', '\x5', '\x12C', '\x97', '\x2', '\x5EE', '\x5F0', '\x5', '\x132', 
		'\x9A', '\x2', '\x5EF', '\x5EA', '\x3', '\x2', '\x2', '\x2', '\x5EF', 
		'\x5EB', '\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5EC', '\x3', '\x2', '\x2', 
		'\x2', '\x5EF', '\x5ED', '\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5EE', 
		'\x3', '\x2', '\x2', '\x2', '\x5F0', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x5F1', '\x5FE', '\x5', '\xFC', '\x7F', '\x2', '\x5F2', '\x5FE', '\x5', 
		'\x10C', '\x87', '\x2', '\x5F3', '\x5FE', '\x5', '\x112', '\x8A', '\x2', 
		'\x5F4', '\x5FE', '\x5', '\x11C', '\x8F', '\x2', '\x5F5', '\x5FE', '\x5', 
		'\x11E', '\x90', '\x2', '\x5F6', '\x5FE', '\x5', '\x12E', '\x98', '\x2', 
		'\x5F7', '\x5FE', '\x5', '\x142', '\xA2', '\x2', '\x5F8', '\x5FE', '\x5', 
		'\x144', '\xA3', '\x2', '\x5F9', '\x5FE', '\x5', '\x146', '\xA4', '\x2', 
		'\x5FA', '\x5FE', '\x5', '\x14A', '\xA6', '\x2', '\x5FB', '\x5FE', '\x5', 
		'\x148', '\xA5', '\x2', '\x5FC', '\x5FE', '\x5', '\x14C', '\xA7', '\x2', 
		'\x5FD', '\x5F1', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5F2', '\x3', 
		'\x2', '\x2', '\x2', '\x5FD', '\x5F3', '\x3', '\x2', '\x2', '\x2', '\x5FD', 
		'\x5F4', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5F5', '\x3', '\x2', '\x2', 
		'\x2', '\x5FD', '\x5F6', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5F7', 
		'\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5F8', '\x3', '\x2', '\x2', '\x2', 
		'\x5FD', '\x5F9', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5FA', '\x3', 
		'\x2', '\x2', '\x2', '\x5FD', '\x5FB', '\x3', '\x2', '\x2', '\x2', '\x5FD', 
		'\x5FC', '\x3', '\x2', '\x2', '\x2', '\x5FE', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x5FF', '\x600', '\a', '\x41', '\x2', '\x2', '\x600', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x601', '\x602', '\a', 'h', '\x2', '\x2', 
		'\x602', '\x603', '\a', 'J', '\x2', '\x2', '\x603', '\x604', '\x5', '\x106', 
		'\x84', '\x2', '\x604', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x605', 
		'\x606', '\a', 'h', '\x2', '\x2', '\x606', '\x607', '\a', 'J', '\x2', 
		'\x2', '\x607', '\x608', '\x5', '\x108', '\x85', '\x2', '\x608', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x609', '\x60A', '\x5', '\x114', '\x8B', 
		'\x2', '\x60A', '\x60B', '\a', '\x41', '\x2', '\x2', '\x60B', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x60C', '\x614', '\x5', '\x1AA', '\xD6', 
		'\x2', '\x60D', '\x614', '\x5', '\x1C8', '\xE5', '\x2', '\x60E', '\x614', 
		'\x5', '\x1CA', '\xE6', '\x2', '\x60F', '\x614', '\x5', '\x1D0', '\xE9', 
		'\x2', '\x610', '\x614', '\x5', '\x1D4', '\xEB', '\x2', '\x611', '\x614', 
		'\x5', '\x188', '\xC5', '\x2', '\x612', '\x614', '\x5', '\x174', '\xBB', 
		'\x2', '\x613', '\x60C', '\x3', '\x2', '\x2', '\x2', '\x613', '\x60D', 
		'\x3', '\x2', '\x2', '\x2', '\x613', '\x60E', '\x3', '\x2', '\x2', '\x2', 
		'\x613', '\x60F', '\x3', '\x2', '\x2', '\x2', '\x613', '\x610', '\x3', 
		'\x2', '\x2', '\x2', '\x613', '\x611', '\x3', '\x2', '\x2', '\x2', '\x613', 
		'\x612', '\x3', '\x2', '\x2', '\x2', '\x614', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x615', '\x616', '\a', '\x18', '\x2', '\x2', '\x616', '\x617', 
		'\a', ';', '\x2', '\x2', '\x617', '\x618', '\x5', '\x19E', '\xD0', '\x2', 
		'\x618', '\x619', '\a', '<', '\x2', '\x2', '\x619', '\x61A', '\x5', '\x106', 
		'\x84', '\x2', '\x61A', '\x117', '\x3', '\x2', '\x2', '\x2', '\x61B', 
		'\x61C', '\a', '\x18', '\x2', '\x2', '\x61C', '\x61D', '\a', ';', '\x2', 
		'\x2', '\x61D', '\x61E', '\x5', '\x19E', '\xD0', '\x2', '\x61E', '\x61F', 
		'\a', '<', '\x2', '\x2', '\x61F', '\x620', '\x5', '\x108', '\x85', '\x2', 
		'\x620', '\x621', '\a', '\x11', '\x2', '\x2', '\x621', '\x622', '\x5', 
		'\x106', '\x84', '\x2', '\x622', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x623', '\x624', '\a', '\x18', '\x2', '\x2', '\x624', '\x625', '\a', 
		';', '\x2', '\x2', '\x625', '\x626', '\x5', '\x19E', '\xD0', '\x2', '\x626', 
		'\x627', '\a', '<', '\x2', '\x2', '\x627', '\x628', '\x5', '\x108', '\x85', 
		'\x2', '\x628', '\x629', '\a', '\x11', '\x2', '\x2', '\x629', '\x62A', 
		'\x5', '\x108', '\x85', '\x2', '\x62A', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x62B', '\x62C', '\a', '\x4', '\x2', '\x2', '\x62C', '\x62D', 
		'\x5', '\x19E', '\xD0', '\x2', '\x62D', '\x62E', '\a', '\x41', '\x2', 
		'\x2', '\x62E', '\x636', '\x3', '\x2', '\x2', '\x2', '\x62F', '\x630', 
		'\a', '\x4', '\x2', '\x2', '\x630', '\x631', '\x5', '\x19E', '\xD0', '\x2', 
		'\x631', '\x632', '\a', 'J', '\x2', '\x2', '\x632', '\x633', '\x5', '\x19E', 
		'\xD0', '\x2', '\x633', '\x634', '\a', '\x41', '\x2', '\x2', '\x634', 
		'\x636', '\x3', '\x2', '\x2', '\x2', '\x635', '\x62B', '\x3', '\x2', '\x2', 
		'\x2', '\x635', '\x62F', '\x3', '\x2', '\x2', '\x2', '\x636', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x637', '\x638', '\a', '+', '\x2', '\x2', 
		'\x638', '\x639', '\a', ';', '\x2', '\x2', '\x639', '\x63A', '\x5', '\x19E', 
		'\xD0', '\x2', '\x63A', '\x63B', '\a', '<', '\x2', '\x2', '\x63B', '\x63C', 
		'\x5', '\x120', '\x91', '\x2', '\x63C', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x63D', '\x641', '\a', '=', '\x2', '\x2', '\x63E', '\x640', '\x5', 
		'\x122', '\x92', '\x2', '\x63F', '\x63E', '\x3', '\x2', '\x2', '\x2', 
		'\x640', '\x643', '\x3', '\x2', '\x2', '\x2', '\x641', '\x63F', '\x3', 
		'\x2', '\x2', '\x2', '\x641', '\x642', '\x3', '\x2', '\x2', '\x2', '\x642', 
		'\x647', '\x3', '\x2', '\x2', '\x2', '\x643', '\x641', '\x3', '\x2', '\x2', 
		'\x2', '\x644', '\x646', '\x5', '\x126', '\x94', '\x2', '\x645', '\x644', 
		'\x3', '\x2', '\x2', '\x2', '\x646', '\x649', '\x3', '\x2', '\x2', '\x2', 
		'\x647', '\x645', '\x3', '\x2', '\x2', '\x2', '\x647', '\x648', '\x3', 
		'\x2', '\x2', '\x2', '\x648', '\x64A', '\x3', '\x2', '\x2', '\x2', '\x649', 
		'\x647', '\x3', '\x2', '\x2', '\x2', '\x64A', '\x64B', '\a', '>', '\x2', 
		'\x2', '\x64B', '\x121', '\x3', '\x2', '\x2', '\x2', '\x64C', '\x64D', 
		'\x5', '\x124', '\x93', '\x2', '\x64D', '\x64E', '\x5', '\xFE', '\x80', 
		'\x2', '\x64E', '\x123', '\x3', '\x2', '\x2', '\x2', '\x64F', '\x653', 
		'\x5', '\x126', '\x94', '\x2', '\x650', '\x652', '\x5', '\x126', '\x94', 
		'\x2', '\x651', '\x650', '\x3', '\x2', '\x2', '\x2', '\x652', '\x655', 
		'\x3', '\x2', '\x2', '\x2', '\x653', '\x651', '\x3', '\x2', '\x2', '\x2', 
		'\x653', '\x654', '\x3', '\x2', '\x2', '\x2', '\x654', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x655', '\x653', '\x3', '\x2', '\x2', '\x2', '\x656', 
		'\x657', '\a', '\b', '\x2', '\x2', '\x657', '\x658', '\x5', '\x19C', '\xCF', 
		'\x2', '\x658', '\x659', '\a', 'J', '\x2', '\x2', '\x659', '\x661', '\x3', 
		'\x2', '\x2', '\x2', '\x65A', '\x65B', '\a', '\b', '\x2', '\x2', '\x65B', 
		'\x65C', '\x5', '\x128', '\x95', '\x2', '\x65C', '\x65D', '\a', 'J', '\x2', 
		'\x2', '\x65D', '\x661', '\x3', '\x2', '\x2', '\x2', '\x65E', '\x65F', 
		'\a', '\xE', '\x2', '\x2', '\x65F', '\x661', '\a', 'J', '\x2', '\x2', 
		'\x660', '\x656', '\x3', '\x2', '\x2', '\x2', '\x660', '\x65A', '\x3', 
		'\x2', '\x2', '\x2', '\x660', '\x65E', '\x3', '\x2', '\x2', '\x2', '\x661', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x662', '\x663', '\a', 'h', '\x2', 
		'\x2', '\x663', '\x129', '\x3', '\x2', '\x2', '\x2', '\x664', '\x665', 
		'\a', '\x34', '\x2', '\x2', '\x665', '\x666', '\a', ';', '\x2', '\x2', 
		'\x666', '\x667', '\x5', '\x19E', '\xD0', '\x2', '\x667', '\x668', '\a', 
		'<', '\x2', '\x2', '\x668', '\x669', '\x5', '\x106', '\x84', '\x2', '\x669', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x66A', '\x66B', '\a', '\x34', '\x2', 
		'\x2', '\x66B', '\x66C', '\a', ';', '\x2', '\x2', '\x66C', '\x66D', '\x5', 
		'\x19E', '\xD0', '\x2', '\x66D', '\x66E', '\a', '<', '\x2', '\x2', '\x66E', 
		'\x66F', '\x5', '\x108', '\x85', '\x2', '\x66F', '\x12D', '\x3', '\x2', 
		'\x2', '\x2', '\x670', '\x671', '\a', '\xF', '\x2', '\x2', '\x671', '\x672', 
		'\x5', '\x106', '\x84', '\x2', '\x672', '\x673', '\a', '\x34', '\x2', 
		'\x2', '\x673', '\x674', '\a', ';', '\x2', '\x2', '\x674', '\x675', '\x5', 
		'\x19E', '\xD0', '\x2', '\x675', '\x676', '\a', '<', '\x2', '\x2', '\x676', 
		'\x677', '\a', '\x41', '\x2', '\x2', '\x677', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x678', '\x67B', '\x5', '\x134', '\x9B', '\x2', '\x679', '\x67B', 
		'\x5', '\x13E', '\xA0', '\x2', '\x67A', '\x678', '\x3', '\x2', '\x2', 
		'\x2', '\x67A', '\x679', '\x3', '\x2', '\x2', '\x2', '\x67B', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x67C', '\x67F', '\x5', '\x136', '\x9C', 
		'\x2', '\x67D', '\x67F', '\x5', '\x140', '\xA1', '\x2', '\x67E', '\x67C', 
		'\x3', '\x2', '\x2', '\x2', '\x67E', '\x67D', '\x3', '\x2', '\x2', '\x2', 
		'\x67F', '\x133', '\x3', '\x2', '\x2', '\x2', '\x680', '\x681', '\a', 
		'\x17', '\x2', '\x2', '\x681', '\x683', '\a', ';', '\x2', '\x2', '\x682', 
		'\x684', '\x5', '\x138', '\x9D', '\x2', '\x683', '\x682', '\x3', '\x2', 
		'\x2', '\x2', '\x683', '\x684', '\x3', '\x2', '\x2', '\x2', '\x684', '\x685', 
		'\x3', '\x2', '\x2', '\x2', '\x685', '\x687', '\a', '\x41', '\x2', '\x2', 
		'\x686', '\x688', '\x5', '\x19E', '\xD0', '\x2', '\x687', '\x686', '\x3', 
		'\x2', '\x2', '\x2', '\x687', '\x688', '\x3', '\x2', '\x2', '\x2', '\x688', 
		'\x689', '\x3', '\x2', '\x2', '\x2', '\x689', '\x68B', '\a', '\x41', '\x2', 
		'\x2', '\x68A', '\x68C', '\x5', '\x13A', '\x9E', '\x2', '\x68B', '\x68A', 
		'\x3', '\x2', '\x2', '\x2', '\x68B', '\x68C', '\x3', '\x2', '\x2', '\x2', 
		'\x68C', '\x68D', '\x3', '\x2', '\x2', '\x2', '\x68D', '\x68E', '\a', 
		'<', '\x2', '\x2', '\x68E', '\x68F', '\x5', '\x106', '\x84', '\x2', '\x68F', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x690', '\x691', '\a', '\x17', '\x2', 
		'\x2', '\x691', '\x693', '\a', ';', '\x2', '\x2', '\x692', '\x694', '\x5', 
		'\x138', '\x9D', '\x2', '\x693', '\x692', '\x3', '\x2', '\x2', '\x2', 
		'\x693', '\x694', '\x3', '\x2', '\x2', '\x2', '\x694', '\x695', '\x3', 
		'\x2', '\x2', '\x2', '\x695', '\x697', '\a', '\x41', '\x2', '\x2', '\x696', 
		'\x698', '\x5', '\x19E', '\xD0', '\x2', '\x697', '\x696', '\x3', '\x2', 
		'\x2', '\x2', '\x697', '\x698', '\x3', '\x2', '\x2', '\x2', '\x698', '\x699', 
		'\x3', '\x2', '\x2', '\x2', '\x699', '\x69B', '\a', '\x41', '\x2', '\x2', 
		'\x69A', '\x69C', '\x5', '\x13A', '\x9E', '\x2', '\x69B', '\x69A', '\x3', 
		'\x2', '\x2', '\x2', '\x69B', '\x69C', '\x3', '\x2', '\x2', '\x2', '\x69C', 
		'\x69D', '\x3', '\x2', '\x2', '\x2', '\x69D', '\x69E', '\a', '<', '\x2', 
		'\x2', '\x69E', '\x69F', '\x5', '\x108', '\x85', '\x2', '\x69F', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x6A0', '\x6A3', '\x5', '\x13C', '\x9F', 
		'\x2', '\x6A1', '\x6A3', '\x5', '\x104', '\x83', '\x2', '\x6A2', '\x6A0', 
		'\x3', '\x2', '\x2', '\x2', '\x6A2', '\x6A1', '\x3', '\x2', '\x2', '\x2', 
		'\x6A3', '\x139', '\x3', '\x2', '\x2', '\x2', '\x6A4', '\x6A5', '\x5', 
		'\x13C', '\x9F', '\x2', '\x6A5', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x6A6', '\x6AB', '\x5', '\x114', '\x8B', '\x2', '\x6A7', '\x6A8', '\a', 
		'\x42', '\x2', '\x2', '\x6A8', '\x6AA', '\x5', '\x114', '\x8B', '\x2', 
		'\x6A9', '\x6A7', '\x3', '\x2', '\x2', '\x2', '\x6AA', '\x6AD', '\x3', 
		'\x2', '\x2', '\x2', '\x6AB', '\x6A9', '\x3', '\x2', '\x2', '\x2', '\x6AB', 
		'\x6AC', '\x3', '\x2', '\x2', '\x2', '\x6AC', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x6AD', '\x6AB', '\x3', '\x2', '\x2', '\x2', '\x6AE', '\x6AF', 
		'\a', '\x17', '\x2', '\x2', '\x6AF', '\x6B3', '\a', ';', '\x2', '\x2', 
		'\x6B0', '\x6B2', '\x5', '\x9C', 'O', '\x2', '\x6B1', '\x6B0', '\x3', 
		'\x2', '\x2', '\x2', '\x6B2', '\x6B5', '\x3', '\x2', '\x2', '\x2', '\x6B3', 
		'\x6B1', '\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6B4', '\x3', '\x2', '\x2', 
		'\x2', '\x6B4', '\x6B6', '\x3', '\x2', '\x2', '\x2', '\x6B5', '\x6B3', 
		'\x3', '\x2', '\x2', '\x2', '\x6B6', '\x6B7', '\x5', 't', ';', '\x2', 
		'\x6B7', '\x6B8', '\x5', 'p', '\x39', '\x2', '\x6B8', '\x6B9', '\a', 'J', 
		'\x2', '\x2', '\x6B9', '\x6BA', '\x5', '\x19E', '\xD0', '\x2', '\x6BA', 
		'\x6BB', '\a', '<', '\x2', '\x2', '\x6BB', '\x6BC', '\x5', '\x106', '\x84', 
		'\x2', '\x6BC', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x6BD', '\x6BE', 
		'\a', '\x17', '\x2', '\x2', '\x6BE', '\x6C2', '\a', ';', '\x2', '\x2', 
		'\x6BF', '\x6C1', '\x5', '\x9C', 'O', '\x2', '\x6C0', '\x6BF', '\x3', 
		'\x2', '\x2', '\x2', '\x6C1', '\x6C4', '\x3', '\x2', '\x2', '\x2', '\x6C2', 
		'\x6C0', '\x3', '\x2', '\x2', '\x2', '\x6C2', '\x6C3', '\x3', '\x2', '\x2', 
		'\x2', '\x6C3', '\x6C5', '\x3', '\x2', '\x2', '\x2', '\x6C4', '\x6C2', 
		'\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6C6', '\x5', 't', ';', '\x2', 
		'\x6C6', '\x6C7', '\x5', 'p', '\x39', '\x2', '\x6C7', '\x6C8', '\a', 'J', 
		'\x2', '\x2', '\x6C8', '\x6C9', '\x5', '\x19E', '\xD0', '\x2', '\x6C9', 
		'\x6CA', '\a', '<', '\x2', '\x2', '\x6CA', '\x6CB', '\x5', '\x108', '\x85', 
		'\x2', '\x6CB', '\x141', '\x3', '\x2', '\x2', '\x2', '\x6CC', '\x6CE', 
		'\a', '\x6', '\x2', '\x2', '\x6CD', '\x6CF', '\a', 'h', '\x2', '\x2', 
		'\x6CE', '\x6CD', '\x3', '\x2', '\x2', '\x2', '\x6CE', '\x6CF', '\x3', 
		'\x2', '\x2', '\x2', '\x6CF', '\x6D0', '\x3', '\x2', '\x2', '\x2', '\x6D0', 
		'\x6D1', '\a', '\x41', '\x2', '\x2', '\x6D1', '\x143', '\x3', '\x2', '\x2', 
		'\x2', '\x6D2', '\x6D4', '\a', '\r', '\x2', '\x2', '\x6D3', '\x6D5', '\a', 
		'h', '\x2', '\x2', '\x6D4', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x6D4', 
		'\x6D5', '\x3', '\x2', '\x2', '\x2', '\x6D5', '\x6D6', '\x3', '\x2', '\x2', 
		'\x2', '\x6D6', '\x6D7', '\a', '\x41', '\x2', '\x2', '\x6D7', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x6D8', '\x6DA', '\a', '&', '\x2', '\x2', 
		'\x6D9', '\x6DB', '\x5', '\x19E', '\xD0', '\x2', '\x6DA', '\x6D9', '\x3', 
		'\x2', '\x2', '\x2', '\x6DA', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6DB', 
		'\x6DC', '\x3', '\x2', '\x2', '\x2', '\x6DC', '\x6DD', '\a', '\x41', '\x2', 
		'\x2', '\x6DD', '\x147', '\x3', '\x2', '\x2', '\x2', '\x6DE', '\x6DF', 
		'\a', '.', '\x2', '\x2', '\x6DF', '\x6E0', '\x5', '\x19E', '\xD0', '\x2', 
		'\x6E0', '\x6E1', '\a', '\x41', '\x2', '\x2', '\x6E1', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x6E2', '\x6E3', '\a', ',', '\x2', '\x2', '\x6E3', 
		'\x6E4', '\a', ';', '\x2', '\x2', '\x6E4', '\x6E5', '\x5', '\x19E', '\xD0', 
		'\x2', '\x6E5', '\x6E6', '\a', '<', '\x2', '\x2', '\x6E6', '\x6E7', '\x5', 
		'\xFC', '\x7F', '\x2', '\x6E7', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x6E8', 
		'\x6E9', '\a', '\x31', '\x2', '\x2', '\x6E9', '\x6EA', '\x5', '\xFC', 
		'\x7F', '\x2', '\x6EA', '\x6EB', '\x5', '\x14E', '\xA8', '\x2', '\x6EB', 
		'\x6F5', '\x3', '\x2', '\x2', '\x2', '\x6EC', '\x6ED', '\a', '\x31', '\x2', 
		'\x2', '\x6ED', '\x6EF', '\x5', '\xFC', '\x7F', '\x2', '\x6EE', '\x6F0', 
		'\x5', '\x14E', '\xA8', '\x2', '\x6EF', '\x6EE', '\x3', '\x2', '\x2', 
		'\x2', '\x6EF', '\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6F1', 
		'\x3', '\x2', '\x2', '\x2', '\x6F1', '\x6F2', '\x5', '\x156', '\xAC', 
		'\x2', '\x6F2', '\x6F5', '\x3', '\x2', '\x2', '\x2', '\x6F3', '\x6F5', 
		'\x5', '\x158', '\xAD', '\x2', '\x6F4', '\x6E8', '\x3', '\x2', '\x2', 
		'\x2', '\x6F4', '\x6EC', '\x3', '\x2', '\x2', '\x2', '\x6F4', '\x6F3', 
		'\x3', '\x2', '\x2', '\x2', '\x6F5', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x6F6', '\x6FA', '\x5', '\x150', '\xA9', '\x2', '\x6F7', '\x6F9', '\x5', 
		'\x150', '\xA9', '\x2', '\x6F8', '\x6F7', '\x3', '\x2', '\x2', '\x2', 
		'\x6F9', '\x6FC', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\x6F8', '\x3', 
		'\x2', '\x2', '\x2', '\x6FA', '\x6FB', '\x3', '\x2', '\x2', '\x2', '\x6FB', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x6FC', '\x6FA', '\x3', '\x2', '\x2', 
		'\x2', '\x6FD', '\x6FE', '\a', '\t', '\x2', '\x2', '\x6FE', '\x6FF', '\a', 
		';', '\x2', '\x2', '\x6FF', '\x700', '\x5', '\x152', '\xAA', '\x2', '\x700', 
		'\x701', '\a', '<', '\x2', '\x2', '\x701', '\x702', '\x5', '\xFC', '\x7F', 
		'\x2', '\x702', '\x151', '\x3', '\x2', '\x2', '\x2', '\x703', '\x705', 
		'\x5', '\x9C', 'O', '\x2', '\x704', '\x703', '\x3', '\x2', '\x2', '\x2', 
		'\x705', '\x708', '\x3', '\x2', '\x2', '\x2', '\x706', '\x704', '\x3', 
		'\x2', '\x2', '\x2', '\x706', '\x707', '\x3', '\x2', '\x2', '\x2', '\x707', 
		'\x709', '\x3', '\x2', '\x2', '\x2', '\x708', '\x706', '\x3', '\x2', '\x2', 
		'\x2', '\x709', '\x70A', '\x5', '\x154', '\xAB', '\x2', '\x70A', '\x70B', 
		'\x5', 'p', '\x39', '\x2', '\x70B', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x70C', '\x711', '\x5', '|', '?', '\x2', '\x70D', '\x70E', '\a', 'X', 
		'\x2', '\x2', '\x70E', '\x710', '\x5', '\x10', '\t', '\x2', '\x70F', '\x70D', 
		'\x3', '\x2', '\x2', '\x2', '\x710', '\x713', '\x3', '\x2', '\x2', '\x2', 
		'\x711', '\x70F', '\x3', '\x2', '\x2', '\x2', '\x711', '\x712', '\x3', 
		'\x2', '\x2', '\x2', '\x712', '\x155', '\x3', '\x2', '\x2', '\x2', '\x713', 
		'\x711', '\x3', '\x2', '\x2', '\x2', '\x714', '\x715', '\a', '\x15', '\x2', 
		'\x2', '\x715', '\x716', '\x5', '\xFC', '\x7F', '\x2', '\x716', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x717', '\x718', '\a', '\x31', '\x2', '\x2', 
		'\x718', '\x719', '\x5', '\x15A', '\xAE', '\x2', '\x719', '\x71B', '\x5', 
		'\xFC', '\x7F', '\x2', '\x71A', '\x71C', '\x5', '\x14E', '\xA8', '\x2', 
		'\x71B', '\x71A', '\x3', '\x2', '\x2', '\x2', '\x71B', '\x71C', '\x3', 
		'\x2', '\x2', '\x2', '\x71C', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x71D', 
		'\x71F', '\x5', '\x156', '\xAC', '\x2', '\x71E', '\x71D', '\x3', '\x2', 
		'\x2', '\x2', '\x71E', '\x71F', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '\x720', '\x721', '\a', ';', '\x2', '\x2', 
		'\x721', '\x723', '\x5', '\x15C', '\xAF', '\x2', '\x722', '\x724', '\a', 
		'\x41', '\x2', '\x2', '\x723', '\x722', '\x3', '\x2', '\x2', '\x2', '\x723', 
		'\x724', '\x3', '\x2', '\x2', '\x2', '\x724', '\x725', '\x3', '\x2', '\x2', 
		'\x2', '\x725', '\x726', '\a', '<', '\x2', '\x2', '\x726', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x727', '\x72C', '\x5', '\x15E', '\xB0', '\x2', 
		'\x728', '\x729', '\a', '\x41', '\x2', '\x2', '\x729', '\x72B', '\x5', 
		'\x15E', '\xB0', '\x2', '\x72A', '\x728', '\x3', '\x2', '\x2', '\x2', 
		'\x72B', '\x72E', '\x3', '\x2', '\x2', '\x2', '\x72C', '\x72A', '\x3', 
		'\x2', '\x2', '\x2', '\x72C', '\x72D', '\x3', '\x2', '\x2', '\x2', '\x72D', 
		'\x15D', '\x3', '\x2', '\x2', '\x2', '\x72E', '\x72C', '\x3', '\x2', '\x2', 
		'\x2', '\x72F', '\x731', '\x5', '\x9C', 'O', '\x2', '\x730', '\x72F', 
		'\x3', '\x2', '\x2', '\x2', '\x731', '\x734', '\x3', '\x2', '\x2', '\x2', 
		'\x732', '\x730', '\x3', '\x2', '\x2', '\x2', '\x732', '\x733', '\x3', 
		'\x2', '\x2', '\x2', '\x733', '\x735', '\x3', '\x2', '\x2', '\x2', '\x734', 
		'\x732', '\x3', '\x2', '\x2', '\x2', '\x735', '\x736', '\x5', 't', ';', 
		'\x2', '\x736', '\x737', '\x5', 'p', '\x39', '\x2', '\x737', '\x738', 
		'\a', '\x44', '\x2', '\x2', '\x738', '\x739', '\x5', '\x19E', '\xD0', 
		'\x2', '\x739', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x73A', '\x73D', 
		'\x5', '\x16E', '\xB8', '\x2', '\x73B', '\x73D', '\x5', '\x196', '\xCC', 
		'\x2', '\x73C', '\x73A', '\x3', '\x2', '\x2', '\x2', '\x73C', '\x73B', 
		'\x3', '\x2', '\x2', '\x2', '\x73D', '\x741', '\x3', '\x2', '\x2', '\x2', 
		'\x73E', '\x740', '\x5', '\x168', '\xB5', '\x2', '\x73F', '\x73E', '\x3', 
		'\x2', '\x2', '\x2', '\x740', '\x743', '\x3', '\x2', '\x2', '\x2', '\x741', 
		'\x73F', '\x3', '\x2', '\x2', '\x2', '\x741', '\x742', '\x3', '\x2', '\x2', 
		'\x2', '\x742', '\x161', '\x3', '\x2', '\x2', '\x2', '\x743', '\x741', 
		'\x3', '\x2', '\x2', '\x2', '\x744', '\x762', '\x5', '\x2', '\x2', '\x2', 
		'\x745', '\x74A', '\x5', '\x36', '\x1C', '\x2', '\x746', '\x747', '\a', 
		'?', '\x2', '\x2', '\x747', '\x749', '\a', '@', '\x2', '\x2', '\x748', 
		'\x746', '\x3', '\x2', '\x2', '\x2', '\x749', '\x74C', '\x3', '\x2', '\x2', 
		'\x2', '\x74A', '\x748', '\x3', '\x2', '\x2', '\x2', '\x74A', '\x74B', 
		'\x3', '\x2', '\x2', '\x2', '\x74B', '\x74D', '\x3', '\x2', '\x2', '\x2', 
		'\x74C', '\x74A', '\x3', '\x2', '\x2', '\x2', '\x74D', '\x74E', '\a', 
		'\x43', '\x2', '\x2', '\x74E', '\x74F', '\a', '\v', '\x2', '\x2', '\x74F', 
		'\x762', '\x3', '\x2', '\x2', '\x2', '\x750', '\x751', '\a', '\x32', '\x2', 
		'\x2', '\x751', '\x752', '\a', '\x43', '\x2', '\x2', '\x752', '\x762', 
		'\a', '\v', '\x2', '\x2', '\x753', '\x762', '\a', '-', '\x2', '\x2', '\x754', 
		'\x755', '\x5', '\x36', '\x1C', '\x2', '\x755', '\x756', '\a', '\x43', 
		'\x2', '\x2', '\x756', '\x757', '\a', '-', '\x2', '\x2', '\x757', '\x762', 
		'\x3', '\x2', '\x2', '\x2', '\x758', '\x759', '\a', ';', '\x2', '\x2', 
		'\x759', '\x75A', '\x5', '\x19E', '\xD0', '\x2', '\x75A', '\x75B', '\a', 
		'<', '\x2', '\x2', '\x75B', '\x762', '\x3', '\x2', '\x2', '\x2', '\x75C', 
		'\x762', '\x5', '\x174', '\xBB', '\x2', '\x75D', '\x762', '\x5', '\x17C', 
		'\xBF', '\x2', '\x75E', '\x762', '\x5', '\x182', '\xC2', '\x2', '\x75F', 
		'\x762', '\x5', '\x188', '\xC5', '\x2', '\x760', '\x762', '\x5', '\x190', 
		'\xC9', '\x2', '\x761', '\x744', '\x3', '\x2', '\x2', '\x2', '\x761', 
		'\x745', '\x3', '\x2', '\x2', '\x2', '\x761', '\x750', '\x3', '\x2', '\x2', 
		'\x2', '\x761', '\x753', '\x3', '\x2', '\x2', '\x2', '\x761', '\x754', 
		'\x3', '\x2', '\x2', '\x2', '\x761', '\x758', '\x3', '\x2', '\x2', '\x2', 
		'\x761', '\x75C', '\x3', '\x2', '\x2', '\x2', '\x761', '\x75D', '\x3', 
		'\x2', '\x2', '\x2', '\x761', '\x75E', '\x3', '\x2', '\x2', '\x2', '\x761', 
		'\x75F', '\x3', '\x2', '\x2', '\x2', '\x761', '\x760', '\x3', '\x2', '\x2', 
		'\x2', '\x762', '\x163', '\x3', '\x2', '\x2', '\x2', '\x763', '\x764', 
		'\x3', '\x2', '\x2', '\x2', '\x764', '\x165', '\x3', '\x2', '\x2', '\x2', 
		'\x765', '\x782', '\x5', '\x2', '\x2', '\x2', '\x766', '\x76B', '\x5', 
		'\x36', '\x1C', '\x2', '\x767', '\x768', '\a', '?', '\x2', '\x2', '\x768', 
		'\x76A', '\a', '@', '\x2', '\x2', '\x769', '\x767', '\x3', '\x2', '\x2', 
		'\x2', '\x76A', '\x76D', '\x3', '\x2', '\x2', '\x2', '\x76B', '\x769', 
		'\x3', '\x2', '\x2', '\x2', '\x76B', '\x76C', '\x3', '\x2', '\x2', '\x2', 
		'\x76C', '\x76E', '\x3', '\x2', '\x2', '\x2', '\x76D', '\x76B', '\x3', 
		'\x2', '\x2', '\x2', '\x76E', '\x76F', '\a', '\x43', '\x2', '\x2', '\x76F', 
		'\x770', '\a', '\v', '\x2', '\x2', '\x770', '\x782', '\x3', '\x2', '\x2', 
		'\x2', '\x771', '\x772', '\a', '\x32', '\x2', '\x2', '\x772', '\x773', 
		'\a', '\x43', '\x2', '\x2', '\x773', '\x782', '\a', '\v', '\x2', '\x2', 
		'\x774', '\x782', '\a', '-', '\x2', '\x2', '\x775', '\x776', '\x5', '\x36', 
		'\x1C', '\x2', '\x776', '\x777', '\a', '\x43', '\x2', '\x2', '\x777', 
		'\x778', '\a', '-', '\x2', '\x2', '\x778', '\x782', '\x3', '\x2', '\x2', 
		'\x2', '\x779', '\x77A', '\a', ';', '\x2', '\x2', '\x77A', '\x77B', '\x5', 
		'\x19E', '\xD0', '\x2', '\x77B', '\x77C', '\a', '<', '\x2', '\x2', '\x77C', 
		'\x782', '\x3', '\x2', '\x2', '\x2', '\x77D', '\x782', '\x5', '\x174', 
		'\xBB', '\x2', '\x77E', '\x782', '\x5', '\x17C', '\xBF', '\x2', '\x77F', 
		'\x782', '\x5', '\x188', '\xC5', '\x2', '\x780', '\x782', '\x5', '\x190', 
		'\xC9', '\x2', '\x781', '\x765', '\x3', '\x2', '\x2', '\x2', '\x781', 
		'\x766', '\x3', '\x2', '\x2', '\x2', '\x781', '\x771', '\x3', '\x2', '\x2', 
		'\x2', '\x781', '\x774', '\x3', '\x2', '\x2', '\x2', '\x781', '\x775', 
		'\x3', '\x2', '\x2', '\x2', '\x781', '\x779', '\x3', '\x2', '\x2', '\x2', 
		'\x781', '\x77D', '\x3', '\x2', '\x2', '\x2', '\x781', '\x77E', '\x3', 
		'\x2', '\x2', '\x2', '\x781', '\x77F', '\x3', '\x2', '\x2', '\x2', '\x781', 
		'\x780', '\x3', '\x2', '\x2', '\x2', '\x782', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x783', '\x789', '\x5', '\x176', '\xBC', '\x2', '\x784', '\x789', 
		'\x5', '\x17E', '\xC0', '\x2', '\x785', '\x789', '\x5', '\x184', '\xC3', 
		'\x2', '\x786', '\x789', '\x5', '\x18A', '\xC6', '\x2', '\x787', '\x789', 
		'\x5', '\x192', '\xCA', '\x2', '\x788', '\x783', '\x3', '\x2', '\x2', 
		'\x2', '\x788', '\x784', '\x3', '\x2', '\x2', '\x2', '\x788', '\x785', 
		'\x3', '\x2', '\x2', '\x2', '\x788', '\x786', '\x3', '\x2', '\x2', '\x2', 
		'\x788', '\x787', '\x3', '\x2', '\x2', '\x2', '\x789', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x78A', '\x78B', '\x3', '\x2', '\x2', '\x2', '\x78B', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x78C', '\x791', '\x5', '\x176', 
		'\xBC', '\x2', '\x78D', '\x791', '\x5', '\x17E', '\xC0', '\x2', '\x78E', 
		'\x791', '\x5', '\x18A', '\xC6', '\x2', '\x78F', '\x791', '\x5', '\x192', 
		'\xCA', '\x2', '\x790', '\x78C', '\x3', '\x2', '\x2', '\x2', '\x790', 
		'\x78D', '\x3', '\x2', '\x2', '\x2', '\x790', '\x78E', '\x3', '\x2', '\x2', 
		'\x2', '\x790', '\x78F', '\x3', '\x2', '\x2', '\x2', '\x791', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x792', '\x7BB', '\x5', '\x2', '\x2', '\x2', 
		'\x793', '\x798', '\x5', '\x36', '\x1C', '\x2', '\x794', '\x795', '\a', 
		'?', '\x2', '\x2', '\x795', '\x797', '\a', '@', '\x2', '\x2', '\x796', 
		'\x794', '\x3', '\x2', '\x2', '\x2', '\x797', '\x79A', '\x3', '\x2', '\x2', 
		'\x2', '\x798', '\x796', '\x3', '\x2', '\x2', '\x2', '\x798', '\x799', 
		'\x3', '\x2', '\x2', '\x2', '\x799', '\x79B', '\x3', '\x2', '\x2', '\x2', 
		'\x79A', '\x798', '\x3', '\x2', '\x2', '\x2', '\x79B', '\x79C', '\a', 
		'\x43', '\x2', '\x2', '\x79C', '\x79D', '\a', '\v', '\x2', '\x2', '\x79D', 
		'\x7BB', '\x3', '\x2', '\x2', '\x2', '\x79E', '\x7A3', '\x5', 'v', '<', 
		'\x2', '\x79F', '\x7A0', '\a', '?', '\x2', '\x2', '\x7A0', '\x7A2', '\a', 
		'@', '\x2', '\x2', '\x7A1', '\x79F', '\x3', '\x2', '\x2', '\x2', '\x7A2', 
		'\x7A5', '\x3', '\x2', '\x2', '\x2', '\x7A3', '\x7A1', '\x3', '\x2', '\x2', 
		'\x2', '\x7A3', '\x7A4', '\x3', '\x2', '\x2', '\x2', '\x7A4', '\x7A6', 
		'\x3', '\x2', '\x2', '\x2', '\x7A5', '\x7A3', '\x3', '\x2', '\x2', '\x2', 
		'\x7A6', '\x7A7', '\a', '\x43', '\x2', '\x2', '\x7A7', '\x7A8', '\a', 
		'\v', '\x2', '\x2', '\x7A8', '\x7BB', '\x3', '\x2', '\x2', '\x2', '\x7A9', 
		'\x7AA', '\a', '\x32', '\x2', '\x2', '\x7AA', '\x7AB', '\a', '\x43', '\x2', 
		'\x2', '\x7AB', '\x7BB', '\a', '\v', '\x2', '\x2', '\x7AC', '\x7BB', '\a', 
		'-', '\x2', '\x2', '\x7AD', '\x7AE', '\x5', '\x36', '\x1C', '\x2', '\x7AE', 
		'\x7AF', '\a', '\x43', '\x2', '\x2', '\x7AF', '\x7B0', '\a', '-', '\x2', 
		'\x2', '\x7B0', '\x7BB', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7B2', 
		'\a', ';', '\x2', '\x2', '\x7B2', '\x7B3', '\x5', '\x19E', '\xD0', '\x2', 
		'\x7B3', '\x7B4', '\a', '<', '\x2', '\x2', '\x7B4', '\x7BB', '\x3', '\x2', 
		'\x2', '\x2', '\x7B5', '\x7BB', '\x5', '\x178', '\xBD', '\x2', '\x7B6', 
		'\x7BB', '\x5', '\x180', '\xC1', '\x2', '\x7B7', '\x7BB', '\x5', '\x186', 
		'\xC4', '\x2', '\x7B8', '\x7BB', '\x5', '\x18C', '\xC7', '\x2', '\x7B9', 
		'\x7BB', '\x5', '\x194', '\xCB', '\x2', '\x7BA', '\x792', '\x3', '\x2', 
		'\x2', '\x2', '\x7BA', '\x793', '\x3', '\x2', '\x2', '\x2', '\x7BA', '\x79E', 
		'\x3', '\x2', '\x2', '\x2', '\x7BA', '\x7A9', '\x3', '\x2', '\x2', '\x2', 
		'\x7BA', '\x7AC', '\x3', '\x2', '\x2', '\x2', '\x7BA', '\x7AD', '\x3', 
		'\x2', '\x2', '\x2', '\x7BA', '\x7B1', '\x3', '\x2', '\x2', '\x2', '\x7BA', 
		'\x7B5', '\x3', '\x2', '\x2', '\x2', '\x7BA', '\x7B6', '\x3', '\x2', '\x2', 
		'\x2', '\x7BA', '\x7B7', '\x3', '\x2', '\x2', '\x2', '\x7BA', '\x7B8', 
		'\x3', '\x2', '\x2', '\x2', '\x7BA', '\x7B9', '\x3', '\x2', '\x2', '\x2', 
		'\x7BB', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x7BC', '\x7BD', '\x3', 
		'\x2', '\x2', '\x2', '\x7BD', '\x171', '\x3', '\x2', '\x2', '\x2', '\x7BE', 
		'\x7E6', '\x5', '\x2', '\x2', '\x2', '\x7BF', '\x7C4', '\x5', '\x36', 
		'\x1C', '\x2', '\x7C0', '\x7C1', '\a', '?', '\x2', '\x2', '\x7C1', '\x7C3', 
		'\a', '@', '\x2', '\x2', '\x7C2', '\x7C0', '\x3', '\x2', '\x2', '\x2', 
		'\x7C3', '\x7C6', '\x3', '\x2', '\x2', '\x2', '\x7C4', '\x7C2', '\x3', 
		'\x2', '\x2', '\x2', '\x7C4', '\x7C5', '\x3', '\x2', '\x2', '\x2', '\x7C5', 
		'\x7C7', '\x3', '\x2', '\x2', '\x2', '\x7C6', '\x7C4', '\x3', '\x2', '\x2', 
		'\x2', '\x7C7', '\x7C8', '\a', '\x43', '\x2', '\x2', '\x7C8', '\x7C9', 
		'\a', '\v', '\x2', '\x2', '\x7C9', '\x7E6', '\x3', '\x2', '\x2', '\x2', 
		'\x7CA', '\x7CF', '\x5', 'v', '<', '\x2', '\x7CB', '\x7CC', '\a', '?', 
		'\x2', '\x2', '\x7CC', '\x7CE', '\a', '@', '\x2', '\x2', '\x7CD', '\x7CB', 
		'\x3', '\x2', '\x2', '\x2', '\x7CE', '\x7D1', '\x3', '\x2', '\x2', '\x2', 
		'\x7CF', '\x7CD', '\x3', '\x2', '\x2', '\x2', '\x7CF', '\x7D0', '\x3', 
		'\x2', '\x2', '\x2', '\x7D0', '\x7D2', '\x3', '\x2', '\x2', '\x2', '\x7D1', 
		'\x7CF', '\x3', '\x2', '\x2', '\x2', '\x7D2', '\x7D3', '\a', '\x43', '\x2', 
		'\x2', '\x7D3', '\x7D4', '\a', '\v', '\x2', '\x2', '\x7D4', '\x7E6', '\x3', 
		'\x2', '\x2', '\x2', '\x7D5', '\x7D6', '\a', '\x32', '\x2', '\x2', '\x7D6', 
		'\x7D7', '\a', '\x43', '\x2', '\x2', '\x7D7', '\x7E6', '\a', '\v', '\x2', 
		'\x2', '\x7D8', '\x7E6', '\a', '-', '\x2', '\x2', '\x7D9', '\x7DA', '\x5', 
		'\x36', '\x1C', '\x2', '\x7DA', '\x7DB', '\a', '\x43', '\x2', '\x2', '\x7DB', 
		'\x7DC', '\a', '-', '\x2', '\x2', '\x7DC', '\x7E6', '\x3', '\x2', '\x2', 
		'\x2', '\x7DD', '\x7DE', '\a', ';', '\x2', '\x2', '\x7DE', '\x7DF', '\x5', 
		'\x19E', '\xD0', '\x2', '\x7DF', '\x7E0', '\a', '<', '\x2', '\x2', '\x7E0', 
		'\x7E6', '\x3', '\x2', '\x2', '\x2', '\x7E1', '\x7E6', '\x5', '\x178', 
		'\xBD', '\x2', '\x7E2', '\x7E6', '\x5', '\x180', '\xC1', '\x2', '\x7E3', 
		'\x7E6', '\x5', '\x18C', '\xC7', '\x2', '\x7E4', '\x7E6', '\x5', '\x194', 
		'\xCB', '\x2', '\x7E5', '\x7BE', '\x3', '\x2', '\x2', '\x2', '\x7E5', 
		'\x7BF', '\x3', '\x2', '\x2', '\x2', '\x7E5', '\x7CA', '\x3', '\x2', '\x2', 
		'\x2', '\x7E5', '\x7D5', '\x3', '\x2', '\x2', '\x2', '\x7E5', '\x7D8', 
		'\x3', '\x2', '\x2', '\x2', '\x7E5', '\x7D9', '\x3', '\x2', '\x2', '\x2', 
		'\x7E5', '\x7DD', '\x3', '\x2', '\x2', '\x2', '\x7E5', '\x7E1', '\x3', 
		'\x2', '\x2', '\x2', '\x7E5', '\x7E2', '\x3', '\x2', '\x2', '\x2', '\x7E5', 
		'\x7E3', '\x3', '\x2', '\x2', '\x2', '\x7E5', '\x7E4', '\x3', '\x2', '\x2', 
		'\x2', '\x7E6', '\x173', '\x3', '\x2', '\x2', '\x2', '\x7E7', '\x7E9', 
		'\a', '!', '\x2', '\x2', '\x7E8', '\x7EA', '\x5', '*', '\x16', '\x2', 
		'\x7E9', '\x7E8', '\x3', '\x2', '\x2', '\x2', '\x7E9', '\x7EA', '\x3', 
		'\x2', '\x2', '\x2', '\x7EA', '\x7EE', '\x3', '\x2', '\x2', '\x2', '\x7EB', 
		'\x7ED', '\x5', '\xE6', 't', '\x2', '\x7EC', '\x7EB', '\x3', '\x2', '\x2', 
		'\x2', '\x7ED', '\x7F0', '\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7EC', 
		'\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7EF', '\x3', '\x2', '\x2', '\x2', 
		'\x7EF', '\x7F1', '\x3', '\x2', '\x2', '\x2', '\x7F0', '\x7EE', '\x3', 
		'\x2', '\x2', '\x2', '\x7F1', '\x7FC', '\a', 'h', '\x2', '\x2', '\x7F2', 
		'\x7F6', '\a', '\x43', '\x2', '\x2', '\x7F3', '\x7F5', '\x5', '\xE6', 
		't', '\x2', '\x7F4', '\x7F3', '\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7F8', 
		'\x3', '\x2', '\x2', '\x2', '\x7F6', '\x7F4', '\x3', '\x2', '\x2', '\x2', 
		'\x7F6', '\x7F7', '\x3', '\x2', '\x2', '\x2', '\x7F7', '\x7F9', '\x3', 
		'\x2', '\x2', '\x2', '\x7F8', '\x7F6', '\x3', '\x2', '\x2', '\x2', '\x7F9', 
		'\x7FB', '\a', 'h', '\x2', '\x2', '\x7FA', '\x7F2', '\x3', '\x2', '\x2', 
		'\x2', '\x7FB', '\x7FE', '\x3', '\x2', '\x2', '\x2', '\x7FC', '\x7FA', 
		'\x3', '\x2', '\x2', '\x2', '\x7FC', '\x7FD', '\x3', '\x2', '\x2', '\x2', 
		'\x7FD', '\x800', '\x3', '\x2', '\x2', '\x2', '\x7FE', '\x7FC', '\x3', 
		'\x2', '\x2', '\x2', '\x7FF', '\x801', '\x5', '\x17A', '\xBE', '\x2', 
		'\x800', '\x7FF', '\x3', '\x2', '\x2', '\x2', '\x800', '\x801', '\x3', 
		'\x2', '\x2', '\x2', '\x801', '\x802', '\x3', '\x2', '\x2', '\x2', '\x802', 
		'\x804', '\a', ';', '\x2', '\x2', '\x803', '\x805', '\x5', '\x18E', '\xC8', 
		'\x2', '\x804', '\x803', '\x3', '\x2', '\x2', '\x2', '\x804', '\x805', 
		'\x3', '\x2', '\x2', '\x2', '\x805', '\x806', '\x3', '\x2', '\x2', '\x2', 
		'\x806', '\x808', '\a', '<', '\x2', '\x2', '\x807', '\x809', '\x5', '\x62', 
		'\x32', '\x2', '\x808', '\x807', '\x3', '\x2', '\x2', '\x2', '\x808', 
		'\x809', '\x3', '\x2', '\x2', '\x2', '\x809', '\x83B', '\x3', '\x2', '\x2', 
		'\x2', '\x80A', '\x80B', '\x5', ':', '\x1E', '\x2', '\x80B', '\x80C', 
		'\a', '\x43', '\x2', '\x2', '\x80C', '\x80E', '\a', '!', '\x2', '\x2', 
		'\x80D', '\x80F', '\x5', '*', '\x16', '\x2', '\x80E', '\x80D', '\x3', 
		'\x2', '\x2', '\x2', '\x80E', '\x80F', '\x3', '\x2', '\x2', '\x2', '\x80F', 
		'\x813', '\x3', '\x2', '\x2', '\x2', '\x810', '\x812', '\x5', '\xE6', 
		't', '\x2', '\x811', '\x810', '\x3', '\x2', '\x2', '\x2', '\x812', '\x815', 
		'\x3', '\x2', '\x2', '\x2', '\x813', '\x811', '\x3', '\x2', '\x2', '\x2', 
		'\x813', '\x814', '\x3', '\x2', '\x2', '\x2', '\x814', '\x816', '\x3', 
		'\x2', '\x2', '\x2', '\x815', '\x813', '\x3', '\x2', '\x2', '\x2', '\x816', 
		'\x818', '\a', 'h', '\x2', '\x2', '\x817', '\x819', '\x5', '\x17A', '\xBE', 
		'\x2', '\x818', '\x817', '\x3', '\x2', '\x2', '\x2', '\x818', '\x819', 
		'\x3', '\x2', '\x2', '\x2', '\x819', '\x81A', '\x3', '\x2', '\x2', '\x2', 
		'\x81A', '\x81C', '\a', ';', '\x2', '\x2', '\x81B', '\x81D', '\x5', '\x18E', 
		'\xC8', '\x2', '\x81C', '\x81B', '\x3', '\x2', '\x2', '\x2', '\x81C', 
		'\x81D', '\x3', '\x2', '\x2', '\x2', '\x81D', '\x81E', '\x3', '\x2', '\x2', 
		'\x2', '\x81E', '\x820', '\a', '<', '\x2', '\x2', '\x81F', '\x821', '\x5', 
		'\x62', '\x32', '\x2', '\x820', '\x81F', '\x3', '\x2', '\x2', '\x2', '\x820', 
		'\x821', '\x3', '\x2', '\x2', '\x2', '\x821', '\x83B', '\x3', '\x2', '\x2', 
		'\x2', '\x822', '\x823', '\x5', '\x160', '\xB1', '\x2', '\x823', '\x824', 
		'\a', '\x43', '\x2', '\x2', '\x824', '\x826', '\a', '!', '\x2', '\x2', 
		'\x825', '\x827', '\x5', '*', '\x16', '\x2', '\x826', '\x825', '\x3', 
		'\x2', '\x2', '\x2', '\x826', '\x827', '\x3', '\x2', '\x2', '\x2', '\x827', 
		'\x82B', '\x3', '\x2', '\x2', '\x2', '\x828', '\x82A', '\x5', '\xE6', 
		't', '\x2', '\x829', '\x828', '\x3', '\x2', '\x2', '\x2', '\x82A', '\x82D', 
		'\x3', '\x2', '\x2', '\x2', '\x82B', '\x829', '\x3', '\x2', '\x2', '\x2', 
		'\x82B', '\x82C', '\x3', '\x2', '\x2', '\x2', '\x82C', '\x82E', '\x3', 
		'\x2', '\x2', '\x2', '\x82D', '\x82B', '\x3', '\x2', '\x2', '\x2', '\x82E', 
		'\x830', '\a', 'h', '\x2', '\x2', '\x82F', '\x831', '\x5', '\x17A', '\xBE', 
		'\x2', '\x830', '\x82F', '\x3', '\x2', '\x2', '\x2', '\x830', '\x831', 
		'\x3', '\x2', '\x2', '\x2', '\x831', '\x832', '\x3', '\x2', '\x2', '\x2', 
		'\x832', '\x834', '\a', ';', '\x2', '\x2', '\x833', '\x835', '\x5', '\x18E', 
		'\xC8', '\x2', '\x834', '\x833', '\x3', '\x2', '\x2', '\x2', '\x834', 
		'\x835', '\x3', '\x2', '\x2', '\x2', '\x835', '\x836', '\x3', '\x2', '\x2', 
		'\x2', '\x836', '\x838', '\a', '<', '\x2', '\x2', '\x837', '\x839', '\x5', 
		'\x62', '\x32', '\x2', '\x838', '\x837', '\x3', '\x2', '\x2', '\x2', '\x838', 
		'\x839', '\x3', '\x2', '\x2', '\x2', '\x839', '\x83B', '\x3', '\x2', '\x2', 
		'\x2', '\x83A', '\x7E7', '\x3', '\x2', '\x2', '\x2', '\x83A', '\x80A', 
		'\x3', '\x2', '\x2', '\x2', '\x83A', '\x822', '\x3', '\x2', '\x2', '\x2', 
		'\x83B', '\x175', '\x3', '\x2', '\x2', '\x2', '\x83C', '\x83D', '\a', 
		'\x43', '\x2', '\x2', '\x83D', '\x83F', '\a', '!', '\x2', '\x2', '\x83E', 
		'\x840', '\x5', '*', '\x16', '\x2', '\x83F', '\x83E', '\x3', '\x2', '\x2', 
		'\x2', '\x83F', '\x840', '\x3', '\x2', '\x2', '\x2', '\x840', '\x844', 
		'\x3', '\x2', '\x2', '\x2', '\x841', '\x843', '\x5', '\xE6', 't', '\x2', 
		'\x842', '\x841', '\x3', '\x2', '\x2', '\x2', '\x843', '\x846', '\x3', 
		'\x2', '\x2', '\x2', '\x844', '\x842', '\x3', '\x2', '\x2', '\x2', '\x844', 
		'\x845', '\x3', '\x2', '\x2', '\x2', '\x845', '\x847', '\x3', '\x2', '\x2', 
		'\x2', '\x846', '\x844', '\x3', '\x2', '\x2', '\x2', '\x847', '\x849', 
		'\a', 'h', '\x2', '\x2', '\x848', '\x84A', '\x5', '\x17A', '\xBE', '\x2', 
		'\x849', '\x848', '\x3', '\x2', '\x2', '\x2', '\x849', '\x84A', '\x3', 
		'\x2', '\x2', '\x2', '\x84A', '\x84B', '\x3', '\x2', '\x2', '\x2', '\x84B', 
		'\x84D', '\a', ';', '\x2', '\x2', '\x84C', '\x84E', '\x5', '\x18E', '\xC8', 
		'\x2', '\x84D', '\x84C', '\x3', '\x2', '\x2', '\x2', '\x84D', '\x84E', 
		'\x3', '\x2', '\x2', '\x2', '\x84E', '\x84F', '\x3', '\x2', '\x2', '\x2', 
		'\x84F', '\x851', '\a', '<', '\x2', '\x2', '\x850', '\x852', '\x5', '\x62', 
		'\x32', '\x2', '\x851', '\x850', '\x3', '\x2', '\x2', '\x2', '\x851', 
		'\x852', '\x3', '\x2', '\x2', '\x2', '\x852', '\x177', '\x3', '\x2', '\x2', 
		'\x2', '\x853', '\x855', '\a', '!', '\x2', '\x2', '\x854', '\x856', '\x5', 
		'*', '\x16', '\x2', '\x855', '\x854', '\x3', '\x2', '\x2', '\x2', '\x855', 
		'\x856', '\x3', '\x2', '\x2', '\x2', '\x856', '\x85A', '\x3', '\x2', '\x2', 
		'\x2', '\x857', '\x859', '\x5', '\xE6', 't', '\x2', '\x858', '\x857', 
		'\x3', '\x2', '\x2', '\x2', '\x859', '\x85C', '\x3', '\x2', '\x2', '\x2', 
		'\x85A', '\x858', '\x3', '\x2', '\x2', '\x2', '\x85A', '\x85B', '\x3', 
		'\x2', '\x2', '\x2', '\x85B', '\x85D', '\x3', '\x2', '\x2', '\x2', '\x85C', 
		'\x85A', '\x3', '\x2', '\x2', '\x2', '\x85D', '\x868', '\a', 'h', '\x2', 
		'\x2', '\x85E', '\x862', '\a', '\x43', '\x2', '\x2', '\x85F', '\x861', 
		'\x5', '\xE6', 't', '\x2', '\x860', '\x85F', '\x3', '\x2', '\x2', '\x2', 
		'\x861', '\x864', '\x3', '\x2', '\x2', '\x2', '\x862', '\x860', '\x3', 
		'\x2', '\x2', '\x2', '\x862', '\x863', '\x3', '\x2', '\x2', '\x2', '\x863', 
		'\x865', '\x3', '\x2', '\x2', '\x2', '\x864', '\x862', '\x3', '\x2', '\x2', 
		'\x2', '\x865', '\x867', '\a', 'h', '\x2', '\x2', '\x866', '\x85E', '\x3', 
		'\x2', '\x2', '\x2', '\x867', '\x86A', '\x3', '\x2', '\x2', '\x2', '\x868', 
		'\x866', '\x3', '\x2', '\x2', '\x2', '\x868', '\x869', '\x3', '\x2', '\x2', 
		'\x2', '\x869', '\x86C', '\x3', '\x2', '\x2', '\x2', '\x86A', '\x868', 
		'\x3', '\x2', '\x2', '\x2', '\x86B', '\x86D', '\x5', '\x17A', '\xBE', 
		'\x2', '\x86C', '\x86B', '\x3', '\x2', '\x2', '\x2', '\x86C', '\x86D', 
		'\x3', '\x2', '\x2', '\x2', '\x86D', '\x86E', '\x3', '\x2', '\x2', '\x2', 
		'\x86E', '\x870', '\a', ';', '\x2', '\x2', '\x86F', '\x871', '\x5', '\x18E', 
		'\xC8', '\x2', '\x870', '\x86F', '\x3', '\x2', '\x2', '\x2', '\x870', 
		'\x871', '\x3', '\x2', '\x2', '\x2', '\x871', '\x872', '\x3', '\x2', '\x2', 
		'\x2', '\x872', '\x874', '\a', '<', '\x2', '\x2', '\x873', '\x875', '\x5', 
		'\x62', '\x32', '\x2', '\x874', '\x873', '\x3', '\x2', '\x2', '\x2', '\x874', 
		'\x875', '\x3', '\x2', '\x2', '\x2', '\x875', '\x88F', '\x3', '\x2', '\x2', 
		'\x2', '\x876', '\x877', '\x5', ':', '\x1E', '\x2', '\x877', '\x878', 
		'\a', '\x43', '\x2', '\x2', '\x878', '\x87A', '\a', '!', '\x2', '\x2', 
		'\x879', '\x87B', '\x5', '*', '\x16', '\x2', '\x87A', '\x879', '\x3', 
		'\x2', '\x2', '\x2', '\x87A', '\x87B', '\x3', '\x2', '\x2', '\x2', '\x87B', 
		'\x87F', '\x3', '\x2', '\x2', '\x2', '\x87C', '\x87E', '\x5', '\xE6', 
		't', '\x2', '\x87D', '\x87C', '\x3', '\x2', '\x2', '\x2', '\x87E', '\x881', 
		'\x3', '\x2', '\x2', '\x2', '\x87F', '\x87D', '\x3', '\x2', '\x2', '\x2', 
		'\x87F', '\x880', '\x3', '\x2', '\x2', '\x2', '\x880', '\x882', '\x3', 
		'\x2', '\x2', '\x2', '\x881', '\x87F', '\x3', '\x2', '\x2', '\x2', '\x882', 
		'\x884', '\a', 'h', '\x2', '\x2', '\x883', '\x885', '\x5', '\x17A', '\xBE', 
		'\x2', '\x884', '\x883', '\x3', '\x2', '\x2', '\x2', '\x884', '\x885', 
		'\x3', '\x2', '\x2', '\x2', '\x885', '\x886', '\x3', '\x2', '\x2', '\x2', 
		'\x886', '\x888', '\a', ';', '\x2', '\x2', '\x887', '\x889', '\x5', '\x18E', 
		'\xC8', '\x2', '\x888', '\x887', '\x3', '\x2', '\x2', '\x2', '\x888', 
		'\x889', '\x3', '\x2', '\x2', '\x2', '\x889', '\x88A', '\x3', '\x2', '\x2', 
		'\x2', '\x88A', '\x88C', '\a', '<', '\x2', '\x2', '\x88B', '\x88D', '\x5', 
		'\x62', '\x32', '\x2', '\x88C', '\x88B', '\x3', '\x2', '\x2', '\x2', '\x88C', 
		'\x88D', '\x3', '\x2', '\x2', '\x2', '\x88D', '\x88F', '\x3', '\x2', '\x2', 
		'\x2', '\x88E', '\x853', '\x3', '\x2', '\x2', '\x2', '\x88E', '\x876', 
		'\x3', '\x2', '\x2', '\x2', '\x88F', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x890', '\x894', '\x5', '*', '\x16', '\x2', '\x891', '\x892', '\a', '\x46', 
		'\x2', '\x2', '\x892', '\x894', '\a', '\x45', '\x2', '\x2', '\x893', '\x890', 
		'\x3', '\x2', '\x2', '\x2', '\x893', '\x891', '\x3', '\x2', '\x2', '\x2', 
		'\x894', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x895', '\x896', '\x5', 
		'\x160', '\xB1', '\x2', '\x896', '\x897', '\a', '\x43', '\x2', '\x2', 
		'\x897', '\x898', '\a', 'h', '\x2', '\x2', '\x898', '\x8A3', '\x3', '\x2', 
		'\x2', '\x2', '\x899', '\x89A', '\a', '*', '\x2', '\x2', '\x89A', '\x89B', 
		'\a', '\x43', '\x2', '\x2', '\x89B', '\x8A3', '\a', 'h', '\x2', '\x2', 
		'\x89C', '\x89D', '\x5', '\x36', '\x1C', '\x2', '\x89D', '\x89E', '\a', 
		'\x43', '\x2', '\x2', '\x89E', '\x89F', '\a', '*', '\x2', '\x2', '\x89F', 
		'\x8A0', '\a', '\x43', '\x2', '\x2', '\x8A0', '\x8A1', '\a', 'h', '\x2', 
		'\x2', '\x8A1', '\x8A3', '\x3', '\x2', '\x2', '\x2', '\x8A2', '\x895', 
		'\x3', '\x2', '\x2', '\x2', '\x8A2', '\x899', '\x3', '\x2', '\x2', '\x2', 
		'\x8A2', '\x89C', '\x3', '\x2', '\x2', '\x2', '\x8A3', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x8A4', '\x8A5', '\a', '\x43', '\x2', '\x2', '\x8A5', 
		'\x8A6', '\a', 'h', '\x2', '\x2', '\x8A6', '\x17F', '\x3', '\x2', '\x2', 
		'\x2', '\x8A7', '\x8A8', '\a', '*', '\x2', '\x2', '\x8A8', '\x8A9', '\a', 
		'\x43', '\x2', '\x2', '\x8A9', '\x8B1', '\a', 'h', '\x2', '\x2', '\x8AA', 
		'\x8AB', '\x5', '\x36', '\x1C', '\x2', '\x8AB', '\x8AC', '\a', '\x43', 
		'\x2', '\x2', '\x8AC', '\x8AD', '\a', '*', '\x2', '\x2', '\x8AD', '\x8AE', 
		'\a', '\x43', '\x2', '\x2', '\x8AE', '\x8AF', '\a', 'h', '\x2', '\x2', 
		'\x8AF', '\x8B1', '\x3', '\x2', '\x2', '\x2', '\x8B0', '\x8A7', '\x3', 
		'\x2', '\x2', '\x2', '\x8B0', '\x8AA', '\x3', '\x2', '\x2', '\x2', '\x8B1', 
		'\x181', '\x3', '\x2', '\x2', '\x2', '\x8B2', '\x8B3', '\x5', ':', '\x1E', 
		'\x2', '\x8B3', '\x8B4', '\a', '?', '\x2', '\x2', '\x8B4', '\x8B5', '\x5', 
		'\x19E', '\xD0', '\x2', '\x8B5', '\x8B6', '\a', '@', '\x2', '\x2', '\x8B6', 
		'\x8BD', '\x3', '\x2', '\x2', '\x2', '\x8B7', '\x8B8', '\x5', '\x166', 
		'\xB4', '\x2', '\x8B8', '\x8B9', '\a', '?', '\x2', '\x2', '\x8B9', '\x8BA', 
		'\x5', '\x19E', '\xD0', '\x2', '\x8BA', '\x8BB', '\a', '@', '\x2', '\x2', 
		'\x8BB', '\x8BD', '\x3', '\x2', '\x2', '\x2', '\x8BC', '\x8B2', '\x3', 
		'\x2', '\x2', '\x2', '\x8BC', '\x8B7', '\x3', '\x2', '\x2', '\x2', '\x8BD', 
		'\x8C5', '\x3', '\x2', '\x2', '\x2', '\x8BE', '\x8BF', '\x5', '\x164', 
		'\xB3', '\x2', '\x8BF', '\x8C0', '\a', '?', '\x2', '\x2', '\x8C0', '\x8C1', 
		'\x5', '\x19E', '\xD0', '\x2', '\x8C1', '\x8C2', '\a', '@', '\x2', '\x2', 
		'\x8C2', '\x8C4', '\x3', '\x2', '\x2', '\x2', '\x8C3', '\x8BE', '\x3', 
		'\x2', '\x2', '\x2', '\x8C4', '\x8C7', '\x3', '\x2', '\x2', '\x2', '\x8C5', 
		'\x8C3', '\x3', '\x2', '\x2', '\x2', '\x8C5', '\x8C6', '\x3', '\x2', '\x2', 
		'\x2', '\x8C6', '\x183', '\x3', '\x2', '\x2', '\x2', '\x8C7', '\x8C5', 
		'\x3', '\x2', '\x2', '\x2', '\x8C8', '\x8C9', '\x5', '\x16C', '\xB7', 
		'\x2', '\x8C9', '\x8CA', '\a', '?', '\x2', '\x2', '\x8CA', '\x8CB', '\x5', 
		'\x19E', '\xD0', '\x2', '\x8CB', '\x8CC', '\a', '@', '\x2', '\x2', '\x8CC', 
		'\x8D4', '\x3', '\x2', '\x2', '\x2', '\x8CD', '\x8CE', '\x5', '\x16A', 
		'\xB6', '\x2', '\x8CE', '\x8CF', '\a', '?', '\x2', '\x2', '\x8CF', '\x8D0', 
		'\x5', '\x19E', '\xD0', '\x2', '\x8D0', '\x8D1', '\a', '@', '\x2', '\x2', 
		'\x8D1', '\x8D3', '\x3', '\x2', '\x2', '\x2', '\x8D2', '\x8CD', '\x3', 
		'\x2', '\x2', '\x2', '\x8D3', '\x8D6', '\x3', '\x2', '\x2', '\x2', '\x8D4', 
		'\x8D2', '\x3', '\x2', '\x2', '\x2', '\x8D4', '\x8D5', '\x3', '\x2', '\x2', 
		'\x2', '\x8D5', '\x185', '\x3', '\x2', '\x2', '\x2', '\x8D6', '\x8D4', 
		'\x3', '\x2', '\x2', '\x2', '\x8D7', '\x8D8', '\x5', ':', '\x1E', '\x2', 
		'\x8D8', '\x8D9', '\a', '?', '\x2', '\x2', '\x8D9', '\x8DA', '\x5', '\x19E', 
		'\xD0', '\x2', '\x8DA', '\x8DB', '\a', '@', '\x2', '\x2', '\x8DB', '\x8E2', 
		'\x3', '\x2', '\x2', '\x2', '\x8DC', '\x8DD', '\x5', '\x172', '\xBA', 
		'\x2', '\x8DD', '\x8DE', '\a', '?', '\x2', '\x2', '\x8DE', '\x8DF', '\x5', 
		'\x19E', '\xD0', '\x2', '\x8DF', '\x8E0', '\a', '@', '\x2', '\x2', '\x8E0', 
		'\x8E2', '\x3', '\x2', '\x2', '\x2', '\x8E1', '\x8D7', '\x3', '\x2', '\x2', 
		'\x2', '\x8E1', '\x8DC', '\x3', '\x2', '\x2', '\x2', '\x8E2', '\x8EA', 
		'\x3', '\x2', '\x2', '\x2', '\x8E3', '\x8E4', '\x5', '\x170', '\xB9', 
		'\x2', '\x8E4', '\x8E5', '\a', '?', '\x2', '\x2', '\x8E5', '\x8E6', '\x5', 
		'\x19E', '\xD0', '\x2', '\x8E6', '\x8E7', '\a', '@', '\x2', '\x2', '\x8E7', 
		'\x8E9', '\x3', '\x2', '\x2', '\x2', '\x8E8', '\x8E3', '\x3', '\x2', '\x2', 
		'\x2', '\x8E9', '\x8EC', '\x3', '\x2', '\x2', '\x2', '\x8EA', '\x8E8', 
		'\x3', '\x2', '\x2', '\x2', '\x8EA', '\x8EB', '\x3', '\x2', '\x2', '\x2', 
		'\x8EB', '\x187', '\x3', '\x2', '\x2', '\x2', '\x8EC', '\x8EA', '\x3', 
		'\x2', '\x2', '\x2', '\x8ED', '\x8EE', '\x5', '<', '\x1F', '\x2', '\x8EE', 
		'\x8F0', '\a', ';', '\x2', '\x2', '\x8EF', '\x8F1', '\x5', '\x18E', '\xC8', 
		'\x2', '\x8F0', '\x8EF', '\x3', '\x2', '\x2', '\x2', '\x8F0', '\x8F1', 
		'\x3', '\x2', '\x2', '\x2', '\x8F1', '\x8F2', '\x3', '\x2', '\x2', '\x2', 
		'\x8F2', '\x8F3', '\a', '<', '\x2', '\x2', '\x8F3', '\x932', '\x3', '\x2', 
		'\x2', '\x2', '\x8F4', '\x8F5', '\x5', '\x36', '\x1C', '\x2', '\x8F5', 
		'\x8F7', '\a', '\x43', '\x2', '\x2', '\x8F6', '\x8F8', '\x5', '*', '\x16', 
		'\x2', '\x8F7', '\x8F6', '\x3', '\x2', '\x2', '\x2', '\x8F7', '\x8F8', 
		'\x3', '\x2', '\x2', '\x2', '\x8F8', '\x8F9', '\x3', '\x2', '\x2', '\x2', 
		'\x8F9', '\x8FA', '\a', 'h', '\x2', '\x2', '\x8FA', '\x8FC', '\a', ';', 
		'\x2', '\x2', '\x8FB', '\x8FD', '\x5', '\x18E', '\xC8', '\x2', '\x8FC', 
		'\x8FB', '\x3', '\x2', '\x2', '\x2', '\x8FC', '\x8FD', '\x3', '\x2', '\x2', 
		'\x2', '\x8FD', '\x8FE', '\x3', '\x2', '\x2', '\x2', '\x8FE', '\x8FF', 
		'\a', '<', '\x2', '\x2', '\x8FF', '\x932', '\x3', '\x2', '\x2', '\x2', 
		'\x900', '\x901', '\x5', ':', '\x1E', '\x2', '\x901', '\x903', '\a', '\x43', 
		'\x2', '\x2', '\x902', '\x904', '\x5', '*', '\x16', '\x2', '\x903', '\x902', 
		'\x3', '\x2', '\x2', '\x2', '\x903', '\x904', '\x3', '\x2', '\x2', '\x2', 
		'\x904', '\x905', '\x3', '\x2', '\x2', '\x2', '\x905', '\x906', '\a', 
		'h', '\x2', '\x2', '\x906', '\x908', '\a', ';', '\x2', '\x2', '\x907', 
		'\x909', '\x5', '\x18E', '\xC8', '\x2', '\x908', '\x907', '\x3', '\x2', 
		'\x2', '\x2', '\x908', '\x909', '\x3', '\x2', '\x2', '\x2', '\x909', '\x90A', 
		'\x3', '\x2', '\x2', '\x2', '\x90A', '\x90B', '\a', '<', '\x2', '\x2', 
		'\x90B', '\x932', '\x3', '\x2', '\x2', '\x2', '\x90C', '\x90D', '\x5', 
		'\x160', '\xB1', '\x2', '\x90D', '\x90F', '\a', '\x43', '\x2', '\x2', 
		'\x90E', '\x910', '\x5', '*', '\x16', '\x2', '\x90F', '\x90E', '\x3', 
		'\x2', '\x2', '\x2', '\x90F', '\x910', '\x3', '\x2', '\x2', '\x2', '\x910', 
		'\x911', '\x3', '\x2', '\x2', '\x2', '\x911', '\x912', '\a', 'h', '\x2', 
		'\x2', '\x912', '\x914', '\a', ';', '\x2', '\x2', '\x913', '\x915', '\x5', 
		'\x18E', '\xC8', '\x2', '\x914', '\x913', '\x3', '\x2', '\x2', '\x2', 
		'\x914', '\x915', '\x3', '\x2', '\x2', '\x2', '\x915', '\x916', '\x3', 
		'\x2', '\x2', '\x2', '\x916', '\x917', '\a', '<', '\x2', '\x2', '\x917', 
		'\x932', '\x3', '\x2', '\x2', '\x2', '\x918', '\x919', '\a', '*', '\x2', 
		'\x2', '\x919', '\x91B', '\a', '\x43', '\x2', '\x2', '\x91A', '\x91C', 
		'\x5', '*', '\x16', '\x2', '\x91B', '\x91A', '\x3', '\x2', '\x2', '\x2', 
		'\x91B', '\x91C', '\x3', '\x2', '\x2', '\x2', '\x91C', '\x91D', '\x3', 
		'\x2', '\x2', '\x2', '\x91D', '\x91E', '\a', 'h', '\x2', '\x2', '\x91E', 
		'\x920', '\a', ';', '\x2', '\x2', '\x91F', '\x921', '\x5', '\x18E', '\xC8', 
		'\x2', '\x920', '\x91F', '\x3', '\x2', '\x2', '\x2', '\x920', '\x921', 
		'\x3', '\x2', '\x2', '\x2', '\x921', '\x922', '\x3', '\x2', '\x2', '\x2', 
		'\x922', '\x932', '\a', '<', '\x2', '\x2', '\x923', '\x924', '\x5', '\x36', 
		'\x1C', '\x2', '\x924', '\x925', '\a', '\x43', '\x2', '\x2', '\x925', 
		'\x926', '\a', '*', '\x2', '\x2', '\x926', '\x928', '\a', '\x43', '\x2', 
		'\x2', '\x927', '\x929', '\x5', '*', '\x16', '\x2', '\x928', '\x927', 
		'\x3', '\x2', '\x2', '\x2', '\x928', '\x929', '\x3', '\x2', '\x2', '\x2', 
		'\x929', '\x92A', '\x3', '\x2', '\x2', '\x2', '\x92A', '\x92B', '\a', 
		'h', '\x2', '\x2', '\x92B', '\x92D', '\a', ';', '\x2', '\x2', '\x92C', 
		'\x92E', '\x5', '\x18E', '\xC8', '\x2', '\x92D', '\x92C', '\x3', '\x2', 
		'\x2', '\x2', '\x92D', '\x92E', '\x3', '\x2', '\x2', '\x2', '\x92E', '\x92F', 
		'\x3', '\x2', '\x2', '\x2', '\x92F', '\x930', '\a', '<', '\x2', '\x2', 
		'\x930', '\x932', '\x3', '\x2', '\x2', '\x2', '\x931', '\x8ED', '\x3', 
		'\x2', '\x2', '\x2', '\x931', '\x8F4', '\x3', '\x2', '\x2', '\x2', '\x931', 
		'\x900', '\x3', '\x2', '\x2', '\x2', '\x931', '\x90C', '\x3', '\x2', '\x2', 
		'\x2', '\x931', '\x918', '\x3', '\x2', '\x2', '\x2', '\x931', '\x923', 
		'\x3', '\x2', '\x2', '\x2', '\x932', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x933', '\x935', '\a', '\x43', '\x2', '\x2', '\x934', '\x936', '\x5', 
		'*', '\x16', '\x2', '\x935', '\x934', '\x3', '\x2', '\x2', '\x2', '\x935', 
		'\x936', '\x3', '\x2', '\x2', '\x2', '\x936', '\x937', '\x3', '\x2', '\x2', 
		'\x2', '\x937', '\x938', '\a', 'h', '\x2', '\x2', '\x938', '\x93A', '\a', 
		';', '\x2', '\x2', '\x939', '\x93B', '\x5', '\x18E', '\xC8', '\x2', '\x93A', 
		'\x939', '\x3', '\x2', '\x2', '\x2', '\x93A', '\x93B', '\x3', '\x2', '\x2', 
		'\x2', '\x93B', '\x93C', '\x3', '\x2', '\x2', '\x2', '\x93C', '\x93D', 
		'\a', '<', '\x2', '\x2', '\x93D', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x93E', '\x93F', '\x5', '<', '\x1F', '\x2', '\x93F', '\x941', '\a', ';', 
		'\x2', '\x2', '\x940', '\x942', '\x5', '\x18E', '\xC8', '\x2', '\x941', 
		'\x940', '\x3', '\x2', '\x2', '\x2', '\x941', '\x942', '\x3', '\x2', '\x2', 
		'\x2', '\x942', '\x943', '\x3', '\x2', '\x2', '\x2', '\x943', '\x944', 
		'\a', '<', '\x2', '\x2', '\x944', '\x977', '\x3', '\x2', '\x2', '\x2', 
		'\x945', '\x946', '\x5', '\x36', '\x1C', '\x2', '\x946', '\x948', '\a', 
		'\x43', '\x2', '\x2', '\x947', '\x949', '\x5', '*', '\x16', '\x2', '\x948', 
		'\x947', '\x3', '\x2', '\x2', '\x2', '\x948', '\x949', '\x3', '\x2', '\x2', 
		'\x2', '\x949', '\x94A', '\x3', '\x2', '\x2', '\x2', '\x94A', '\x94B', 
		'\a', 'h', '\x2', '\x2', '\x94B', '\x94D', '\a', ';', '\x2', '\x2', '\x94C', 
		'\x94E', '\x5', '\x18E', '\xC8', '\x2', '\x94D', '\x94C', '\x3', '\x2', 
		'\x2', '\x2', '\x94D', '\x94E', '\x3', '\x2', '\x2', '\x2', '\x94E', '\x94F', 
		'\x3', '\x2', '\x2', '\x2', '\x94F', '\x950', '\a', '<', '\x2', '\x2', 
		'\x950', '\x977', '\x3', '\x2', '\x2', '\x2', '\x951', '\x952', '\x5', 
		':', '\x1E', '\x2', '\x952', '\x954', '\a', '\x43', '\x2', '\x2', '\x953', 
		'\x955', '\x5', '*', '\x16', '\x2', '\x954', '\x953', '\x3', '\x2', '\x2', 
		'\x2', '\x954', '\x955', '\x3', '\x2', '\x2', '\x2', '\x955', '\x956', 
		'\x3', '\x2', '\x2', '\x2', '\x956', '\x957', '\a', 'h', '\x2', '\x2', 
		'\x957', '\x959', '\a', ';', '\x2', '\x2', '\x958', '\x95A', '\x5', '\x18E', 
		'\xC8', '\x2', '\x959', '\x958', '\x3', '\x2', '\x2', '\x2', '\x959', 
		'\x95A', '\x3', '\x2', '\x2', '\x2', '\x95A', '\x95B', '\x3', '\x2', '\x2', 
		'\x2', '\x95B', '\x95C', '\a', '<', '\x2', '\x2', '\x95C', '\x977', '\x3', 
		'\x2', '\x2', '\x2', '\x95D', '\x95E', '\a', '*', '\x2', '\x2', '\x95E', 
		'\x960', '\a', '\x43', '\x2', '\x2', '\x95F', '\x961', '\x5', '*', '\x16', 
		'\x2', '\x960', '\x95F', '\x3', '\x2', '\x2', '\x2', '\x960', '\x961', 
		'\x3', '\x2', '\x2', '\x2', '\x961', '\x962', '\x3', '\x2', '\x2', '\x2', 
		'\x962', '\x963', '\a', 'h', '\x2', '\x2', '\x963', '\x965', '\a', ';', 
		'\x2', '\x2', '\x964', '\x966', '\x5', '\x18E', '\xC8', '\x2', '\x965', 
		'\x964', '\x3', '\x2', '\x2', '\x2', '\x965', '\x966', '\x3', '\x2', '\x2', 
		'\x2', '\x966', '\x967', '\x3', '\x2', '\x2', '\x2', '\x967', '\x977', 
		'\a', '<', '\x2', '\x2', '\x968', '\x969', '\x5', '\x36', '\x1C', '\x2', 
		'\x969', '\x96A', '\a', '\x43', '\x2', '\x2', '\x96A', '\x96B', '\a', 
		'*', '\x2', '\x2', '\x96B', '\x96D', '\a', '\x43', '\x2', '\x2', '\x96C', 
		'\x96E', '\x5', '*', '\x16', '\x2', '\x96D', '\x96C', '\x3', '\x2', '\x2', 
		'\x2', '\x96D', '\x96E', '\x3', '\x2', '\x2', '\x2', '\x96E', '\x96F', 
		'\x3', '\x2', '\x2', '\x2', '\x96F', '\x970', '\a', 'h', '\x2', '\x2', 
		'\x970', '\x972', '\a', ';', '\x2', '\x2', '\x971', '\x973', '\x5', '\x18E', 
		'\xC8', '\x2', '\x972', '\x971', '\x3', '\x2', '\x2', '\x2', '\x972', 
		'\x973', '\x3', '\x2', '\x2', '\x2', '\x973', '\x974', '\x3', '\x2', '\x2', 
		'\x2', '\x974', '\x975', '\a', '<', '\x2', '\x2', '\x975', '\x977', '\x3', 
		'\x2', '\x2', '\x2', '\x976', '\x93E', '\x3', '\x2', '\x2', '\x2', '\x976', 
		'\x945', '\x3', '\x2', '\x2', '\x2', '\x976', '\x951', '\x3', '\x2', '\x2', 
		'\x2', '\x976', '\x95D', '\x3', '\x2', '\x2', '\x2', '\x976', '\x968', 
		'\x3', '\x2', '\x2', '\x2', '\x977', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x978', '\x97D', '\x5', '\x19E', '\xD0', '\x2', '\x979', '\x97A', '\a', 
		'\x42', '\x2', '\x2', '\x97A', '\x97C', '\x5', '\x19E', '\xD0', '\x2', 
		'\x97B', '\x979', '\x3', '\x2', '\x2', '\x2', '\x97C', '\x97F', '\x3', 
		'\x2', '\x2', '\x2', '\x97D', '\x97B', '\x3', '\x2', '\x2', '\x2', '\x97D', 
		'\x97E', '\x3', '\x2', '\x2', '\x2', '\x97E', '\x18F', '\x3', '\x2', '\x2', 
		'\x2', '\x97F', '\x97D', '\x3', '\x2', '\x2', '\x2', '\x980', '\x981', 
		'\x5', ':', '\x1E', '\x2', '\x981', '\x983', '\a', '\\', '\x2', '\x2', 
		'\x982', '\x984', '\x5', '*', '\x16', '\x2', '\x983', '\x982', '\x3', 
		'\x2', '\x2', '\x2', '\x983', '\x984', '\x3', '\x2', '\x2', '\x2', '\x984', 
		'\x985', '\x3', '\x2', '\x2', '\x2', '\x985', '\x986', '\a', 'h', '\x2', 
		'\x2', '\x986', '\x9B0', '\x3', '\x2', '\x2', '\x2', '\x987', '\x988', 
		'\x5', '\f', '\a', '\x2', '\x988', '\x98A', '\a', '\\', '\x2', '\x2', 
		'\x989', '\x98B', '\x5', '*', '\x16', '\x2', '\x98A', '\x989', '\x3', 
		'\x2', '\x2', '\x2', '\x98A', '\x98B', '\x3', '\x2', '\x2', '\x2', '\x98B', 
		'\x98C', '\x3', '\x2', '\x2', '\x2', '\x98C', '\x98D', '\a', 'h', '\x2', 
		'\x2', '\x98D', '\x9B0', '\x3', '\x2', '\x2', '\x2', '\x98E', '\x98F', 
		'\x5', '\x160', '\xB1', '\x2', '\x98F', '\x991', '\a', '\\', '\x2', '\x2', 
		'\x990', '\x992', '\x5', '*', '\x16', '\x2', '\x991', '\x990', '\x3', 
		'\x2', '\x2', '\x2', '\x991', '\x992', '\x3', '\x2', '\x2', '\x2', '\x992', 
		'\x993', '\x3', '\x2', '\x2', '\x2', '\x993', '\x994', '\a', 'h', '\x2', 
		'\x2', '\x994', '\x9B0', '\x3', '\x2', '\x2', '\x2', '\x995', '\x996', 
		'\a', '*', '\x2', '\x2', '\x996', '\x998', '\a', '\\', '\x2', '\x2', '\x997', 
		'\x999', '\x5', '*', '\x16', '\x2', '\x998', '\x997', '\x3', '\x2', '\x2', 
		'\x2', '\x998', '\x999', '\x3', '\x2', '\x2', '\x2', '\x999', '\x99A', 
		'\x3', '\x2', '\x2', '\x2', '\x99A', '\x9B0', '\a', 'h', '\x2', '\x2', 
		'\x99B', '\x99C', '\x5', '\x36', '\x1C', '\x2', '\x99C', '\x99D', '\a', 
		'\x43', '\x2', '\x2', '\x99D', '\x99E', '\a', '*', '\x2', '\x2', '\x99E', 
		'\x9A0', '\a', '\\', '\x2', '\x2', '\x99F', '\x9A1', '\x5', '*', '\x16', 
		'\x2', '\x9A0', '\x99F', '\x3', '\x2', '\x2', '\x2', '\x9A0', '\x9A1', 
		'\x3', '\x2', '\x2', '\x2', '\x9A1', '\x9A2', '\x3', '\x2', '\x2', '\x2', 
		'\x9A2', '\x9A3', '\a', 'h', '\x2', '\x2', '\x9A3', '\x9B0', '\x3', '\x2', 
		'\x2', '\x2', '\x9A4', '\x9A5', '\x5', '\x10', '\t', '\x2', '\x9A5', '\x9A7', 
		'\a', '\\', '\x2', '\x2', '\x9A6', '\x9A8', '\x5', '*', '\x16', '\x2', 
		'\x9A7', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\x9A7', '\x9A8', '\x3', 
		'\x2', '\x2', '\x2', '\x9A8', '\x9A9', '\x3', '\x2', '\x2', '\x2', '\x9A9', 
		'\x9AA', '\a', '!', '\x2', '\x2', '\x9AA', '\x9B0', '\x3', '\x2', '\x2', 
		'\x2', '\x9AB', '\x9AC', '\x5', '\x1E', '\x10', '\x2', '\x9AC', '\x9AD', 
		'\a', '\\', '\x2', '\x2', '\x9AD', '\x9AE', '\a', '!', '\x2', '\x2', '\x9AE', 
		'\x9B0', '\x3', '\x2', '\x2', '\x2', '\x9AF', '\x980', '\x3', '\x2', '\x2', 
		'\x2', '\x9AF', '\x987', '\x3', '\x2', '\x2', '\x2', '\x9AF', '\x98E', 
		'\x3', '\x2', '\x2', '\x2', '\x9AF', '\x995', '\x3', '\x2', '\x2', '\x2', 
		'\x9AF', '\x99B', '\x3', '\x2', '\x2', '\x2', '\x9AF', '\x9A4', '\x3', 
		'\x2', '\x2', '\x2', '\x9AF', '\x9AB', '\x3', '\x2', '\x2', '\x2', '\x9B0', 
		'\x191', '\x3', '\x2', '\x2', '\x2', '\x9B1', '\x9B3', '\a', '\\', '\x2', 
		'\x2', '\x9B2', '\x9B4', '\x5', '*', '\x16', '\x2', '\x9B3', '\x9B2', 
		'\x3', '\x2', '\x2', '\x2', '\x9B3', '\x9B4', '\x3', '\x2', '\x2', '\x2', 
		'\x9B4', '\x9B5', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9B6', '\a', 
		'h', '\x2', '\x2', '\x9B6', '\x193', '\x3', '\x2', '\x2', '\x2', '\x9B7', 
		'\x9B8', '\x5', ':', '\x1E', '\x2', '\x9B8', '\x9BA', '\a', '\\', '\x2', 
		'\x2', '\x9B9', '\x9BB', '\x5', '*', '\x16', '\x2', '\x9BA', '\x9B9', 
		'\x3', '\x2', '\x2', '\x2', '\x9BA', '\x9BB', '\x3', '\x2', '\x2', '\x2', 
		'\x9BB', '\x9BC', '\x3', '\x2', '\x2', '\x2', '\x9BC', '\x9BD', '\a', 
		'h', '\x2', '\x2', '\x9BD', '\x9E0', '\x3', '\x2', '\x2', '\x2', '\x9BE', 
		'\x9BF', '\x5', '\f', '\a', '\x2', '\x9BF', '\x9C1', '\a', '\\', '\x2', 
		'\x2', '\x9C0', '\x9C2', '\x5', '*', '\x16', '\x2', '\x9C1', '\x9C0', 
		'\x3', '\x2', '\x2', '\x2', '\x9C1', '\x9C2', '\x3', '\x2', '\x2', '\x2', 
		'\x9C2', '\x9C3', '\x3', '\x2', '\x2', '\x2', '\x9C3', '\x9C4', '\a', 
		'h', '\x2', '\x2', '\x9C4', '\x9E0', '\x3', '\x2', '\x2', '\x2', '\x9C5', 
		'\x9C6', '\a', '*', '\x2', '\x2', '\x9C6', '\x9C8', '\a', '\\', '\x2', 
		'\x2', '\x9C7', '\x9C9', '\x5', '*', '\x16', '\x2', '\x9C8', '\x9C7', 
		'\x3', '\x2', '\x2', '\x2', '\x9C8', '\x9C9', '\x3', '\x2', '\x2', '\x2', 
		'\x9C9', '\x9CA', '\x3', '\x2', '\x2', '\x2', '\x9CA', '\x9E0', '\a', 
		'h', '\x2', '\x2', '\x9CB', '\x9CC', '\x5', '\x36', '\x1C', '\x2', '\x9CC', 
		'\x9CD', '\a', '\x43', '\x2', '\x2', '\x9CD', '\x9CE', '\a', '*', '\x2', 
		'\x2', '\x9CE', '\x9D0', '\a', '\\', '\x2', '\x2', '\x9CF', '\x9D1', '\x5', 
		'*', '\x16', '\x2', '\x9D0', '\x9CF', '\x3', '\x2', '\x2', '\x2', '\x9D0', 
		'\x9D1', '\x3', '\x2', '\x2', '\x2', '\x9D1', '\x9D2', '\x3', '\x2', '\x2', 
		'\x2', '\x9D2', '\x9D3', '\a', 'h', '\x2', '\x2', '\x9D3', '\x9E0', '\x3', 
		'\x2', '\x2', '\x2', '\x9D4', '\x9D5', '\x5', '\x10', '\t', '\x2', '\x9D5', 
		'\x9D7', '\a', '\\', '\x2', '\x2', '\x9D6', '\x9D8', '\x5', '*', '\x16', 
		'\x2', '\x9D7', '\x9D6', '\x3', '\x2', '\x2', '\x2', '\x9D7', '\x9D8', 
		'\x3', '\x2', '\x2', '\x2', '\x9D8', '\x9D9', '\x3', '\x2', '\x2', '\x2', 
		'\x9D9', '\x9DA', '\a', '!', '\x2', '\x2', '\x9DA', '\x9E0', '\x3', '\x2', 
		'\x2', '\x2', '\x9DB', '\x9DC', '\x5', '\x1E', '\x10', '\x2', '\x9DC', 
		'\x9DD', '\a', '\\', '\x2', '\x2', '\x9DD', '\x9DE', '\a', '!', '\x2', 
		'\x2', '\x9DE', '\x9E0', '\x3', '\x2', '\x2', '\x2', '\x9DF', '\x9B7', 
		'\x3', '\x2', '\x2', '\x2', '\x9DF', '\x9BE', '\x3', '\x2', '\x2', '\x2', 
		'\x9DF', '\x9C5', '\x3', '\x2', '\x2', '\x2', '\x9DF', '\x9CB', '\x3', 
		'\x2', '\x2', '\x2', '\x9DF', '\x9D4', '\x3', '\x2', '\x2', '\x2', '\x9DF', 
		'\x9DB', '\x3', '\x2', '\x2', '\x2', '\x9E0', '\x195', '\x3', '\x2', '\x2', 
		'\x2', '\x9E1', '\x9E2', '\a', '!', '\x2', '\x2', '\x9E2', '\x9E3', '\x5', 
		'\x4', '\x3', '\x2', '\x9E3', '\x9E5', '\x5', '\x198', '\xCD', '\x2', 
		'\x9E4', '\x9E6', '\x5', ' ', '\x11', '\x2', '\x9E5', '\x9E4', '\x3', 
		'\x2', '\x2', '\x2', '\x9E5', '\x9E6', '\x3', '\x2', '\x2', '\x2', '\x9E6', 
		'\x9F8', '\x3', '\x2', '\x2', '\x2', '\x9E7', '\x9E8', '\a', '!', '\x2', 
		'\x2', '\x9E8', '\x9E9', '\x5', '\xE', '\b', '\x2', '\x9E9', '\x9EB', 
		'\x5', '\x198', '\xCD', '\x2', '\x9EA', '\x9EC', '\x5', ' ', '\x11', '\x2', 
		'\x9EB', '\x9EA', '\x3', '\x2', '\x2', '\x2', '\x9EB', '\x9EC', '\x3', 
		'\x2', '\x2', '\x2', '\x9EC', '\x9F8', '\x3', '\x2', '\x2', '\x2', '\x9ED', 
		'\x9EE', '\a', '!', '\x2', '\x2', '\x9EE', '\x9EF', '\x5', '\x4', '\x3', 
		'\x2', '\x9EF', '\x9F0', '\x5', ' ', '\x11', '\x2', '\x9F0', '\x9F1', 
		'\x5', '\xF8', '}', '\x2', '\x9F1', '\x9F8', '\x3', '\x2', '\x2', '\x2', 
		'\x9F2', '\x9F3', '\a', '!', '\x2', '\x2', '\x9F3', '\x9F4', '\x5', '\xE', 
		'\b', '\x2', '\x9F4', '\x9F5', '\x5', ' ', '\x11', '\x2', '\x9F5', '\x9F6', 
		'\x5', '\xF8', '}', '\x2', '\x9F6', '\x9F8', '\x3', '\x2', '\x2', '\x2', 
		'\x9F7', '\x9E1', '\x3', '\x2', '\x2', '\x2', '\x9F7', '\x9E7', '\x3', 
		'\x2', '\x2', '\x2', '\x9F7', '\x9ED', '\x3', '\x2', '\x2', '\x2', '\x9F7', 
		'\x9F2', '\x3', '\x2', '\x2', '\x2', '\x9F8', '\x197', '\x3', '\x2', '\x2', 
		'\x2', '\x9F9', '\x9FD', '\x5', '\x19A', '\xCE', '\x2', '\x9FA', '\x9FC', 
		'\x5', '\x19A', '\xCE', '\x2', '\x9FB', '\x9FA', '\x3', '\x2', '\x2', 
		'\x2', '\x9FC', '\x9FF', '\x3', '\x2', '\x2', '\x2', '\x9FD', '\x9FB', 
		'\x3', '\x2', '\x2', '\x2', '\x9FD', '\x9FE', '\x3', '\x2', '\x2', '\x2', 
		'\x9FE', '\x199', '\x3', '\x2', '\x2', '\x2', '\x9FF', '\x9FD', '\x3', 
		'\x2', '\x2', '\x2', '\xA00', '\xA02', '\x5', '\xE6', 't', '\x2', '\xA01', 
		'\xA00', '\x3', '\x2', '\x2', '\x2', '\xA02', '\xA05', '\x3', '\x2', '\x2', 
		'\x2', '\xA03', '\xA01', '\x3', '\x2', '\x2', '\x2', '\xA03', '\xA04', 
		'\x3', '\x2', '\x2', '\x2', '\xA04', '\xA06', '\x3', '\x2', '\x2', '\x2', 
		'\xA05', '\xA03', '\x3', '\x2', '\x2', '\x2', '\xA06', '\xA07', '\a', 
		'?', '\x2', '\x2', '\xA07', '\xA08', '\x5', '\x19E', '\xD0', '\x2', '\xA08', 
		'\xA09', '\a', '@', '\x2', '\x2', '\xA09', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\xA0A', '\xA0B', '\x5', '\x19E', '\xD0', '\x2', '\xA0B', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\xA0C', '\xA0F', '\x5', '\x1A0', '\xD1', 
		'\x2', '\xA0D', '\xA0F', '\x5', '\x1A8', '\xD5', '\x2', '\xA0E', '\xA0C', 
		'\x3', '\x2', '\x2', '\x2', '\xA0E', '\xA0D', '\x3', '\x2', '\x2', '\x2', 
		'\xA0F', '\x19F', '\x3', '\x2', '\x2', '\x2', '\xA10', '\xA11', '\x5', 
		'\x1A2', '\xD2', '\x2', '\xA11', '\xA12', '\a', '[', '\x2', '\x2', '\xA12', 
		'\xA13', '\x5', '\x1A6', '\xD4', '\x2', '\xA13', '\x1A1', '\x3', '\x2', 
		'\x2', '\x2', '\xA14', '\xA1F', '\a', 'h', '\x2', '\x2', '\xA15', '\xA17', 
		'\a', ';', '\x2', '\x2', '\xA16', '\xA18', '\x5', '\x96', 'L', '\x2', 
		'\xA17', '\xA16', '\x3', '\x2', '\x2', '\x2', '\xA17', '\xA18', '\x3', 
		'\x2', '\x2', '\x2', '\xA18', '\xA19', '\x3', '\x2', '\x2', '\x2', '\xA19', 
		'\xA1F', '\a', '<', '\x2', '\x2', '\xA1A', '\xA1B', '\a', ';', '\x2', 
		'\x2', '\xA1B', '\xA1C', '\x5', '\x1A4', '\xD3', '\x2', '\xA1C', '\xA1D', 
		'\a', '<', '\x2', '\x2', '\xA1D', '\xA1F', '\x3', '\x2', '\x2', '\x2', 
		'\xA1E', '\xA14', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\xA15', '\x3', 
		'\x2', '\x2', '\x2', '\xA1E', '\xA1A', '\x3', '\x2', '\x2', '\x2', '\xA1F', 
		'\x1A3', '\x3', '\x2', '\x2', '\x2', '\xA20', '\xA25', '\a', 'h', '\x2', 
		'\x2', '\xA21', '\xA22', '\a', '\x42', '\x2', '\x2', '\xA22', '\xA24', 
		'\a', 'h', '\x2', '\x2', '\xA23', '\xA21', '\x3', '\x2', '\x2', '\x2', 
		'\xA24', '\xA27', '\x3', '\x2', '\x2', '\x2', '\xA25', '\xA23', '\x3', 
		'\x2', '\x2', '\x2', '\xA25', '\xA26', '\x3', '\x2', '\x2', '\x2', '\xA26', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\xA27', '\xA25', '\x3', '\x2', '\x2', 
		'\x2', '\xA28', '\xA2B', '\x5', '\x19E', '\xD0', '\x2', '\xA29', '\xA2B', 
		'\x5', '\xFC', '\x7F', '\x2', '\xA2A', '\xA28', '\x3', '\x2', '\x2', '\x2', 
		'\xA2A', '\xA29', '\x3', '\x2', '\x2', '\x2', '\xA2B', '\x1A7', '\x3', 
		'\x2', '\x2', '\x2', '\xA2C', '\xA2F', '\x5', '\x1B0', '\xD9', '\x2', 
		'\xA2D', '\xA2F', '\x5', '\x1AA', '\xD6', '\x2', '\xA2E', '\xA2C', '\x3', 
		'\x2', '\x2', '\x2', '\xA2E', '\xA2D', '\x3', '\x2', '\x2', '\x2', '\xA2F', 
		'\x1A9', '\x3', '\x2', '\x2', '\x2', '\xA30', '\xA31', '\x5', '\x1AC', 
		'\xD7', '\x2', '\xA31', '\xA32', '\x5', '\x1AE', '\xD8', '\x2', '\xA32', 
		'\xA33', '\x5', '\x19E', '\xD0', '\x2', '\xA33', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', '\xA34', '\xA38', '\x5', ':', '\x1E', '\x2', '\xA35', '\xA38', 
		'\x5', '\x17C', '\xBF', '\x2', '\xA36', '\xA38', '\x5', '\x182', '\xC2', 
		'\x2', '\xA37', '\xA34', '\x3', '\x2', '\x2', '\x2', '\xA37', '\xA35', 
		'\x3', '\x2', '\x2', '\x2', '\xA37', '\xA36', '\x3', '\x2', '\x2', '\x2', 
		'\xA38', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\xA39', '\xA3A', '\t', 
		'\x5', '\x2', '\x2', '\xA3A', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\xA3B', 
		'\xA43', '\x5', '\x1B2', '\xDA', '\x2', '\xA3C', '\xA3D', '\x5', '\x1B2', 
		'\xDA', '\x2', '\xA3D', '\xA3E', '\a', 'I', '\x2', '\x2', '\xA3E', '\xA3F', 
		'\x5', '\x19E', '\xD0', '\x2', '\xA3F', '\xA40', '\a', 'J', '\x2', '\x2', 
		'\xA40', '\xA41', '\x5', '\x1B0', '\xD9', '\x2', '\xA41', '\xA43', '\x3', 
		'\x2', '\x2', '\x2', '\xA42', '\xA3B', '\x3', '\x2', '\x2', '\x2', '\xA42', 
		'\xA3C', '\x3', '\x2', '\x2', '\x2', '\xA43', '\x1B1', '\x3', '\x2', '\x2', 
		'\x2', '\xA44', '\xA45', '\b', '\xDA', '\x1', '\x2', '\xA45', '\xA46', 
		'\x5', '\x1B4', '\xDB', '\x2', '\xA46', '\xA4C', '\x3', '\x2', '\x2', 
		'\x2', '\xA47', '\xA48', '\f', '\x3', '\x2', '\x2', '\xA48', '\xA49', 
		'\a', 'P', '\x2', '\x2', '\xA49', '\xA4B', '\x5', '\x1B4', '\xDB', '\x2', 
		'\xA4A', '\xA47', '\x3', '\x2', '\x2', '\x2', '\xA4B', '\xA4E', '\x3', 
		'\x2', '\x2', '\x2', '\xA4C', '\xA4A', '\x3', '\x2', '\x2', '\x2', '\xA4C', 
		'\xA4D', '\x3', '\x2', '\x2', '\x2', '\xA4D', '\x1B3', '\x3', '\x2', '\x2', 
		'\x2', '\xA4E', '\xA4C', '\x3', '\x2', '\x2', '\x2', '\xA4F', '\xA50', 
		'\b', '\xDB', '\x1', '\x2', '\xA50', '\xA51', '\x5', '\x1B6', '\xDC', 
		'\x2', '\xA51', '\xA57', '\x3', '\x2', '\x2', '\x2', '\xA52', '\xA53', 
		'\f', '\x3', '\x2', '\x2', '\xA53', '\xA54', '\a', 'O', '\x2', '\x2', 
		'\xA54', '\xA56', '\x5', '\x1B6', '\xDC', '\x2', '\xA55', '\xA52', '\x3', 
		'\x2', '\x2', '\x2', '\xA56', '\xA59', '\x3', '\x2', '\x2', '\x2', '\xA57', 
		'\xA55', '\x3', '\x2', '\x2', '\x2', '\xA57', '\xA58', '\x3', '\x2', '\x2', 
		'\x2', '\xA58', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\xA59', '\xA57', 
		'\x3', '\x2', '\x2', '\x2', '\xA5A', '\xA5B', '\b', '\xDC', '\x1', '\x2', 
		'\xA5B', '\xA5C', '\x5', '\x1B8', '\xDD', '\x2', '\xA5C', '\xA62', '\x3', 
		'\x2', '\x2', '\x2', '\xA5D', '\xA5E', '\f', '\x3', '\x2', '\x2', '\xA5E', 
		'\xA5F', '\a', 'X', '\x2', '\x2', '\xA5F', '\xA61', '\x5', '\x1B8', '\xDD', 
		'\x2', '\xA60', '\xA5D', '\x3', '\x2', '\x2', '\x2', '\xA61', '\xA64', 
		'\x3', '\x2', '\x2', '\x2', '\xA62', '\xA60', '\x3', '\x2', '\x2', '\x2', 
		'\xA62', '\xA63', '\x3', '\x2', '\x2', '\x2', '\xA63', '\x1B7', '\x3', 
		'\x2', '\x2', '\x2', '\xA64', '\xA62', '\x3', '\x2', '\x2', '\x2', '\xA65', 
		'\xA66', '\b', '\xDD', '\x1', '\x2', '\xA66', '\xA67', '\x5', '\x1BA', 
		'\xDE', '\x2', '\xA67', '\xA6D', '\x3', '\x2', '\x2', '\x2', '\xA68', 
		'\xA69', '\f', '\x3', '\x2', '\x2', '\xA69', '\xA6A', '\a', 'Y', '\x2', 
		'\x2', '\xA6A', '\xA6C', '\x5', '\x1BA', '\xDE', '\x2', '\xA6B', '\xA68', 
		'\x3', '\x2', '\x2', '\x2', '\xA6C', '\xA6F', '\x3', '\x2', '\x2', '\x2', 
		'\xA6D', '\xA6B', '\x3', '\x2', '\x2', '\x2', '\xA6D', '\xA6E', '\x3', 
		'\x2', '\x2', '\x2', '\xA6E', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\xA6F', 
		'\xA6D', '\x3', '\x2', '\x2', '\x2', '\xA70', '\xA71', '\b', '\xDE', '\x1', 
		'\x2', '\xA71', '\xA72', '\x5', '\x1BC', '\xDF', '\x2', '\xA72', '\xA78', 
		'\x3', '\x2', '\x2', '\x2', '\xA73', '\xA74', '\f', '\x3', '\x2', '\x2', 
		'\xA74', '\xA75', '\a', 'W', '\x2', '\x2', '\xA75', '\xA77', '\x5', '\x1BC', 
		'\xDF', '\x2', '\xA76', '\xA73', '\x3', '\x2', '\x2', '\x2', '\xA77', 
		'\xA7A', '\x3', '\x2', '\x2', '\x2', '\xA78', '\xA76', '\x3', '\x2', '\x2', 
		'\x2', '\xA78', '\xA79', '\x3', '\x2', '\x2', '\x2', '\xA79', '\x1BB', 
		'\x3', '\x2', '\x2', '\x2', '\xA7A', '\xA78', '\x3', '\x2', '\x2', '\x2', 
		'\xA7B', '\xA7C', '\b', '\xDF', '\x1', '\x2', '\xA7C', '\xA7D', '\x5', 
		'\x1BE', '\xE0', '\x2', '\xA7D', '\xA86', '\x3', '\x2', '\x2', '\x2', 
		'\xA7E', '\xA7F', '\f', '\x4', '\x2', '\x2', '\xA7F', '\xA80', '\a', 'K', 
		'\x2', '\x2', '\xA80', '\xA85', '\x5', '\x1BE', '\xE0', '\x2', '\xA81', 
		'\xA82', '\f', '\x3', '\x2', '\x2', '\xA82', '\xA83', '\a', 'N', '\x2', 
		'\x2', '\xA83', '\xA85', '\x5', '\x1BE', '\xE0', '\x2', '\xA84', '\xA7E', 
		'\x3', '\x2', '\x2', '\x2', '\xA84', '\xA81', '\x3', '\x2', '\x2', '\x2', 
		'\xA85', '\xA88', '\x3', '\x2', '\x2', '\x2', '\xA86', '\xA84', '\x3', 
		'\x2', '\x2', '\x2', '\xA86', '\xA87', '\x3', '\x2', '\x2', '\x2', '\xA87', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\xA88', '\xA86', '\x3', '\x2', '\x2', 
		'\x2', '\xA89', '\xA8A', '\b', '\xE0', '\x1', '\x2', '\xA8A', '\xA8B', 
		'\x5', '\x1C0', '\xE1', '\x2', '\xA8B', '\xA9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA8C', '\xA8D', '\f', '\a', '\x2', '\x2', '\xA8D', '\xA8E', '\a', 
		'\x46', '\x2', '\x2', '\xA8E', '\xA9C', '\x5', '\x1C0', '\xE1', '\x2', 
		'\xA8F', '\xA90', '\f', '\x6', '\x2', '\x2', '\xA90', '\xA91', '\a', '\x45', 
		'\x2', '\x2', '\xA91', '\xA9C', '\x5', '\x1C0', '\xE1', '\x2', '\xA92', 
		'\xA93', '\f', '\x5', '\x2', '\x2', '\xA93', '\xA94', '\a', 'L', '\x2', 
		'\x2', '\xA94', '\xA9C', '\x5', '\x1C0', '\xE1', '\x2', '\xA95', '\xA96', 
		'\f', '\x4', '\x2', '\x2', '\xA96', '\xA97', '\a', 'M', '\x2', '\x2', 
		'\xA97', '\xA9C', '\x5', '\x1C0', '\xE1', '\x2', '\xA98', '\xA99', '\f', 
		'\x3', '\x2', '\x2', '\xA99', '\xA9A', '\a', '\x1C', '\x2', '\x2', '\xA9A', 
		'\xA9C', '\x5', '\f', '\a', '\x2', '\xA9B', '\xA8C', '\x3', '\x2', '\x2', 
		'\x2', '\xA9B', '\xA8F', '\x3', '\x2', '\x2', '\x2', '\xA9B', '\xA92', 
		'\x3', '\x2', '\x2', '\x2', '\xA9B', '\xA95', '\x3', '\x2', '\x2', '\x2', 
		'\xA9B', '\xA98', '\x3', '\x2', '\x2', '\x2', '\xA9C', '\xA9F', '\x3', 
		'\x2', '\x2', '\x2', '\xA9D', '\xA9B', '\x3', '\x2', '\x2', '\x2', '\xA9D', 
		'\xA9E', '\x3', '\x2', '\x2', '\x2', '\xA9E', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\xA9F', '\xA9D', '\x3', '\x2', '\x2', '\x2', '\xAA0', '\xAA1', 
		'\b', '\xE1', '\x1', '\x2', '\xAA1', '\xAA2', '\x5', '\x1C2', '\xE2', 
		'\x2', '\xAA2', '\xAB2', '\x3', '\x2', '\x2', '\x2', '\xAA3', '\xAA4', 
		'\f', '\x5', '\x2', '\x2', '\xAA4', '\xAA5', '\a', '\x46', '\x2', '\x2', 
		'\xAA5', '\xAA6', '\a', '\x46', '\x2', '\x2', '\xAA6', '\xAB1', '\x5', 
		'\x1C2', '\xE2', '\x2', '\xAA7', '\xAA8', '\f', '\x4', '\x2', '\x2', '\xAA8', 
		'\xAA9', '\a', '\x45', '\x2', '\x2', '\xAA9', '\xAAA', '\a', '\x45', '\x2', 
		'\x2', '\xAAA', '\xAB1', '\x5', '\x1C2', '\xE2', '\x2', '\xAAB', '\xAAC', 
		'\f', '\x3', '\x2', '\x2', '\xAAC', '\xAAD', '\a', '\x45', '\x2', '\x2', 
		'\xAAD', '\xAAE', '\a', '\x45', '\x2', '\x2', '\xAAE', '\xAAF', '\a', 
		'\x45', '\x2', '\x2', '\xAAF', '\xAB1', '\x5', '\x1C2', '\xE2', '\x2', 
		'\xAB0', '\xAA3', '\x3', '\x2', '\x2', '\x2', '\xAB0', '\xAA7', '\x3', 
		'\x2', '\x2', '\x2', '\xAB0', '\xAAB', '\x3', '\x2', '\x2', '\x2', '\xAB1', 
		'\xAB4', '\x3', '\x2', '\x2', '\x2', '\xAB2', '\xAB0', '\x3', '\x2', '\x2', 
		'\x2', '\xAB2', '\xAB3', '\x3', '\x2', '\x2', '\x2', '\xAB3', '\x1C1', 
		'\x3', '\x2', '\x2', '\x2', '\xAB4', '\xAB2', '\x3', '\x2', '\x2', '\x2', 
		'\xAB5', '\xAB6', '\b', '\xE2', '\x1', '\x2', '\xAB6', '\xAB7', '\x5', 
		'\x1C4', '\xE3', '\x2', '\xAB7', '\xAC0', '\x3', '\x2', '\x2', '\x2', 
		'\xAB8', '\xAB9', '\f', '\x4', '\x2', '\x2', '\xAB9', '\xABA', '\a', 'S', 
		'\x2', '\x2', '\xABA', '\xABF', '\x5', '\x1C4', '\xE3', '\x2', '\xABB', 
		'\xABC', '\f', '\x3', '\x2', '\x2', '\xABC', '\xABD', '\a', 'T', '\x2', 
		'\x2', '\xABD', '\xABF', '\x5', '\x1C4', '\xE3', '\x2', '\xABE', '\xAB8', 
		'\x3', '\x2', '\x2', '\x2', '\xABE', '\xABB', '\x3', '\x2', '\x2', '\x2', 
		'\xABF', '\xAC2', '\x3', '\x2', '\x2', '\x2', '\xAC0', '\xABE', '\x3', 
		'\x2', '\x2', '\x2', '\xAC0', '\xAC1', '\x3', '\x2', '\x2', '\x2', '\xAC1', 
		'\x1C3', '\x3', '\x2', '\x2', '\x2', '\xAC2', '\xAC0', '\x3', '\x2', '\x2', 
		'\x2', '\xAC3', '\xAC4', '\b', '\xE3', '\x1', '\x2', '\xAC4', '\xAC5', 
		'\x5', '\x1C6', '\xE4', '\x2', '\xAC5', '\xAD1', '\x3', '\x2', '\x2', 
		'\x2', '\xAC6', '\xAC7', '\f', '\x5', '\x2', '\x2', '\xAC7', '\xAC8', 
		'\a', 'U', '\x2', '\x2', '\xAC8', '\xAD0', '\x5', '\x1C6', '\xE4', '\x2', 
		'\xAC9', '\xACA', '\f', '\x4', '\x2', '\x2', '\xACA', '\xACB', '\a', 'V', 
		'\x2', '\x2', '\xACB', '\xAD0', '\x5', '\x1C6', '\xE4', '\x2', '\xACC', 
		'\xACD', '\f', '\x3', '\x2', '\x2', '\xACD', '\xACE', '\a', 'Z', '\x2', 
		'\x2', '\xACE', '\xAD0', '\x5', '\x1C6', '\xE4', '\x2', '\xACF', '\xAC6', 
		'\x3', '\x2', '\x2', '\x2', '\xACF', '\xAC9', '\x3', '\x2', '\x2', '\x2', 
		'\xACF', '\xACC', '\x3', '\x2', '\x2', '\x2', '\xAD0', '\xAD3', '\x3', 
		'\x2', '\x2', '\x2', '\xAD1', '\xACF', '\x3', '\x2', '\x2', '\x2', '\xAD1', 
		'\xAD2', '\x3', '\x2', '\x2', '\x2', '\xAD2', '\x1C5', '\x3', '\x2', '\x2', 
		'\x2', '\xAD3', '\xAD1', '\x3', '\x2', '\x2', '\x2', '\xAD4', '\xADC', 
		'\x5', '\x1C8', '\xE5', '\x2', '\xAD5', '\xADC', '\x5', '\x1CA', '\xE6', 
		'\x2', '\xAD6', '\xAD7', '\a', 'S', '\x2', '\x2', '\xAD7', '\xADC', '\x5', 
		'\x1C6', '\xE4', '\x2', '\xAD8', '\xAD9', '\a', 'T', '\x2', '\x2', '\xAD9', 
		'\xADC', '\x5', '\x1C6', '\xE4', '\x2', '\xADA', '\xADC', '\x5', '\x1CC', 
		'\xE7', '\x2', '\xADB', '\xAD4', '\x3', '\x2', '\x2', '\x2', '\xADB', 
		'\xAD5', '\x3', '\x2', '\x2', '\x2', '\xADB', '\xAD6', '\x3', '\x2', '\x2', 
		'\x2', '\xADB', '\xAD8', '\x3', '\x2', '\x2', '\x2', '\xADB', '\xADA', 
		'\x3', '\x2', '\x2', '\x2', '\xADC', '\x1C7', '\x3', '\x2', '\x2', '\x2', 
		'\xADD', '\xADE', '\a', 'Q', '\x2', '\x2', '\xADE', '\xADF', '\x5', '\x1C6', 
		'\xE4', '\x2', '\xADF', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\xAE0', 
		'\xAE1', '\a', 'R', '\x2', '\x2', '\xAE1', '\xAE2', '\x5', '\x1C6', '\xE4', 
		'\x2', '\xAE2', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\xAE3', '\xAEA', 
		'\x5', '\x1CE', '\xE8', '\x2', '\xAE4', '\xAE5', '\a', 'H', '\x2', '\x2', 
		'\xAE5', '\xAEA', '\x5', '\x1C6', '\xE4', '\x2', '\xAE6', '\xAE7', '\a', 
		'G', '\x2', '\x2', '\xAE7', '\xAEA', '\x5', '\x1C6', '\xE4', '\x2', '\xAE8', 
		'\xAEA', '\x5', '\x1D8', '\xED', '\x2', '\xAE9', '\xAE3', '\x3', '\x2', 
		'\x2', '\x2', '\xAE9', '\xAE4', '\x3', '\x2', '\x2', '\x2', '\xAE9', '\xAE6', 
		'\x3', '\x2', '\x2', '\x2', '\xAE9', '\xAE8', '\x3', '\x2', '\x2', '\x2', 
		'\xAEA', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\xAEB', '\xAEE', '\x5', 
		'\x160', '\xB1', '\x2', '\xAEC', '\xAEE', '\x5', ':', '\x1E', '\x2', '\xAED', 
		'\xAEB', '\x3', '\x2', '\x2', '\x2', '\xAED', '\xAEC', '\x3', '\x2', '\x2', 
		'\x2', '\xAEE', '\xAF3', '\x3', '\x2', '\x2', '\x2', '\xAEF', '\xAF2', 
		'\x5', '\x1D2', '\xEA', '\x2', '\xAF0', '\xAF2', '\x5', '\x1D6', '\xEC', 
		'\x2', '\xAF1', '\xAEF', '\x3', '\x2', '\x2', '\x2', '\xAF1', '\xAF0', 
		'\x3', '\x2', '\x2', '\x2', '\xAF2', '\xAF5', '\x3', '\x2', '\x2', '\x2', 
		'\xAF3', '\xAF1', '\x3', '\x2', '\x2', '\x2', '\xAF3', '\xAF4', '\x3', 
		'\x2', '\x2', '\x2', '\xAF4', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\xAF5', 
		'\xAF3', '\x3', '\x2', '\x2', '\x2', '\xAF6', '\xAF7', '\x5', '\x1CE', 
		'\xE8', '\x2', '\xAF7', '\xAF8', '\a', 'Q', '\x2', '\x2', '\xAF8', '\x1D1', 
		'\x3', '\x2', '\x2', '\x2', '\xAF9', '\xAFA', '\a', 'Q', '\x2', '\x2', 
		'\xAFA', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\xAFB', '\xAFC', '\x5', 
		'\x1CE', '\xE8', '\x2', '\xAFC', '\xAFD', '\a', 'R', '\x2', '\x2', '\xAFD', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\xAFE', '\xAFF', '\a', 'R', '\x2', 
		'\x2', '\xAFF', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\xB00', '\xB01', 
		'\a', ';', '\x2', '\x2', '\xB01', '\xB02', '\x5', '\x4', '\x3', '\x2', 
		'\xB02', '\xB03', '\a', '<', '\x2', '\x2', '\xB03', '\xB04', '\x5', '\x1C6', 
		'\xE4', '\x2', '\xB04', '\xB1C', '\x3', '\x2', '\x2', '\x2', '\xB05', 
		'\xB06', '\a', ';', '\x2', '\x2', '\xB06', '\xB0A', '\x5', '\f', '\a', 
		'\x2', '\xB07', '\xB09', '\x5', '(', '\x15', '\x2', '\xB08', '\xB07', 
		'\x3', '\x2', '\x2', '\x2', '\xB09', '\xB0C', '\x3', '\x2', '\x2', '\x2', 
		'\xB0A', '\xB08', '\x3', '\x2', '\x2', '\x2', '\xB0A', '\xB0B', '\x3', 
		'\x2', '\x2', '\x2', '\xB0B', '\xB0D', '\x3', '\x2', '\x2', '\x2', '\xB0C', 
		'\xB0A', '\x3', '\x2', '\x2', '\x2', '\xB0D', '\xB0E', '\a', '<', '\x2', 
		'\x2', '\xB0E', '\xB0F', '\x5', '\x1CC', '\xE7', '\x2', '\xB0F', '\xB1C', 
		'\x3', '\x2', '\x2', '\x2', '\xB10', '\xB11', '\a', ';', '\x2', '\x2', 
		'\xB11', '\xB15', '\x5', '\f', '\a', '\x2', '\xB12', '\xB14', '\x5', '(', 
		'\x15', '\x2', '\xB13', '\xB12', '\x3', '\x2', '\x2', '\x2', '\xB14', 
		'\xB17', '\x3', '\x2', '\x2', '\x2', '\xB15', '\xB13', '\x3', '\x2', '\x2', 
		'\x2', '\xB15', '\xB16', '\x3', '\x2', '\x2', '\x2', '\xB16', '\xB18', 
		'\x3', '\x2', '\x2', '\x2', '\xB17', '\xB15', '\x3', '\x2', '\x2', '\x2', 
		'\xB18', '\xB19', '\a', '<', '\x2', '\x2', '\xB19', '\xB1A', '\x5', '\x1A0', 
		'\xD1', '\x2', '\xB1A', '\xB1C', '\x3', '\x2', '\x2', '\x2', '\xB1B', 
		'\xB00', '\x3', '\x2', '\x2', '\x2', '\xB1B', '\xB05', '\x3', '\x2', '\x2', 
		'\x2', '\xB1B', '\xB10', '\x3', '\x2', '\x2', '\x2', '\xB1C', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x1DF', '\x1E6', '\x1EA', '\x1EE', 
		'\x1F7', '\x1FB', '\x1FF', '\x201', '\x207', '\x20C', '\x213', '\x218', 
		'\x21A', '\x220', '\x225', '\x22A', '\x22F', '\x23A', '\x248', '\x24D', 
		'\x255', '\x25C', '\x262', '\x267', '\x272', '\x275', '\x283', '\x288', 
		'\x28D', '\x292', '\x298', '\x2A2', '\x2AA', '\x2B4', '\x2BC', '\x2C8', 
		'\x2CC', '\x2D1', '\x2D7', '\x2DF', '\x2EC', '\x309', '\x30D', '\x312', 
		'\x318', '\x31B', '\x31E', '\x32A', '\x335', '\x343', '\x34A', '\x353', 
		'\x35A', '\x35F', '\x36E', '\x375', '\x37B', '\x37F', '\x383', '\x387', 
		'\x38B', '\x390', '\x394', '\x398', '\x39A', '\x39F', '\x3A6', '\x3AB', 
		'\x3AD', '\x3B3', '\x3B8', '\x3BC', '\x3CF', '\x3D4', '\x3E4', '\x3E9', 
		'\x3EF', '\x3F5', '\x3F7', '\x3FB', '\x400', '\x404', '\x40C', '\x413', 
		'\x41B', '\x41E', '\x423', '\x42B', '\x430', '\x437', '\x43E', '\x443', 
		'\x449', '\x455', '\x45A', '\x45E', '\x468', '\x46D', '\x475', '\x478', 
		'\x47D', '\x485', '\x488', '\x48D', '\x492', '\x497', '\x49C', '\x4A3', 
		'\x4A8', '\x4B0', '\x4B5', '\x4BA', '\x4BF', '\x4C5', '\x4CB', '\x4CE', 
		'\x4D1', '\x4DA', '\x4E0', '\x4E6', '\x4E9', '\x4EC', '\x4F4', '\x4F9', 
		'\x4FE', '\x504', '\x507', '\x512', '\x51B', '\x525', '\x52A', '\x535', 
		'\x53A', '\x546', '\x54B', '\x557', '\x561', '\x566', '\x56E', '\x571', 
		'\x578', '\x580', '\x586', '\x58F', '\x599', '\x59D', '\x5A0', '\x5A9', 
		'\x5B7', '\x5BA', '\x5C3', '\x5C8', '\x5CF', '\x5D4', '\x5DC', '\x5E8', 
		'\x5EF', '\x5FD', '\x613', '\x635', '\x641', '\x647', '\x653', '\x660', 
		'\x67A', '\x67E', '\x683', '\x687', '\x68B', '\x693', '\x697', '\x69B', 
		'\x6A2', '\x6AB', '\x6B3', '\x6C2', '\x6CE', '\x6D4', '\x6DA', '\x6EF', 
		'\x6F4', '\x6FA', '\x706', '\x711', '\x71B', '\x71E', '\x723', '\x72C', 
		'\x732', '\x73C', '\x741', '\x74A', '\x761', '\x76B', '\x781', '\x788', 
		'\x790', '\x798', '\x7A3', '\x7BA', '\x7C4', '\x7CF', '\x7E5', '\x7E9', 
		'\x7EE', '\x7F6', '\x7FC', '\x800', '\x804', '\x808', '\x80E', '\x813', 
		'\x818', '\x81C', '\x820', '\x826', '\x82B', '\x830', '\x834', '\x838', 
		'\x83A', '\x83F', '\x844', '\x849', '\x84D', '\x851', '\x855', '\x85A', 
		'\x862', '\x868', '\x86C', '\x870', '\x874', '\x87A', '\x87F', '\x884', 
		'\x888', '\x88C', '\x88E', '\x893', '\x8A2', '\x8B0', '\x8BC', '\x8C5', 
		'\x8D4', '\x8E1', '\x8EA', '\x8F0', '\x8F7', '\x8FC', '\x903', '\x908', 
		'\x90F', '\x914', '\x91B', '\x920', '\x928', '\x92D', '\x931', '\x935', 
		'\x93A', '\x941', '\x948', '\x94D', '\x954', '\x959', '\x960', '\x965', 
		'\x96D', '\x972', '\x976', '\x97D', '\x983', '\x98A', '\x991', '\x998', 
		'\x9A0', '\x9A7', '\x9AF', '\x9B3', '\x9BA', '\x9C1', '\x9C8', '\x9D0', 
		'\x9D7', '\x9DF', '\x9E5', '\x9EB', '\x9F7', '\x9FD', '\xA03', '\xA0E', 
		'\xA17', '\xA1E', '\xA25', '\xA2A', '\xA2E', '\xA37', '\xA42', '\xA4C', 
		'\xA57', '\xA62', '\xA6D', '\xA78', '\xA84', '\xA86', '\xA9B', '\xA9D', 
		'\xAB0', '\xAB2', '\xABE', '\xAC0', '\xACF', '\xAD1', '\xADB', '\xAE9', 
		'\xAED', '\xAF1', '\xAF3', '\xB0A', '\xB15', '\xB1B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
